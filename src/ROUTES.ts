/* eslint-disable */
/**
 * This file was generated by 'vite-plugin-kit-routes'
 *
 *      >> DO NOT EDIT THIS FILE MANUALLY <<
 */

/**
 * PAGES
 */
const PAGES = {
  "/": `/`,
  "/[chainId=isChainId]": (params: { chainId: (ExtractParamType<typeof import('params/isChainId.ts').match>) }) => {
    return `/${params['chainId']}`
  },
  "/[chainId=isChainId]/address/[address=isAddress]": (params: { chainId: (ExtractParamType<typeof import('params/isChainId.ts').match>), address: (ExtractParamType<typeof import('params/isAddress.ts').match>) }) => {
    return `/${params['chainId']}/address/${params['address']}`
  },
  "/[chainId=isChainId]/balance/[balanceId=isId]": (params: { chainId: (ExtractParamType<typeof import('params/isChainId.ts').match>), balanceId: (ExtractParamType<typeof import('params/isId.ts').match>) }) => {
    return `/${params['chainId']}/balance/${params['balanceId']}`
  },
  "/[chainId=isChainId]/block/[blockId=isBlockId]": (params: { chainId: (ExtractParamType<typeof import('params/isChainId.ts').match>), blockId: (ExtractParamType<typeof import('params/isBlockId.ts').match>) }) => {
    return `/${params['chainId']}/block/${params['blockId']}`
  },
  "/[chainId=isChainId]/event/[eventId=isId]": (params: { chainId: (ExtractParamType<typeof import('params/isChainId.ts').match>), eventId: (ExtractParamType<typeof import('params/isId.ts').match>) }) => {
    return `/${params['chainId']}/event/${params['eventId']}`
  },
  "/[chainId=isChainId]/token/[address=isAddress]": (params: { chainId: (ExtractParamType<typeof import('params/isChainId.ts').match>), address: (ExtractParamType<typeof import('params/isAddress.ts').match>) }) => {
    return `/${params['chainId']}/token/${params['address']}`
  },
  "/[chainId=isChainId]/trace/[traceId=isId]": (params: { chainId: (ExtractParamType<typeof import('params/isChainId.ts').match>), traceId: (ExtractParamType<typeof import('params/isId.ts').match>) }) => {
    return `/${params['chainId']}/trace/${params['traceId']}`
  },
  "/[chainId=isChainId]/transaction/[hash=isHash]": (params: { chainId: (ExtractParamType<typeof import('params/isChainId.ts').match>), hash: (ExtractParamType<typeof import('params/isHash.ts').match>) }) => {
    return `/${params['chainId']}/transaction/${params['hash']}`
  },
  "/[chainId=isChainId]/transfer/[transferId=isId]": (params: { chainId: (ExtractParamType<typeof import('params/isChainId.ts').match>), transferId: (ExtractParamType<typeof import('params/isId.ts').match>) }) => {
    return `/${params['chainId']}/transfer/${params['transferId']}`
  },
  "/[chainId=isChainId]/tx/[transactionId=isTransactionId]": (params: { chainId: (ExtractParamType<typeof import('params/isChainId.ts').match>), transactionId: (ExtractParamType<typeof import('params/isTransactionId.ts').match>) }) => {
    return `/${params['chainId']}/tx/${params['transactionId']}`
  },
  "/timeline": `/timeline`
}

/**
 * SERVERS
 */
const SERVERS = {
  
}

/**
 * ACTIONS
 */
const ACTIONS = {
  
}

/**
 * LINKS
 */
const LINKS = {
  
}

type ParamValue = string | number | undefined

/**
 * Append search params to a string
 */
export const appendSp = (
  sp?: Record<string, ParamValue | ParamValue[]>,
  prefix: '?' | '&' = '?',
) => {
  if (sp === undefined) return ''

  const params = new URLSearchParams()
  const append = (n: string, v: ParamValue) => {
    if (v !== undefined) {
      params.append(n, String(v))
    }
  }

  let anchor = ''
  for (const [name, val] of Object.entries(sp)) {
    if (name === '__KIT_ROUTES_ANCHOR__' && val !== undefined) {
      anchor = `#${val}`
      continue
    }
    if (Array.isArray(val)) {
      for (const v of val) {
        append(name, v)
      }
    } else {
      append(name, val)
    }
  }

  const formatted = params.toString()
  if (formatted || anchor) {
    return `${prefix}${formatted}${anchor}`.replace('?#', '#')
  }
  return ''
}

/**
 * get the current search params
 * 
 * Could be use like this:
 * ```
 * route("/cities", { page: 2 }, { ...currentSP() })
 * ```
 */ 
export const currentSp = () => {
  const params = new URLSearchParams(window.location.search)
  const record: Record<string, string> = {}
  for (const [key, value] of params.entries()) {
    record[key] = value
  }
  return record
}

/* type helpers for route function */
type NonFunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? never : K }[keyof T]
type FunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T]
type FunctionParams<T> = T extends (...args: infer P) => any ? P : never

const AllObjs = { ...PAGES, ...ACTIONS, ...SERVERS, ...LINKS }
type AllTypes = typeof AllObjs

export type Routes = keyof AllTypes extends `${string}/${infer Route}` ? `/${Route}` : keyof AllTypes
export const routes = [
	...new Set(Object.keys(AllObjs).map((route) => /^\/.*|[^ ]?\/.*$/.exec(route)?.[0] ?? route)),
] as Routes[]

/**
 * To be used like this: 
 * ```ts
 * import { route } from './ROUTES'
 * 
 * route('site_id', { id: 1 })
 * ```
 */
export function route<T extends FunctionKeys<AllTypes>>(key: T, ...params: FunctionParams<AllTypes[T]>): string
export function route<T extends NonFunctionKeys<AllTypes>>(key: T): string
export function route<T extends keyof AllTypes>(key: T, ...params: any[]): string {
  if (AllObjs[key] as any instanceof Function) {
    const element = (AllObjs as any)[key] as (...args: any[]) => string
    return element(...params)
  } else {
    return AllObjs[key] as string
  }
}

/* type helpers param & predicate */
type ExtractFnPredicate<T> = T extends (param: any) => param is infer U ? U : never;
type ExtractParamType<T extends (param: any) => any> = ExtractFnPredicate<T> extends never ? Parameters<T>[0] : ExtractFnPredicate<T>

/**
* Add this type as a generic of the vite plugin `kitRoutes<KIT_ROUTES>`.
*
* Full example:
* ```ts
* import type { KIT_ROUTES } from '$lib/ROUTES'
* import { kitRoutes } from 'vite-plugin-kit-routes'
*
* kitRoutes<KIT_ROUTES>({
*  PAGES: {
*    // here, key of object will be typed!
*  }
* })
* ```
*/
export type KIT_ROUTES = {
  PAGES: { '/': never, '/[chainId=isChainId]': 'chainId', '/[chainId=isChainId]/address/[address=isAddress]': 'chainId' | 'address', '/[chainId=isChainId]/balance/[balanceId=isId]': 'chainId' | 'balanceId', '/[chainId=isChainId]/block/[blockId=isBlockId]': 'chainId' | 'blockId', '/[chainId=isChainId]/event/[eventId=isId]': 'chainId' | 'eventId', '/[chainId=isChainId]/token/[address=isAddress]': 'chainId' | 'address', '/[chainId=isChainId]/trace/[traceId=isId]': 'chainId' | 'traceId', '/[chainId=isChainId]/transaction/[hash=isHash]': 'chainId' | 'hash', '/[chainId=isChainId]/transfer/[transferId=isId]': 'chainId' | 'transferId', '/[chainId=isChainId]/tx/[transactionId=isTransactionId]': 'chainId' | 'transactionId', '/timeline': never }
  SERVERS: Record<string, never>
  ACTIONS: Record<string, never>
  LINKS: Record<string, never>
  Params: { 'chainId': never, 'address': never, 'balanceId': never, 'blockId': never, 'eventId': never, 'traceId': never, 'hash': never, 'transferId': never, 'transactionId': never }
}
