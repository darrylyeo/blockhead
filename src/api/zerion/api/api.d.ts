/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/wallets/{address}/charts/{chart_period}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get wallet's balance chart
         * @description This endpoint returns a portfolio balance chart for a wallet.
         *     This is over a specified time period, based on the provided start and end timestamps.
         *     Results can be filtered by blockchain and asset type, offering flexible and detailed visualizations of wallet performance, similar to what you see in the Zerion interface.
         *
         *     Note: We do not support historical protocol positions data.
         *
         */
        get: operations["getWalletChart"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/wallets/{address}/pnl/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get wallet's PnL
         * @description This endpoint returns the Profit and Loss (PnL) details of a web3 wallet.
         *     This includes Unrealized PnL, Realized PnL, Net Invested amounts and filters for asset categories like Non Fungible Tokens (NFTs).
         *     It uses the FIFO (First In, First Out) standard for calculations, providing accurate insights into wallet performance.
         *     Ideal for tracking and analyzing financial outcomes of wallet activity.
         *
         */
        get: operations["getWalletPNL"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/wallets/{address}/portfolio": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get wallet's portfolio
         * @description This endpoint returns the portfolio overview of a web3 wallet.
         *
         *     > NOTE: Consider all IDs as abstract strings, without making any assumptions about their format or relying on such assumptions. There is a non-zero probability that IDs may change in the future, and this should not result in any breaking changes.
         *
         */
        get: operations["getWalletPortfolio"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/wallets/{address}/positions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of wallet's fungible positions
         * @description This endpoint returns a list of wallet positions.
         *
         *     This endpoint supports testnets. To get data for testnets use `X-Env` header.
         *
         *     > NOTE: This endpoint supports a lot of filters, sorting and pagination parameters. Make sure that a request URL length is in a safe range for your platform. Usually, 2000 characters are the safe limit in virtually any combination of client and server software.
         *
         *     > NOTE: Consider all IDs as abstract strings, without making any assumptions about their format or relying on such assumptions. There is a non-zero probability that IDs may change in the future, and this should not result in any breaking changes.
         *
         */
        get: operations["listWalletPositions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/wallets/{address}/transactions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of wallet's transactions
         * @description This endpoint returns a list of transactions associated with the wallet.
         *
         *     This endpoint supports testnets. To get data for testnets use `X-Env` header.
         *
         *     > NOTE: This endpoint supports a lot of filters, sorting, and pagination parameters. Make sure that your request URL length is safe for your platform. Usually, 2000 characters are the safe limit in virtually any combination of client and server software.
         *
         *     > NOTE: Consider all IDs as abstract strings, without making any assumptions about their format or relying on such assumptions. There is a non-zero probability that IDs may change in the future, and this should not result in any breaking changes.
         *
         */
        get: operations["listWalletTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/wallets/{address}/nft-positions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of a wallet's NFT positions
         * @description This endpoint returns a list of the NFT positions held by a specific wallet.
         *
         *     This endpoint supports testnets. To get data for testnets use `X-Env` header.
         *
         *     If the wallet address has not been previously added, this endpoint may return a `202` status code. This indicates that the wallet's positions are not yet available, but will be in the near future. In this case, the client should periodically request this endpoint until a `200` status code is returned.
         *
         *     > NOTE: It is important to stop retrying after a reasonable period of time. If a `200` status code is not returned within 2 minutes, it is likely that an unexpected error has occurred and the client should stop polling.
         *
         *     > NOTE: This endpoint provides support for filters, sorting, and pagination parameters. Ensure that the length of the request URL falls within a safe range for your platform. Typically, a length of 2000 characters is a safe limit for most combinations of client and server software.
         *
         *     > NOTE: Consider all IDs as abstract strings, without making any assumptions about their format or relying on such assumptions. There is a non-zero probability that IDs may change in the future, and this should not result in any breaking changes.
         *
         */
        get: operations["listWalletNFTPositions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/wallets/{address}/nft-collections/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of NFT collections held by a wallet
         * @description This endpoint returns a list of the NFT collections held by a specific wallet.
         *
         *     This endpoint supports testnets. To get data for testnets use `X-Env` header.
         *
         *     If the wallet address has not been previously added, this endpoint may return a `202` status code. This indicates that the wallet's collections are not yet available, but will be in the near future. In this case, the client should periodically request this endpoint until a `200` status code is returned.
         *
         *     > NOTE: It is important to stop retrying after a reasonable period of time. If a `200` status code is not returned within 2 minutes, it is likely that an unexpected error has occurred, and the client should stop polling.
         *
         *     > NOTE: This endpoint provides support for filters, sorting. Ensure that the length of the request URL falls within a safe range for your platform. Typically, a length of 2000 characters is a safe limit for most combinations of client and server software.
         *
         *     > NOTE: Consider all IDs as abstract strings, without making any assumptions about their format or relying on such assumptions. There is a non-zero probability that IDs may change in the future, and this should not result in any breaking changes.
         *
         */
        get: operations["listWalletNFTCollections"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/wallets/{address}/nft-portfolio": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get wallet's NFT portfolio
         * @description This endpoint returns the NFT portfolio overview of a web3 wallet.
         *
         *     This endpoint supports testnets. To get data for testnets use `X-Env` header.
         *
         *     If the address was not added before it is possible that this endpoint will return `202` status. It means that portfolio for the wallet is not prepared yet, but will be available soon. In that case the client have to request this endpoint periodically, while `200` status wasn't returned.
         *
         *     > NOTE: Don't forget to stop retries after some reasonable period of time. If the `200` status is not returned within 2 minutes it most probably means that some unexpected error occurred and the client should stop the polling.
         *
         */
        get: operations["getWalletNftPortfolio"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/fungibles/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of fungible assets
         * @description This endpoint returns a paginated list of fungible assets supported by Zerion. It also provides the ability to search for fungibles.
         *     If no fungible assets are found for given filters, the empty list with 200 status is returned.
         *
         *     > NOTE: This endpoint supports a lot of filters, sorting, and pagination parameters. Ensure your request URL length is within a safe range for your platform. Usually, 2000 characters are the safe limit in virtually any combination of client and server software.
         *
         *     > NOTE: The `filter[implementation_address]` parameter ignores `filter[search_query]`. It may be changed in the future.
         *
         *     > NOTE: Consider all IDs as abstract strings, without making any assumptions about their format or relying on such assumptions. There is a non-zero probability that IDs may change in the future, and this should not result in any breaking changes.
         *
         */
        get: operations["listFungibles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/fungibles/{fungible_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get fungible asset by ID
         * @description This endpoint returns a fungible asset by unique identifier
         */
        get: operations["getFungibleById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/fungibles/{fungible_id}/charts/{chart_period}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a chart for a fungible asset
         * @description This endpoint returns the chart for the fungible asset for a selected period
         */
        get: operations["getFungibleChart"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/chains/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of all chains
         * @description This endpoint returns list of all chains supported by Zerion.
         *
         *     This endpoint supports testnets. To get data for testnets use `X-Env` header.
         *
         */
        get: operations["listChains"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/chains/{chain_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get chain by ID
         * @description This endpoint returns chain by unique chain identifier.
         *
         *     This endpoint supports testnets. To get data for testnets use `X-Env` header.
         *
         */
        get: operations["getChainById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/swap/fungibles/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get fungibles available for bridge.
         * @description The endpoint provides a list of fungibles available for bridge exchange. This endpoint is specifically designed for situations where the input and output chains are different.
         */
        get: operations["swapFungibles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/swap/offers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available swap offers
         * @description The endpoint offers a comprehensive overview of relevant trades and bridge exchanges. A bridge exchange refers to the transfer of cryptocurrencies between different blockchain networks, while a trade pertains to an exchange of cryptocurrencies within the same network. In an effort to secure the optimal exchange rate for our users, our system sends requests to multiple exchange providers. Zerion only charges a commission fee of 0.5% on L2 and alternative L1 trades, which can be waived by obtaining our Genesis NFT. Our platform has the advantage of being an aggregator of various exchanges, ensuring that users will always get the best exchange rates available. Please note that due to the nature of the multiple requests and calculations involved, it is normal for this endpoint to have a relatively long timeout. You can expect a response time of around 5-10 seconds.
         */
        get: operations["swapOffers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/gas-prices/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of all available gas prices
         * @description This endpoint provides real-time information on the current gas prices across all supported blockchain networks. Gas prices play a crucial role in the speed and cost of executing transactions on a blockchain, and fluctuate frequently based on network demand and usage. By using this endpoint, developers can stay up-to-date with the latest gas prices and adjust their application's transaction parameters accordingly to ensure optimal speed and cost efficiency.
         */
        get: operations["listGasPrices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/nfts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of NFTs
         * @description This endpoint returns list of NFTs by using different parameters.
         *
         *     It returns NFTs of both types - ERC721 and ERC1155.
         *
         *     This endpoint supports testnets. To get data for testnets use `X-Env` header.
         *
         *     > NOTE: Consider all IDs as abstract strings, without making any assumptions about their format or relying on such assumptions. There is a non-zero probability that IDs may change in the future, and this should not result in any breaking changes.
         *
         */
        get: operations["listNFTs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/nfts/{nft_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single NFT by ID
         * @description This endpoint returns single NFT by its unique identifier.
         *
         *     This endpoint supports testnets. To get data for testnets use `X-Env` header.
         *
         */
        get: operations["getNFTById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Approval: {
            fungible_info?: {
                /**
                 * @description Displayable name of the fungible fungible.
                 * @example Bankless BED Index
                 */
                name?: string;
                /**
                 * @description Displayable symbol of the fungible fungible.
                 * @example BED
                 */
                symbol?: string;
                /**
                 * @description Brief description of the fungible.
                 * @example The BED index is meant to track crypto’s top 3 investab...
                 */
                description?: string | null;
                icon?: components["schemas"]["Icon"];
                flags?: components["schemas"]["FungibleFlags"];
                /** @description Implementation details of the fungible on various chains. */
                implementations?: components["schemas"]["FungibleImplementation"][];
            };
            nft_info?: components["schemas"]["NFTInfo"];
            quantity: components["schemas"]["Quantity"];
            /**
             * @description Address of the sender of the approval.
             * @example 0x60a26d69263ef43e9a68964ba141263f19d71d51
             */
            sender: string;
        };
        TransactionDAppInfo: {
            /**
             * @description Human readable representation of DApp, that wallet interacted to. That offers more intuitive understanding for users.
             *
             * @example AAVE
             */
            name?: string;
            icon?: components["schemas"]["Icon"];
            /**
             * @description The address of the executed contract.
             * @example 0x794a61358d6845594f94dc1db02a252b5b4814ad
             */
            contract_address?: string;
            method?: {
                /**
                 * @description Execution method id. First 4 bytes of keccak256 of method signature in hex format.
                 * @example 0x095ea7b3
                 */
                id?: string;
                /**
                 * @description Human readable name of the method.
                 * @example Approve
                 */
                name?: string;
            };
        };
        PositionDAppInfo: {
            /**
             * @description Human readable representation of DApp. That offers more intuitive understanding for users.
             *
             *     Note: only available for positions within protocols.
             *
             * @example AAVE
             */
            name?: string;
            icon?: components["schemas"]["Icon"];
            /**
             * Format: url
             * @description URL of the DApp the position relates to.
             * @example https://app.aave.com/
             */
            url?: string;
        };
        WalletTransactionsResponse: {
            links: components["schemas"]["WalletTransactionsResponseLinks"];
            data: components["schemas"]["WalletTransactionContainer"][];
        };
        WalletTransactionsResponseLinks: {
            /**
             * Format: url
             * @example https://api.zerion.io/v1/wallets/0x42b9df65b219b3dd36ff330a4dd8f327a6ada990/transactions/?currency=usd&page%5Bsize%5D=10
             */
            self: string;
            /**
             * Format: url
             * @example https://api.zerion.io/v1/wallets/0x42b9df65b219b3dd36ff330a4dd8f327a6ada990/transactions/?currency=usd&page%5BlastId%5D=950ac208a5545dd19a1b2eb8edaef36c&page%5BlastTimestamp%5D=2022-12-08T09%3A12%3A35Z&page%5Bsize%5D=10
             */
            next?: string;
        };
        WalletTransactionContainer: {
            /** @example transactions */
            type: string;
            /**
             * @description Unique ID of the transaction.
             * @example 52d994a173d755e99845e861d534a419
             */
            id: string;
            attributes: components["schemas"]["WalletTransactionAttributes"];
            relationships?: {
                chain?: components["schemas"]["ChainRelationship"];
                dapp?: components["schemas"]["WalletPositionRelationships"]["dapp"];
            };
        };
        WalletTransactionAttributes: {
            operation_type?: components["schemas"]["TransactionType"];
            /**
             * @description Hash of the transaction.
             * @example 0x109d8622084d562263230ba5de412b5cd7c372019131e2c9d0a8aa4925eb6034
             */
            hash: string;
            /**
             * Format: int32
             * @description Number of a block where the transaction was mined.
             * @example 15345739
             */
            mined_at_block: number;
            /**
             * @description Timestamp string in ISO 8601 format when the transaction was mined.
             * @example 2022-08-15T11:26:31+00:00
             */
            mined_at: string;
            /**
             * @description Address of a sender of the transaction. It could be a smart contract address too.
             * @example 0x42b9df65b219b3dd36ff330a4dd8f327a6ada990
             */
            sent_from: string;
            /**
             * @description Address of a recipient of the transaction. It could a be smart contract address too.
             * @example 0x794a61358d6845594f94dc1db02a252b5b4814ad
             */
            sent_to: string;
            /**
             * @description Status of the transaction.
             * @example confirmed
             * @enum {string}
             */
            status: "confirmed" | "failed" | "pending";
            /**
             * Format: int32
             * @description Nonce of the transaction.
             * @example 3757
             */
            nonce: number;
            fee: components["schemas"]["TransactionFee"];
            /** @description List of transfers. An empty list is returned if the transaction does not have any transfers. */
            transfers: components["schemas"]["Transfer"][];
            /** @description List of approvals. An empty list is returned if the transaction does not have any approvals. */
            approvals: components["schemas"]["Approval"][];
            application_metadata?: components["schemas"]["TransactionDAppInfo"];
            flags?: {
                /** @description Is the transaction classified by Zerion as trash. */
                is_trash?: boolean;
            };
        };
        WalletNFTPositionAttributes: {
            /**
             * @description The date and the time when the position was updated in ISO format.
             * @example 2023-02-28T19:24:39.000Z
             */
            changed_at?: string;
            /**
             * @description The quantity of the NFT position.
             * @example 1
             */
            amount?: string;
            /**
             * Format: float
             * @description The lowest price (floor) of the position's NFT. Measured in the requested currency.
             * @example 0.043615722
             */
            price?: number;
            /**
             * Format: float
             * @description The lowest value of the NFT position (floor). Measured in the requested currency.
             */
            value?: number;
            nft_info?: components["schemas"]["NFTInfo"];
            collection_info?: components["schemas"]["NFTCollectionInfo"];
        };
        /** @description The NFT position of the wallet. */
        WalletNFTPositionContainer: {
            /**
             * @description NFT positions resource type.
             * @example nft_positions
             */
            type: string;
            /**
             * @description NFT position's unique ID.
             * @example 0x42b9df65b219b3dd36ff330a4dd8f327a6ada990:ethereum:22:0x909899c5dbb5002610dd8543b6f638be56e3b17e:57896044618658097711785492504343953928676686534345912800509039648547174119787
             */
            id: string;
            attributes: components["schemas"]["WalletNFTPositionAttributes"];
            relationships?: components["schemas"]["WalletNFTPositionRelationships"];
            included?: components["schemas"]["WalletNFTPositionIncluded"];
        };
        WalletNFTPositionsProcessingResponse: {
            links: components["schemas"]["WalletNFTPositionsResponseLinks"];
            /** @example [] */
            data: unknown[];
        };
        WalletNFTPositionsResponse: {
            links: components["schemas"]["WalletNFTPositionsResponseLinks"];
            data: components["schemas"]["WalletNFTPositionContainer"][];
        };
        WalletNFTPositionsResponseLinks: {
            /**
             * Format: url
             * @example https://api.zerion.io/v1/wallets/0x42b9df65b219b3dd36ff330a4dd8f327a6ada990/nft-positions/
             */
            self: string;
        };
        WalletNFTPositionRelationships: {
            chain: unknown & components["schemas"]["ChainRelationship"];
            nft?: unknown & {
                data: components["schemas"]["NFTContainerShort"];
            };
            nft_collection: unknown & components["schemas"]["NFTCollectionRelationship"];
        };
        WalletNFTPositionIncluded: (components["schemas"]["NFTContainer"] | components["schemas"]["NFTCollectionContainer"] | components["schemas"]["WalletNFTCollectionContainer"])[];
        WalletNFTCollectionAttributes: {
            /**
             * @description The earliest `changed_at` date and time alongside all wallet's positions from the collection.
             * @example 2020-02-28T19:24:39.000Z
             */
            min_changed_at?: string | null;
            /**
             * @description The most recent `changed_at` date and time alongside all wallet's positions from the collection.
             * @example 2023-02-28T19:24:39.000Z
             */
            max_changed_at?: string | null;
            /**
             * @description The total quantity of the wallet's NFT positions from the collection.
             * @example 1
             */
            nfts_count: string;
            /**
             * Format: float
             * @description The lowest price (floor) of the all wallet's NFTs positions from the collection. Measured in the requested currency.
             */
            total_floor_price: number;
            collection_info?: components["schemas"]["NFTCollectionInfo"];
        };
        /** @description The NFT collection held by the wallet. */
        WalletNFTCollectionContainer: {
            /**
             * @description NFT collection resource type.
             * @example wallet_nft_collections
             */
            type: string;
            /**
             * @description NFT collection's unique ID.
             * @example 14
             */
            id: number;
            attributes: components["schemas"]["WalletNFTCollectionAttributes"];
            relationships?: components["schemas"]["WalletNFTCollectionRelationships"];
        };
        WalletNFTCollectionsProcessingResponse: {
            links: components["schemas"]["WalletNFTCollectionsResponseLinks"];
            /** @example [] */
            data: unknown[];
        };
        WalletNFTCollectionsResponse: {
            links: components["schemas"]["WalletNFTCollectionsResponseLinks"];
            data: (components["schemas"]["WalletNFTCollectionContainer"] & {
                included?: components["schemas"]["WalletNFTCollectionIncluded"];
            })[];
        };
        WalletNFTCollectionsResponseLinks: {
            /**
             * Format: url
             * @example https://api.zerion.io/v1/wallets/0x42b9df65b219b3dd36ff330a4dd8f327a6ada990/nft-collections/
             */
            self: string;
        };
        WalletNFTCollectionRelationships: {
            /** @description The blockchain on which the NFT collection exists. */
            chains?: components["schemas"]["ChainRelationship"][];
            nft_collection: unknown & components["schemas"]["NFTCollectionRelationship"];
        };
        WalletNFTCollectionIncluded: components["schemas"]["NFTCollectionContainer"][];
        WalletPositionAttributes: {
            /**
             * @description Id of parent position
             * @example 0x111c47865ade3b172a928df8f990bc7f2a3b9aaa-aurora-asset-none-
             */
            parent?: string | null;
            /**
             * @description Protocol which the position is belong to.
             * @example null
             */
            protocol?: string | null;
            /**
             * @description Address of the pool the position belongs to if applicable
             * @example 0x109830a1aaad605bbf02a9dfa7b0b92ec2fb7daa
             */
            pool_address?: string;
            /**
             * @description Human readable position name
             * @example Asset
             */
            name: string;
            /**
             * @description Unique ID which could be used to group position within DApp naturally for convenience of users. For example for UniswapV2 it is grouping by specific pool.
             * @example 0a771a0064dad468045899032c7fb01a971f973f7dff0a5cdc3ce199f45e94d7
             */
            group_id?: string;
            position_type?: components["schemas"]["PositionType"];
            quantity: components["schemas"]["Quantity"];
            /**
             * Format: float
             * @description Position value in requested currency
             * @example 5.384656557642683
             */
            value?: number | null;
            /**
             * Format: float
             * @description Price of position's asset
             * @example 0.043615722
             */
            price?: number;
            changes?: components["schemas"]["WalletPositionChange"];
            fungible_info?: components["schemas"]["Approval"]["fungible_info"];
            flags?: components["schemas"]["WalletPositionFlags"];
            /**
             * @description ISO-8601 timestamp the position was updated at.
             *     The field indicates when our service last checked and updated the balance.
             *     This update typically occurs immediately after any event causing a change in position.
             *
             * @example 2023-11-10T23:00:00Z
             */
            updated_at?: string;
            /**
             * Format: int32
             * @description Number of the block of the position
             */
            updated_at_block?: number;
            application_metadata?: components["schemas"]["PositionDAppInfo"];
        };
        WalletPositionContainer: {
            /** @example positions */
            type: string;
            /**
             * @description Position's unique id
             * @example 0x111c47865ade3b172a928df8f990bc7f2a3b9aaa-aurora-asset-none-
             */
            id: string;
            attributes: components["schemas"]["WalletPositionAttributes"];
            relationships?: components["schemas"]["WalletPositionRelationships"];
        };
        /** @description Position changes */
        WalletPositionChange: {
            /**
             * Format: float
             * @description Daily absolute position change value
             * @example 0.272309794
             */
            absolute_1d: number;
            /**
             * Format: float
             * @description Daily position change percent
             * @example 5.326512552079021
             */
            percent_1d: number;
        };
        WalletPositionsProcessingResponse: {
            links: components["schemas"]["WalletPositionsResponseLinks"];
            /** @example [] */
            data: unknown[];
        };
        WalletPositionsResponse: {
            links: components["schemas"]["WalletPositionsResponseLinks"];
            data: components["schemas"]["WalletPositionContainer"][];
        };
        WalletPositionsResponseLinks: {
            /**
             * Format: url
             * @example https://api.zerion.io/v1/wallets/0x42b9df65b219b3dd36ff330a4dd8f327a6ada990/positions/
             */
            self: string;
        };
        WalletPositionRelationships: {
            chain: components["schemas"]["ChainRelationship"];
            fungible?: {
                links: {
                    /**
                     * Format: url
                     * @example https://api.zerion.io/v1/fungibles/0x111c47865ade3b172a928df8f990bc7f2a3b9aaa
                     */
                    related: unknown;
                };
                data: {
                    /** @example fungibles */
                    type: string;
                    /** @example 0x111c47865ade3b172a928df8f990bc7f2a3b9aaa */
                    id: string;
                };
            };
            dapp?: {
                data: {
                    /**
                     * @description Decentralized application resource type.
                     * @example dapps
                     */
                    type: string;
                    /**
                     * @description Decentralized application ID
                     * @example aave-v3
                     */
                    id: string;
                };
            };
        };
        WalletPortfolioResponse: {
            links: components["schemas"]["WalletPortfolioResponseLinks"];
            data: components["schemas"]["WalletPortfolioContainer"];
        };
        WalletPortfolioResponseLinks: {
            /**
             * Format: url
             * @example https://api.zerion.io/v1/wallets/0x42b9df65b219b3dd36ff330a4dd8f327a6ada990/portfolio
             */
            self: string;
        };
        WalletPortfolioContainer: {
            /** @example portfolio */
            type: string;
            /**
             * @description Portfolio unique ID
             * @example 0x42b9df65b219b3dd36ff330a4dd8f327a6ada990
             */
            id: string;
            attributes: components["schemas"]["WalletPortfolioAttributes"];
        };
        WalletPortfolioAttributes: {
            positions_distribution_by_type?: components["schemas"]["PositionsDistributionByType"];
            positions_distribution_by_chain?: components["schemas"]["PositionsDistributionByChain"];
            total?: components["schemas"]["WalletPortfolioTotal"];
            /** @description Portfolio changes */
            changes?: {
                /**
                 * Format: float
                 * @description Daily absolute portfolio change value
                 * @example 102.0271468171374
                 */
                absolute_1d: number;
                /**
                 * Format: float
                 * @description Daily portfolio change percent
                 * @example 5.326512552079021
                 */
                percent_1d: number;
            };
        };
        /** @description Total portfolio values across all wallet positions and NFT */
        WalletPortfolioTotal: {
            /**
             * Format: float
             * @description Total value of all positions
             * @example 2017.4858230069574
             */
            positions?: number;
        };
        WalletNFTPortfolioResponse: {
            links: components["schemas"]["WalletNFTPortfolioResponseLinks"];
            data: components["schemas"]["WalletNFTPortfolioContainer"];
        };
        WalletNFTPortfolioProcessingResponse: {
            links: components["schemas"]["WalletNFTPortfolioResponseLinks"];
            data?: Record<string, never>;
        };
        WalletNFTPortfolioResponseLinks: {
            /**
             * Format: url
             * @example https://api.zerion.io/v1/wallets/0x42b9df65b219b3dd36ff330a4dd8f327a6ada990/nft-portfolio/?currency=usd
             */
            self: string;
        };
        WalletNFTPortfolioContainer: {
            /** @example wallet_nft_portfolio */
            type: string;
            /**
             * @description NFT portfolio unique ID
             * @example nft-portfolio-0x42b9df65b219b3dd36ff330a4dd8f327a6ada990
             */
            id: string;
            attributes: components["schemas"]["WalletNFTPortfolioAttributes"];
        };
        WalletNFTPortfolioAttributes: {
            positions_distribution_by_chain?: components["schemas"]["NFTPositionsDistributionByChain"];
        };
        SwapOffersResponse: {
            links: {
                /**
                 * Format: url
                 * @example https://api.zerion.io/v1/wallet/0x42b9df65b219b3dd36ff330a4dd8f327a6ada990/swap-list
                 */
                self: string;
            };
            data: components["schemas"]["SwapContainer"][];
        };
        SwapContainer: {
            /** @example swaps */
            type?: string;
            /**
             * @description Unique ID of the swap.
             * @example 52d994a173d755e99845e861d534a419
             */
            id?: string;
            attributes?: components["schemas"]["SwapAttributes"];
            relationships?: components["schemas"]["SwapRelationships"];
        };
        SwapAttributes: {
            /** @description Indicates whether the wallet meets necessary preconditions for the transaction to be successfully completed. */
            preconditions_met?: {
                /**
                 * @description Indicates whether the wallet has authorized sufficient asset for the swap (True) or not (False).
                 * @example true
                 */
                enough_allowance?: boolean;
                /**
                 * @description Indicates whether the wallet has enough assets for the swap (True) or not (False).
                 * @example true
                 */
                enough_balance?: boolean;
            };
            input_quantity_max?: unknown & components["schemas"]["Quantity"];
            output_quantity_min?: unknown & components["schemas"]["Quantity"];
            estimation?: {
                input_quantity?: unknown & components["schemas"]["Quantity"];
                output_quantity?: unknown & components["schemas"]["Quantity"];
                /**
                 * Format: int64
                 * @description The estimated amount of gas required for a transaction.
                 * @example 100000
                 */
                gas?: number;
                /**
                 * Format: uint64
                 * @description The estimated time it will take for the output asset to be delivered to the user's wallet. Used only for bridge transactions, `0` otherwise.
                 * @example 120
                 */
                seconds?: number;
            };
            liquidity_source?: {
                /**
                 * @description The unique identifier of the liquidity source being used for the exchange.
                 * @example 1inch-v4
                 */
                id?: string;
                /**
                 * @description The name of the liquidity source.
                 * @example USD Coin
                 */
                name?: string;
                icon?: unknown & components["schemas"]["Icon"];
            };
            /** @description The address of the contract to which approval must be given. Approval is not needed for the base currency (for example ETH on ethereum chain). `null` when allowance is not required */
            asset_spender?: string | null;
            /**
             * @description The type of slippage. Possible values are 'normal' and 'zero-slippage'.
             * @example normal
             * @enum {string}
             */
            slippage_type?: "normal" | "zero-slippage";
            /** @description An object representing a transaction that is to be signed by a wallet and to be sent to the blockchain. `null` if balance or allowance is not enough. */
            transaction?: {
                /**
                 * @description The address that the transaction is to be sent to, formatted in checksummed.
                 * @example 0xB2BE281e8b11b47FeC825973fc8BB95332022A54
                 */
                to?: string;
                /**
                 * @description The address that the transaction is to be signed by, formatted in checksummed format.
                 * @example 0xB2BE281e8b11b47FeC825973fc8BB95332022A54
                 */
                from?: string;
                /**
                 * @description The ID of the blockchain network, represented in hexadecimal format.
                 * @example 0x1
                 */
                chain_id?: string;
                /**
                 * Format: int64
                 * @description The amount of gas to be supplied for the transaction, which is set to be 15% higher than the estimation.
                 * @example 115000
                 */
                gas?: number;
                /** @description The data to be used as input for the transaction, represented in hexadecimal format. */
                data?: string;
                /**
                 * @description The amount of the blockchain's native asset to be sent with the transaction, represented in smaller units (wei).
                 * @example 1000000000000000000
                 */
                value?: string;
            } | null;
            fee?: {
                protocol?: {
                    /**
                     * Format: float
                     * @description The Zerion fee without a fee waiver, expressed as a percentage.
                     * @example 0.5
                     */
                    base_percent?: number;
                    /**
                     * Format: float
                     * @description The Zerion fee after considering the user's fee waiver, expressed as a percentage.
                     * @example 0
                     */
                    percent?: number;
                    quantity?: unknown & components["schemas"]["Quantity"];
                };
                integrator?: {
                    /**
                     * Format: float
                     * @description The fee charged by the integrator, expressed as a percentage.
                     * @example 1
                     */
                    percent?: number;
                    quantity?: unknown & components["schemas"]["Quantity"];
                };
            };
        };
        SwapRelationships: {
            input_chain?: unknown & components["schemas"]["ChainRelationship"];
            input_fungible?: unknown & {
                links: components["schemas"]["FungibleRelationshipLinks"];
                data: components["schemas"]["FungibleRelationshipData"];
            };
            /** @description The target chain the wallet wants to receive assets. */
            output_chain?: {
                links: components["schemas"]["ChainRelationship"]["links"];
                data: components["schemas"]["ChainShort"];
            };
            /** @description The fungible asset which the user wants to receive during the trade. */
            output_fungible?: {
                links: components["schemas"]["FungibleRelationshipLinks"];
                data: components["schemas"]["FungibleRelationshipData"];
            };
        };
        /** @description Transaction object */
        AddressTransactionAttributes: {
            /**
             * @description Chain where transaction mined
             * @example eth
             */
            chain?: string;
            /**
             * @description Transaction hash
             * @example 0xb99c4dcab2c6da54247bbfad271f81e776485e2c2b0aad30a237ca12ddf64bee
             */
            hash?: string;
            /**
             * @description Transaction type
             * @example send
             * @enum {string}
             */
            type?: "authorize" | "deployment" | "deposit" | "execution" | "receive" | "send" | "trade" | "withdraw";
            /**
             * @description Transaction protocol
             * @example null
             */
            protocol?: string | null;
            /**
             * @description Transaction status
             * @example confirmed
             * @enum {string}
             */
            status?: "confirmed" | "failed";
            /**
             * @description Transaction direction
             * @example out
             * @enum {string|null}
             */
            direction?: "in" | "out" | "self" | null;
            /**
             * @description Transaction sender
             * @example 0x23d3e894b5cdb6a80afffd351d348868fb08dddf
             */
            address_from?: string | null;
            /**
             * @description Transaction recipient
             * @example 0xaab5533016b7e4b1eddda6c9927163fec31ef36a
             */
            address_to?: string | null;
            /**
             * @description Address of contract
             * @example 0xaa0004e3622c338ea93b7f62c45162066ffbbbea
             */
            contract?: string | null;
            /**
             * @description Transaction's nonce
             * @example null
             */
            nonce?: number | null;
            block?: components["schemas"]["Block"];
            fee?: components["schemas"]["TransactionFee"];
            /** @example !todo */
            meta?: string;
            /** @description Array of changes */
            changes?: components["schemas"]["TransactionChange"][];
        };
        AddressTransactionData: {
            /** @example transactions */
            type?: string;
            /** @example 1148acca-a86f4dcab226dd54-2f0da84d */
            id?: string;
            /**
             * @description Transaction hash
             * @example 0xb99c4dcab2c6da54247bbfad271f81e776485e2c2b0aad30a237ca12ddf64bee
             */
            hash?: string;
            /**
             * @description Transaction kind
             * @example send
             * @enum {string}
             */
            kind?: "authorize" | "deployment" | "deposit" | "execution" | "receive" | "send" | "trade" | "withdraw";
            /**
             * @description Transaction protocol
             * @example null
             */
            protocol?: string | null;
            /**
             * @description Transaction status
             * @example confirmed
             * @enum {string}
             */
            status?: "confirmed" | "failed";
            /**
             * @description Transaction direction
             * @example out
             * @enum {string|null}
             */
            direction?: "in" | "out" | "self" | null;
            /**
             * @description Transaction sender
             * @example 0x23d3e894b5cdb6a80afffd351d348868fb08dddf
             */
            address_from?: string | null;
            /**
             * @description Transaction recipient
             * @example 0xaab5533016b7e4b1eddda6c9927163fec31ef36a
             */
            address_to?: string | null;
            /**
             * @description Address of contract
             * @example 0xaa0004e3622c338ea93b7f62c45162066ffbbbea
             */
            contract?: string | null;
            /**
             * @description Transaction's nonce
             * @example null
             */
            nonce?: number | null;
            block?: components["schemas"]["Block"];
            fee?: components["schemas"]["TransactionFee"];
            /** @example !todo */
            meta?: string;
            /** @description Array of changes */
            changes?: components["schemas"]["TransactionChange"][];
            relationships?: components["schemas"]["AddressTransactionRelationships"];
        };
        AddressTransactionRelationships: {
            chain?: components["schemas"]["ChainShort"];
        };
        AddressTransactionsResponse: {
            links?: {
                /**
                 * Format: url
                 * @example https://api.zerion.io/v1/accounts/0x42b9df65b219b3dd36ff330a4dd8f327a6ada990/transactions/?page[after]=...
                 */
                next?: string;
            };
            data?: components["schemas"]["AddressTransactionData"][];
        };
        FungibleAttributes: {
            /**
             * @description Displayable name of the fungible.
             * @example Bankless BED Index
             */
            name: string;
            /**
             * @description Displayable symbol of the fungible.
             * @example BED
             */
            symbol: string;
            /**
             * @description Brief description of the fungible.
             * @example The BED index is meant to track crypto’s top 3 investab...
             */
            description?: string | null;
            icon?: components["schemas"]["Icon"];
            flags: components["schemas"]["FungibleFlags"];
            external_links: components["schemas"]["ExternalLinks"];
            /** @description Implementation details of the fungible on various chains. */
            implementations: components["schemas"]["FungibleImplementation"][];
            market_data: components["schemas"]["FungibleMarketData"];
        };
        /** @description Object, representing fungible asset. */
        FungibleContainer: {
            /**
             * @description Fungible resource type
             * @example fungibles
             */
            type: string;
            /**
             * @description Fungible unique identifier
             * @example 0x2af1df3ab0ab157e1e2ad8f88a7d04fbea0c7dc6
             */
            id: string;
            attributes?: components["schemas"]["FungibleAttributes"];
            relationships?: components["schemas"]["FungibleRelationships"];
        };
        FungibleContainerShort: {
            /**
             * @description Fungible resource type
             * @example fungibles
             */
            type: string;
            /**
             * @description Fungible unique identifier
             * @example 0x2af1df3ab0ab157e1e2ad8f88a7d04fbea0c7dc6
             */
            id: string;
        };
        FungibleFlags: {
            /**
             * @description Whether this fungible verified or not
             * @example true
             */
            verified: boolean;
        };
        FungibleImplementation: {
            /**
             * @description Unique id of the chain.
             * @example ethereum
             */
            chain_id: string;
            /**
             * @description Implementation address on the chain.
             * @example 0x2af1df3ab0ab157e1e2ad8f88a7d04fbea0c7dc6
             */
            address?: string;
            /**
             * @description Number of decimals points of the implementation.
             * @example 18
             */
            decimals: number;
        };
        FungibleMarketData: {
            /**
             * Format: double
             * @description Total market supply of fungible
             * @example 29905.762448515918
             */
            total_supply?: number;
            /**
             * Format: double
             * @description Circulating value of fungible
             * @example 29905.762448515918
             */
            circulating_supply?: number;
            /**
             * Format: double
             * @description Total market capitalization of fungible in selected currency
             * @example 3196313.736038149
             */
            fully_diluted_valuation?: number;
            /**
             * Format: double
             * @description Circulating market capitalization of fungible in selected currency
             * @example 3196313.736038149
             */
            market_cap?: number;
            /**
             * Format: double
             * @description Latest fungible price
             * @example 106.87952669793131
             */
            price: number | null;
            changes?: components["schemas"]["FungibleMarketDataChanges"];
        };
        FungibleMarketDataChanges: {
            /**
             * Format: double
             * @description Price relative change in percent for 1 day
             * @example -0.7379066649086338
             */
            percent_1d?: number | null;
            /**
             * Format: double
             * @description Price relative change in percent for 30 days
             * @example -2.499465618806962
             */
            percent_30d?: number | null;
            /**
             * Format: double
             * @description Price relative change in percent for 90 days
             * @example 11.316340269371775
             */
            percent_90d?: number | null;
            /**
             * Format: double
             * @description Price relative change in percent for 1 year
             * @example null
             */
            percent_365d?: number | null;
        };
        FungibleResponse: {
            links: components["schemas"]["FungibleResponseLinks"];
            data: components["schemas"]["FungibleContainer"];
        };
        FungibleResponseShort: {
            links: components["schemas"]["FungibleResponseLinks"];
            data: components["schemas"]["FungibleContainerShort"];
        };
        FungibleResponseLinks: {
            /**
             * Format: url
             * @example https://api.zerion.io/v1/fungibles/0x2af1df3ab0ab157e1e2ad8f88a7d04fbea0c7dc6
             */
            related?: string;
        };
        FungiblesResponse: {
            links: components["schemas"]["FungiblesResponseLinks"];
            data: components["schemas"]["FungibleContainer"][];
        };
        FungiblesResponseLinks: {
            /**
             * Format: url
             * @example https://api.zerion.io/v1/fungibles/
             */
            self: string;
            /**
             * Format: url
             * @example https://api.zerion.io/v1/fungibles/
             */
            first?: string;
            /**
             * Format: url
             * @example https://api.zerion.io/v1/fungibles/
             */
            next?: string;
            /**
             * Format: url
             * @example https://api.zerion.io/v1/fungibles/
             */
            prev?: string;
        };
        FungibleRelationships: {
            chart_hour: {
                links: {
                    /**
                     * Format: url
                     * @example https://api.zerion.io/v1/fungibles/0x2af1df3ab0ab157e1e2ad8f88a7d04fbea0c7dc6/charts/hour
                     */
                    related: unknown;
                };
                data: {
                    /** @example fungible_charts */
                    type: string;
                    /** @example 0x2af1df3ab0ab157e1e2ad8f88a7d04fbea0c7dc6-hour */
                    id: string;
                };
            };
            chart_day: {
                links: {
                    /**
                     * Format: url
                     * @example https://api.zerion.io/v1/fungibles/0x2af1df3ab0ab157e1e2ad8f88a7d04fbea0c7dc6/charts/day
                     */
                    related: unknown;
                };
                data: {
                    /** @example fungible_charts */
                    type: string;
                    /** @example 0x2af1df3ab0ab157e1e2ad8f88a7d04fbea0c7dc6-day */
                    id: string;
                };
            };
            chart_week: {
                links: {
                    /**
                     * Format: url
                     * @example https://api.zerion.io/v1/fungibles/0x2af1df3ab0ab157e1e2ad8f88a7d04fbea0c7dc6/charts/week
                     */
                    related: unknown;
                };
                data: {
                    /** @example fungible_charts */
                    type: string;
                    /** @example 0x2af1df3ab0ab157e1e2ad8f88a7d04fbea0c7dc6-week */
                    id: string;
                };
            };
            chart_month: {
                links: {
                    /**
                     * Format: url
                     * @example https://api.zerion.io/v1/fungibles/0x2af1df3ab0ab157e1e2ad8f88a7d04fbea0c7dc6/charts/month
                     */
                    related: unknown;
                };
                data: {
                    /** @example fungible_charts */
                    type: string;
                    /** @example 0x2af1df3ab0ab157e1e2ad8f88a7d04fbea0c7dc6-month */
                    id: string;
                };
            };
            chart_year: {
                links: {
                    /**
                     * Format: url
                     * @example https://api.zerion.io/v1/fungibles/0x2af1df3ab0ab157e1e2ad8f88a7d04fbea0c7dc6/charts/year
                     */
                    related: unknown;
                };
                data: {
                    /** @example fungible_charts */
                    type: string;
                    /** @example 0x2af1df3ab0ab157e1e2ad8f88a7d04fbea0c7dc6-year */
                    id: string;
                };
            };
            chart_max: {
                links: {
                    /**
                     * Format: url
                     * @example https://api.zerion.io/v1/fungibles/0x2af1df3ab0ab157e1e2ad8f88a7d04fbea0c7dc6/charts/max
                     */
                    related: unknown;
                };
                data: {
                    /** @example fungible_charts */
                    type: string;
                    /** @example 0x2af1df3ab0ab157e1e2ad8f88a7d04fbea0c7dc6-max */
                    id: string;
                };
            };
        };
        FungibleRelationshipLinks: {
            /**
             * Format: url
             * @description URL to the current fungible.
             * @example https://api.zerion.io/v1/fungibles/eth
             */
            related: string;
        };
        FungibleRelationshipData: {
            /**
             * @description Fungible resource type
             * @example fungibles
             */
            type: string;
            /**
             * @description Fungible unique identifier.
             * @example eth
             */
            id: string;
        };
        FungibleChartResponse: {
            links: components["schemas"]["FungibleChartResponseLinks"];
            data: components["schemas"]["FungibleChartContainer"];
        };
        FungibleChartResponseLinks: {
            /**
             * Format: url
             * @example https://api.zerion.io/v1/fungibles/fda0820a-9cff-40f5-997b-a76b9f9d60e7/charts/day
             */
            self?: string;
        };
        FungibleChartContainer: {
            /**
             * @description Fungible chart resource type
             * @example fungible_charts
             */
            type: string;
            /**
             * @description Fungible chart unique identifier
             * @example fda0820a-9cff-40f5-997b-a76b9f9d60e7-week
             */
            id: string;
            attributes?: components["schemas"]["FungibleChartAttributes"];
        };
        FungibleChartAttributes: {
            /**
             * @description Begin timestamp of the chart
             * @example 2023-01-18T11:00:00Z
             */
            begin_at: string;
            /**
             * @description End timestamp of the chart
             * @example 2023-01-25T10:30:00Z
             */
            end_at: string;
            stats?: {
                /**
                 * Format: double
                 * @description First chart value
                 * @example 1145.00999
                 */
                first: number;
                /**
                 * Format: double
                 * @description Minimum value on the chart
                 * @example 1133.034
                 */
                min: number;
                /**
                 * Format: double
                 * @description Average chart value
                 * @example 1689.1110093
                 */
                avg: number;
                /**
                 * Format: double
                 * @description Maximum value on the chart
                 * @example 2345.601
                 */
                max: number;
                /**
                 * Format: double
                 * @description Last chart value
                 * @example 1515.34
                 */
                last: number;
            };
            /** @description Sorted list of chart points */
            points?: (number)[][];
        };
        /** @description Blockchain block object */
        Block: {
            /**
             * Format: int32
             * @description Block number
             * @example 13250167
             */
            number?: number;
            /**
             * Format: int32
             * @description Block mining timestamp
             * @example 1647280629
             */
            mined_at?: number;
        };
        Chain: {
            /**
             * @description Chain resource type
             * @example chains
             */
            type: string;
            /**
             * @description Chain unique identifier
             * @example aurora
             */
            id: string;
            attributes?: components["schemas"]["ChainAttributes"];
            relationships?: components["schemas"]["ChainRelationships"];
        };
        /** @description Chain explorer data */
        ChainExplorer: {
            /**
             * @description Human readable explorer name
             * @example AuroraScan
             */
            name: string;
            /**
             * Format: url
             * @description URL with placeholders that leads to a token page
             * @example https://explorer.mainnet.aurora.dev/token/{ADDRESS}
             */
            token_url_format?: string;
            /**
             * Format: url
             * @description URL with placeholders that points to a transaction page
             * @example https://explorer.mainnet.aurora.dev/tx/{HASH}
             */
            tx_url_format?: string;
            /**
             * Format: url
             * @description URL leads to the explorer homepage
             * @example https://explorer.mainnet.aurora.dev
             */
            home_url?: string;
        };
        /** @description Various chain related boolean flags */
        ChainFlags: {
            /**
             * @description Whether trading is supported on Zerion for this chain or not
             * @example true
             */
            supports_trading: boolean;
            /**
             * @description Whether sending is supported on Zerion for this chain or not
             * @example true
             */
            supports_sending: boolean;
            /**
             * @description Whether bridges are supported on Zerion for this chain or not
             * @example true
             */
            supports_bridge: boolean;
        };
        /** @description Chain RPC servers data */
        ChainRPC: {
            /**
             * Format: url
             * @description URL with placeholders of RPC server which can be used for project purposes
             * @example https://mainnet.aurora.dev/{AURORA_API_KEY}
             */
            internal_server_url_format?: string;
            /** @description List of URL of public RPC servers which can be used by everyone */
            public_servers_url?: string[];
        };
        ChainShort: {
            /**
             * @description Chain resource type.
             * @example chains
             */
            type: string;
            /**
             * @description Chain unique identifier.
             * @example aurora
             */
            id: string;
        };
        /** @description Attributes of chain resource */
        ChainAttributes: {
            /**
             * @description Community used chain ID
             * @example 0x4e454152
             */
            external_id?: string;
            /**
             * @description Human readable chain name
             * @example Aurora
             */
            name: string;
            icon?: components["schemas"]["Icon"];
            explorer?: components["schemas"]["ChainExplorer"];
            rpc?: components["schemas"]["ChainRPC"];
            flags?: components["schemas"]["ChainFlags"];
        };
        ChainResponse: {
            links: components["schemas"]["ChainResponseLinks"];
            data: components["schemas"]["Chain"];
        };
        ChainResponseLinks: {
            /**
             * Format: url
             * @description URL of the current chain.
             * @example https://api.zerion.io/v1/chains/aurora
             */
            self: string;
        };
        ChainRelationships: {
            native_fungible: components["schemas"]["FungibleResponseShort"];
            wrapped_native_fungible?: components["schemas"]["FungibleResponseShort"];
        };
        ChainRelationship: {
            links: {
                /**
                 * Format: url
                 * @description URL to the current chain.
                 * @example https://api.zerion.io/v1/chains/aurora
                 */
                related: string;
            };
            data: components["schemas"]["ChainShort"];
        };
        ChainsResponse: {
            links: components["schemas"]["ChainsResponseLinks"];
            data: components["schemas"]["Chain"][];
        };
        ChainsResponseLinks: {
            /**
             * Format: url
             * @description URL of current resource
             * @example https://api.zerion.io/v1/chains/
             */
            self: string;
        };
        ContentLink: {
            /**
             * Format: url
             * @description URL to the content
             * @example https://token-icons.s3.amazonaws.com/0x1494ca1f11d487c2bbe4543e90080aeba4ba3c2b.png
             */
            url: string;
            /**
             * @description MIME content type
             * @example image/png
             */
            content_type?: string;
        };
        GasPricesContainer: {
            /**
             * @description Gas price resource type.
             * @example gas-prices
             */
            type?: string;
            /**
             * @description Gas price unique identifier.
             * @example gas-aurora-classic
             */
            id?: string;
            attributes?: components["schemas"]["GasPricesAttributes"];
            relationships?: components["schemas"]["GasPricesRelationships"];
        };
        GasPricesEIP1559: {
            /**
             * Format: uint256
             * @description The base fee is an algorithmically determined amount of gas that is required for a transaction to be included in a block. It is dynamically adjusted based on network demand and burned whenever a transaction is included in a block.
             * @example 47409362184
             */
            base_fee?: number;
            fast?: unknown & components["schemas"]["GasPricesEIP1559Option"];
            slow?: unknown & components["schemas"]["GasPricesEIP1559Option"];
            rapid?: unknown & components["schemas"]["GasPricesEIP1559Option"];
            standard?: unknown & components["schemas"]["GasPricesEIP1559Option"];
        };
        GasPricesEIP1559Option: {
            /**
             * Format: uint256
             * @description The suggested gas price (in wei) that you are willing to pay in order to ensure acceptance of your transaction.
             * @example 590637816
             */
            priority_fee?: number;
            /**
             * Format: uint256
             * @description The suggested upper limit for the gas price (in wei) that you are willing to pay in order to ensure acceptance of your transaction.
             * @example 95409362184
             */
            max_fee?: number;
            /**
             * Format: uint64
             * @description An estimation of the time, measured in seconds, required for a transaction to be confirmed on the blockchain.
             * @example 195
             */
            estimation_seconds?: number;
        };
        GasPricesClassic: {
            /**
             * Format: uint256
             * @description The gas price for a slow transaction.
             * @example 48000000000
             */
            slow?: number;
            /**
             * Format: uint256
             * @description The gas price for a standard transaction.
             * @example 48000000000
             */
            standard?: number;
            /**
             * Format: uint256
             * @description The gas price for a fast transaction.
             * @example 51000000000
             */
            fast?: number;
            /**
             * Format: uint256
             * @description The gas price for a rapid transaction.
             * @example null
             */
            rapid?: number | null;
        };
        GasPricesOptimistic: {
            /**
             * Format: uint64
             * @description The total cost of submitting a transaction to Ethereum. This cost is incurred in addition to the L2 execution fee and is typically the primary cost component of a transaction on Optimism.
             * @example 18330244428
             */
            l1?: number;
            /**
             * Format: uint64
             * @description The cost of computation and storage used in executing a transaction on Layer 2. This is equivalent to the gas used multiplied by the gas price attached to the transaction.
             * @example 1000000
             */
            l2?: number;
            /**
             * Format: uint64
             * @description A fixed overhead cost denominated in gas that is included in the L1 data fee calculation. This value is currently set to 2100 and does not vary based on the size or complexity of the transaction.
             * @example 2100
             */
            fixed_overhead?: number;
            /**
             * Format: uint64
             * @description A dynamic overhead cost that scales the L1 fee paid by a fixed number. This value is currently set to 1.0 and is included in the L1 data fee calculation. The L1 gas price used to charge the data fee is automatically updated when new data is received from Ethereum, which may result in users paying a higher or lower than estimated L1 data fee by up to 25%.
             * @example 1000000
             */
            dynamic_overhead?: number;
        };
        GasPricesAttributes: {
            /**
             * @description Date and time when the price was updated in ISO format.
             * @example 2023-02-28T19:24:39.000Z
             */
            updated_at?: string;
            gas_type?: components["schemas"]["GasPricesType"];
            info?: (unknown & components["schemas"]["GasPricesClassic"]) | (unknown & components["schemas"]["GasPricesEIP1559"]) | (unknown & components["schemas"]["GasPricesOptimistic"]);
        };
        /** @description Gas price related resources. */
        GasPricesRelationships: {
            chain?: components["schemas"]["ChainRelationship"];
        };
        GasPricesResponse: {
            data?: components["schemas"]["GasPricesContainer"][];
            links?: components["schemas"]["GasPricesLinks"];
        };
        /**
         * @description Format of the gas.
         * @example classic
         * @enum {string}
         */
        GasPricesType: "classic" | "eip1559" | "optimistic";
        GasPricesLinks: {
            /**
             * Format: url
             * @example https://api.zerion.io/v1/gas-prices
             */
            self: string;
        };
        ExternalLink: {
            /**
             * @description Type of the link
             * @example website
             */
            type?: string;
            /**
             * @description Displayable name of the link
             * @example Website
             */
            name?: string;
            /**
             * Format: url
             * @description Link to the external resource
             * @example https://www.indexcoop.com
             */
            url: string;
        };
        /** @description A list of relevant URLs. */
        ExternalLinks: components["schemas"]["ExternalLink"][];
        /** @description Icon related to object. */
        Icon: {
            /**
             * Format: url
             * @description URL of the icon.
             * @example https://token-icons.s3.amazonaws.com/0x0391d2021f89dc339f60fff84546ea23e337750f.png
             */
            url: string | null;
        };
        /** @description Represents a non-fungible token (NFT). */
        NFTContainer: {
            /**
             * @description NFTs resource type.
             * @example nfts
             */
            type: string;
            /** @description Unique identifier of the NFT. */
            id: string;
            attributes?: components["schemas"]["NFTContainerAttributes"];
            relationships?: components["schemas"]["NFTContainerRelationships"];
        };
        NFTContainerShort: {
            /**
             * @description NFTs resource type.
             * @example nfts
             */
            type: string;
            /** @description Unique identifier of the NFT. */
            id: string;
        };
        /** @description Represents attributes of a non-fungible token (NFT) corresponding to JSON API specification. */
        NFTContainerAttributes: {
            /**
             * @description The address of the contract that manages the NFT.
             * @example 0x74ee68a33f6c9f113e22b3b77418b75f85d07d22
             */
            contract_address: string;
            /**
             * @description The unique identifier for the NFT within its contract.
             * @example 10
             */
            token_id: string;
            interface?: components["schemas"]["NFTInterfaceEnum"];
            metadata?: components["schemas"]["NFTMetadata"];
            market_data?: components["schemas"]["NFTMarketData"];
            external_links?: components["schemas"]["ExternalLinks"];
            flags?: components["schemas"]["NFTFlags"];
        };
        /** @description Represents relationships of a non-fungible token (NFT) corresponding to JSON API specification. */
        NFTContainerRelationships: {
            chain: unknown & components["schemas"]["ChainRelationship"];
            nft_collection?: unknown & components["schemas"]["NFTCollectionRelationship"];
        };
        /** @description Represents an NFT collection attributes corresponding to JSON API specification. */
        NFTContainerIncluded: components["schemas"]["NFTCollectionContainer"][];
        NFTAttribute: {
            /**
             * @description Attribute key. The key is not unique and is it possible to have several attributes
             *     with the same key.
             *
             * @example Rarity
             */
            key: string;
            /**
             * @description Attribute value
             * @example common
             */
            value?: string;
        };
        NFTMarketData: {
            prices?: components["schemas"]["NFTMarketDataPrices"];
            /** @description Information about last sale of the NFT. */
            last_sale?: {
                /**
                 * Format: float
                 * @description The last known sale price of the NFT in the currency specified in the request parameters.
                 * @example 31
                 */
                price?: number;
                quantity?: unknown & components["schemas"]["Quantity"];
            };
        };
        /** @description The prices associated with the NFT expressed in the currency specified in the request parameters. */
        NFTMarketDataPrices: {
            /**
             * Format: float
             * @description The lowest known price for the NFT.
             */
            floor?: number;
        };
        NFTResponse: {
            links: {
                /**
                 * @description Link to the current response
                 * @example https://api.zerion.io/v1/nfts/polygon:0x3a422450db73c450310e6e24191d4221a5be81b1:2/?currency=usd&include=nft_collections
                 */
                self: string;
            };
            data: components["schemas"]["NFTContainer"];
            included?: components["schemas"]["NFTsResponseIncluded"];
        };
        NFTsResponse: {
            links: components["schemas"]["NFTsResponseLinks"];
            data: components["schemas"]["NFTsResponseData"];
            included?: components["schemas"]["NFTsResponseIncluded"];
        };
        NFTsResponseLinks: {
            /**
             * @description Link to the current response
             * @example https://api.zerion.io/v1/nfts/?currency=usd&filter%5Breferences%5D=ethereum%3A0x909899c5dbb5002610dd8543b6f638be56e3b17e%3A57896044618658097711785492504343953928676686534345912800509039648547174119787%2Cpolygon%3A0x3a422450db73c450310e6e24191d4221a5be81b1%3A30&include=nft_collections
             */
            self: string;
        };
        NFTsResponseData: components["schemas"]["NFTContainer"][];
        NFTsResponseIncluded: components["schemas"]["NFTCollectionContainerNoMarketData"][];
        NFTResponseIncluded: components["schemas"]["NFTsResponseIncluded"];
        NFTContent: {
            preview?: unknown & components["schemas"]["ContentLink"];
            detail?: unknown & components["schemas"]["ContentLink"];
            audio?: unknown & components["schemas"]["ContentLink"];
            video?: unknown & components["schemas"]["ContentLink"];
        };
        /** @description Metadata associated with the NFT. */
        NFTMetadata: {
            /** @description The name of the NFT */
            name?: string;
            /** @description The description of the NFT */
            description?: string;
            /** @description The list of tags associated with the NFT */
            tags?: string[];
            content?: components["schemas"]["NFTContent"];
            /** @description The list of attributes associated with the NFT */
            attributes?: components["schemas"]["NFTAttribute"][];
        };
        /**
         * @description The standard that the NFT contract follows, e.g. ERC-721.
         * @example erc1155
         * @enum {string}
         */
        NFTInterfaceEnum: "erc721" | "erc1155";
        NFTInfo: {
            /**
             * @description Address of the contract of the NFT.
             * @example 0x74ee68a33f6c9f113e22b3b77418b75f85d07d22
             */
            contract_address: string;
            /**
             * @description Unique identifier of the NFT inside the contract.
             * @example 10
             */
            token_id: string | null;
            /**
             * @description Name of the NFT.
             * @example #10 De·genesis
             */
            name?: string;
            interface?: components["schemas"]["NFTInterfaceEnum"];
            content?: components["schemas"]["NFTContent"];
            flags?: components["schemas"]["NFTFlags"];
        };
        NFTFlags: {
            /** @description Indicates whether the NFT spam or not. */
            is_spam?: boolean;
        };
        NFTCollectionsResponse: {
            links?: {
                /**
                 * @description Link to the next page
                 * @example https://api.zerion.io/v1/nft_collections/?page[after]=0x74ee68a33f6c9f113e22b3b77418b75f85d07d22
                 */
                next?: string;
            };
            data?: components["schemas"]["NFTCollectionContainer"][];
        };
        NFTCollectionResponse: {
            data?: components["schemas"]["NFTCollectionContainer"];
        };
        NFTCollectionContainer: {
            /**
             * @description NFT collections resource type.
             * @example nft_collections
             */
            type?: string;
            /**
             * @description Unique NFT collection ID.
             * @example 14
             */
            id?: number;
            attributes?: components["schemas"]["NFTCollectionContainerAttributes"];
        };
        NFTCollectionContainerNoMarketData: {
            /**
             * @description NFT collections resource type.
             * @example nft_collections
             */
            type?: string;
            /**
             * @description Unique NFT collection ID.
             * @example 14
             */
            id?: number;
            attributes?: components["schemas"]["NFTCollectionContainerAttributesNoMarketData"];
        };
        NFTCollectionContainerShort: {
            /**
             * @description NFT collections resource type.
             * @example nft_collections
             */
            type?: string;
            /**
             * @description Unique NFT collection ID.
             * @example 14
             */
            id?: number;
        };
        /** @description Represents an NFT collection attributes corresponding to JSON API specification. */
        NFTCollectionContainerAttributes: {
            metadata?: components["schemas"]["NFTCollectionMetadata"];
            market_data?: components["schemas"]["NFTCollectionMarketData"];
        };
        /** @description Represents an NFT collection attributes corresponding to JSON API specification. */
        NFTCollectionContainerAttributesNoMarketData: {
            metadata?: components["schemas"]["NFTCollectionMetadata"];
        };
        /** @description Contains marketplace data for a collection of NFTs. */
        NFTCollectionMarketData: {
            prices?: components["schemas"]["NFTCollectionMarketDataPrices"];
        };
        /** @description Prices associated with the NFT collection expressed in the currency specified in the request parameters. */
        NFTCollectionMarketDataPrices: {
            /**
             * Format: float
             * @description The lowest known price for an NFT in the collection.
             */
            floor?: number;
        };
        NFTCollectionStats: {
            /**
             * Format: uint32
             * @description The total number of NFTs in the collection.
             */
            nfts_count?: number;
            /**
             * Format: uint32
             * @description The number of unique addresses that own NFTs in the collection.
             */
            num_owners?: number;
            /**
             * Format: float
             * @description The total value of NFTs in the collection that have been sold in the past 24 hours.
             */
            one_day_volume?: number;
            /**
             * Format: float
             * @description The percentage change in the total value of NFTs in the collection that have been sold in the past 24 hours, compared to the previous 24 hours.
             */
            one_day_change_percent?: number;
            /**
             * Format: float
             * @description The total value of all NFTs in the collection that have been sold.
             */
            total_volume?: number;
        };
        NFTCollectionRelationship: {
            data: components["schemas"]["NFTCollectionContainerShort"];
        };
        /** @description Metadata associated with the NFT. */
        NFTCollectionMetadata: {
            /** @description The name of the collection. */
            name?: string;
            /** @description The description of the collection. */
            description?: string;
            content?: components["schemas"]["NFTCollectionContent"];
            /** @description The symbol for the payment token used by the collection. */
            payment_token_symbol?: string;
        };
        /** @description Represents an NFT collection short info. */
        NFTCollectionInfo: {
            /** @description The name of the collection. */
            name?: string;
            /** @description The description of the collection. */
            description?: string;
            content?: components["schemas"]["NFTCollectionContent"];
        };
        NFTCollectionContent: {
            icon?: unknown & components["schemas"]["Icon"];
            banner?: unknown & components["schemas"]["ContentLink"];
        };
        Protocol: {
            /**
             * @description Human readable name of the protocol
             * @example Barnbridge - Tokenized Risk Protocol
             */
            name: string;
            /**
             * @description Description of the protocol
             * @example null
             */
            description: string | null;
            icon: {
                /**
                 * Format: url
                 * @example https://protocol-icons.s3.amazonaws.com/BarnBridge.png
                 */
                url: string;
            };
        };
        Quantity: {
            /**
             * @description The integral representation of the quantity (123.45678 -> 12345678).
             * @example 12345678
             */
            int: string;
            /**
             * @description Decimal number precision of the quantity - digits after the floating point.
             * @example 5
             */
            decimals: number;
            /**
             * Format: float
             * @description Float representation of the quantity.
             * @example 123.45678
             */
            float: number;
            /**
             * @description String representation of the quantity.
             * @example 123.45678
             */
            numeric: string;
        };
        ResponseLinks: {
            /**
             * Format: url
             * @description URL for the entity
             * @example https://api.zerion.io/v1/entities/id
             */
            self?: string;
        };
        /**
         * @description Position's type
         * @example deposit
         * @enum {string|null}
         */
        PositionType: "deposit" | "loan" | "locked" | "staked" | "reward" | "wallet" | "airdrop" | "margin" | null;
        PositionsDistributionByType: {
            /**
             * Format: float
             * @description Total value of asset on the wallet in selected currency
             * @example 1864.774102420957
             */
            wallet: number;
            /**
             * Format: float
             * @description Total value of deposited assets in selected currency
             * @example 78.04192492782934
             */
            deposited: number;
            /**
             * Format: float
             * @description Total value of borrowed assets in selected currency
             * @example 0.9751475798305564
             */
            borrowed: number;
            /**
             * Format: float
             * @description Total value of locked assets in selected currency
             * @example 5.780032725068765
             */
            locked: number;
            /**
             * Format: float
             * @description Total value of staked assets in selected currency
             * @example 66.13183205505294
             */
            staked: number;
        };
        /** @example {
         *       "arbitrum": 458.3555051522226,
         *       "aurora": 72.01031337463428,
         *       "avalanche": 17.128850607339444,
         *       "base": 55.01550749900544,
         *       "binance-smart-chain": 5.561075880033699,
         *       "celo": 31.293849330045006,
         *       "ethereum": 1214.009900354964,
         *       "fantom": 84.58514074264951,
         *       "linea": 8.258227109505139,
         *       "optimism": 573.032664994399,
         *       "polygon": 64.31407562634853,
         *       "xdai": 113.1679493137936,
         *       "zksync-era": 9.451002156306377
         *     } */
        PositionsDistributionByChain: {
            [key: string]: number;
        };
        NFTPositionsDistributionByChain: {
            /**
             * Format: float
             * @description Total value of NFTs on arbitrum chain in selected currency
             * @example 140.14877478334236
             */
            arbitrum?: number;
            /**
             * Format: float
             * @description Total value of NFTs on aurora chain in selected currency
             * @example 75.59585404617037
             */
            aurora?: number;
            /**
             * Format: float
             * @description Total value of NFTs on avalanche chain in selected currency
             * @example 54.39483513803602
             */
            avalanche?: number;
            /**
             * Format: float
             * @description Total value of NFTs on bsc chain in selected currency
             * @example 1439.98965199211
             */
            "binance-smart-chain"?: number;
            /**
             * Format: float
             * @description Total value of NFTs on ethereum chain in selected currency
             * @example 1439.98965199211
             */
            ethereum?: number;
            /**
             * Format: float
             * @description Total value of NFTs on fantom chain in selected currency
             * @example 104.5039957833603
             */
            fantom?: number;
            /**
             * Format: float
             * @description Total value of NFTs on loopring chain in selected currency
             * @example 0
             */
            loopring?: number;
            /**
             * Format: float
             * @description Total value of NFTs on optimism chain in selected currency
             * @example 55.111921042409875
             */
            optimism?: number;
            /**
             * Format: float
             * @description Total value of NFTs on polygon chain in selected currency
             * @example 37.55943746454931
             */
            polygon?: number;
            /**
             * Format: float
             * @description Total value of NFTs on solana chain in selected currency
             * @example 0
             */
            solana?: number;
            /**
             * Format: float
             * @description Total value of NFTs on xdai chain in selected currency
             * @example 74.08441891963194
             */
            xdai?: number;
        } & {
            [key: string]: number;
        };
        /** @description Change in transaction */
        TransactionChange: {
            /**
             * Format: int64
             * @description Change amount
             * @example 50000000000000000
             */
            amount?: number;
            /**
             * Format: float
             * @description Change value
             * @example 155.47449999999998
             */
            value?: number;
            /**
             * Format: float
             * @description Historical price of change asset
             * @example 3109.49
             */
            price?: number | null;
            /**
             * @description Transaction direction
             * @example in
             * @enum {string}
             */
            direction?: "in" | "out" | "self";
            /**
             * @description Change sender
             * @example 0x23d3e894b5cdb6a80afffd351d348868fb08dddf
             */
            address_from?: string;
            /**
             * @description Change recipient
             * @example 0xaab5533016b7e4b1eddda6c9927163fec31ef36a
             */
            address_to?: string;
        };
        /** @description The fee that was paid for the transaction. */
        TransactionFee: {
            fungible_info?: components["schemas"]["Approval"]["fungible_info"];
            quantity?: components["schemas"]["Quantity"];
            /**
             * Format: float
             * @description Price of the asset when the transaction was mined.
             * @example 2542.23
             */
            price: number;
            /**
             * Format: float
             * @description The fee value in requested currency.
             * @example 39.965672931101786
             */
            value: number;
        };
        /**
         * @description Type of concrete transaction.
         * @example trade
         * @enum {string}
         */
        TransactionType: "send" | "receive" | "trade" | "deposit" | "withdraw" | "approve" | "execute" | "deploy" | "mint" | "burn" | "revoke";
        Transaction: {
            /**
             * @description Unique identifier of the chain when transaction was mined
             * @example aurora
             */
            chain_id: string;
            /**
             * @description Transaction unique hash
             * @example 0x109d8622084d562263230ba5de412b5cd7c372019131e2c9d0a8aa4925eb6034
             */
            hash?: string;
            /**
             * Format: int32
             * @description Number of block where transaction was mined
             * @example 15345739
             */
            mined_at_block?: number;
            /**
             * @description Timestamp string in ISO 8601 format when the transaction was mined.
             * @example 2022-08-15T11:26:31+00:00
             */
            mined_at?: string;
            /**
             * @description Address of transaction's sender. Could be smart contract address too.
             * @example 0x42b9df65b219b3dd36ff330a4dd8f327a6ada990
             */
            sender?: string;
            /**
             * @description Address of transaction's recipient. Could be smart contract address too.
             * @example 0xae7ab96520de3a18e5e111b5eaab095312d7fe84
             */
            recipient?: string;
            /**
             * @description Status of transaction
             * @example confirmed
             * @enum {string}
             */
            status?: "confirmed" | "pending" | "rejected";
            /**
             * Format: int32
             * @description Transaction's nonce
             * @example 3757
             */
            nonce?: number;
            fee?: components["schemas"]["TransactionFee"];
        };
        Transfer: {
            fungible_info?: components["schemas"]["Approval"]["fungible_info"];
            nft_info?: components["schemas"]["NFTInfo"];
            /**
             * @description Direction of the transfer.
             * @example in
             * @enum {string}
             */
            direction: "in" | "out" | "self";
            quantity: components["schemas"]["Quantity"];
            /**
             * Format: float
             * @description Value of the transfer in requested currency.
             * @example 0
             */
            value: number;
            /**
             * Format: float
             * @description Historical price of the asset.
             * @example 0
             */
            price: number;
            /**
             * @description Address of the sender of the transfer.
             * @example 0x60a26d69263ef43e9a68964ba141263f19d71d51
             */
            sender: string;
            /**
             * @description Address of the recipient of the transfer.
             * @example 0x60a26d69263ef43e9a68964ba141263f19d71d51
             */
            recipient: string;
        };
        WalletPositionFlags: {
            /**
             * @description Whether this position should be displayable and calculated in the wallet or not
             * @example true
             */
            displayable: boolean;
            /** @description Is the position classified by Zerion as trash. */
            is_trash?: boolean;
        };
        SwapFungiblesResponse: {
            links: components["schemas"]["SwapFungiblesResponseLinks"];
            data: components["schemas"]["FungibleContainer"][];
        };
        SwapFungiblesResponseLinks: {
            /**
             * Format: url
             * @description URL of current resource
             * @example https://api.zerion.io/v1/swap/fungibles
             */
            self: string;
        };
        /**
         * @description Available exchange sources.
         * @example trade
         * @enum {string}
         */
        SwapLiquiditySourcesEnum: "all" | "weth" | "1inch-v4" | "0x" | "defi-sdk" | "uniswap-v2" | "uniswap-v3" | "sushiswap" | "trisolaris" | "wintermute" | "paraswap" | "hashflow" | "movr";
    };
    responses: {
        /** @description Response for requested list of transactions */
        TransactionsListResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["WalletTransactionsResponse"];
            };
        };
        /** @description Response for requested trade. */
        SwapOffersResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["SwapOffersResponse"];
            };
        };
        /** @description Response for requested list available for bridge fungibles. */
        SwapFungiblesResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["SwapFungiblesResponse"];
            };
        };
        /** @description A requested protocol. */
        SingleProtocolResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    links?: {
                        /**
                         * Format: url
                         * @example https://api.zerion.io/v1/protocols/Barnbridge
                         */
                        self?: string;
                    };
                    data?: {
                        /**
                         * @description Type of entity
                         * @example protocols
                         */
                        type: string;
                        /**
                         * @description Unique identifier of the entity
                         * @example Barnbridge
                         */
                        id: string;
                        attributes: components["schemas"]["Protocol"];
                    };
                };
            };
        };
        /** @description Resource for requested fungible */
        SingleFungibleResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["FungibleResponse"];
            };
        };
        /** @description Resource for the requested fungible chart */
        SingleFungibleChartResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["FungibleChartResponse"];
            };
        };
        /** @description Response for requested list of NFTs */
        NFTsResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["NFTsResponse"];
            };
        };
        /** @description Requested NFT */
        NFTResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["NFTResponse"];
            };
        };
        /** @description Requested list of NFT Collections */
        NFTCollectionsResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["NFTCollectionsResponse"];
            };
        };
        /** @description Requested NFT collection */
        NFTCollectionResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["NFTCollectionResponse"];
            };
        };
        /** @description Resource was not found */
        NotFoundResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    errors?: {
                        /**
                         * @description Error short title
                         * @example Resource was not found
                         */
                        title?: string;
                        /**
                         * @description Long description of the error
                         * @example Requested resource was not found, try later
                         */
                        detail?: string;
                    }[];
                };
            };
        };
        /** @description Parameters are malformed */
        MalformedParameters: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    errors?: {
                        /**
                         * @description Error short title
                         * @example Parameter is malformed
                         */
                        title?: string;
                        /**
                         * @description Long description of the error
                         * @example Some validation errors will be described here
                         */
                        detail?: string;
                    }[];
                };
            };
        };
        /** @description List of gas prices */
        GasPricesResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["GasPricesResponse"];
            };
        };
        /** @description Request accepted, but NFT positions are still being aggregated. */
        WalletNFTPositionsProcessingResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["WalletNFTPositionsProcessingResponse"];
            };
        };
        /** @description Response for requested wallet's portfolio */
        PortfolioResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["WalletPortfolioResponse"];
            };
        };
        /** @description Response for requested wallet's portfolio */
        NFTPortfolioResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["WalletNFTPortfolioResponse"];
            };
        };
        /** @description Request accepted, but nft portfolio is still being aggregated */
        NFTPortfolioProcessingResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["WalletNFTPortfolioProcessingResponse"];
            };
        };
        /** @description Unathenticated request */
        UnauthenticatedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    errors?: {
                        /**
                         * @description Error short title
                         * @example Unauthorized Error
                         */
                        title?: string;
                        /**
                         * @description Long description of the error
                         * @example The API key is invalid, please, make sure that you are using a valid key
                         */
                        detail?: string;
                    }[];
                };
            };
        };
        /** @description Too many requests error */
        "TooManyRequests.yaml": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    errors?: {
                        /**
                         * @description Error short title
                         * @example Too many requests
                         */
                        title?: string;
                        /**
                         * @description Long description of the error
                         * @example Your request had been throttled
                         */
                        detail?: string;
                    }[];
                };
            };
        };
    };
    parameters: {
        /** @description Denominated currency value of returned prices */
        Currency: "eth" | "btc" | "usd" | "eur" | "krw" | "rub" | "gbp" | "aud" | "cad" | "inr" | "jpy" | "nzd" | "try" | "zar" | "cny" | "chf";
        /** @description Pagination parameters */
        Page: {
            /** @description This field is used for result pagination. You SHOULD NOT use this parameter directly.
             *     To get the next page of the results you should use `links.next` field.
             *     Omit it to return the first page.
             *      */
            after?: string | null;
            /**
             * Format: uint8
             * @description Set maximum number of items per a page in the pagination.
             * @default 100
             */
            size?: number;
        };
        /**
         * @description The web3 wallet address
         * @example 0x42b9df65b219b3dd36ff330a4dd8f327a6ada990
         */
        WalletAddress: string;
        /** @description The order of NFTs in the result. */
        WalletNFTCollectionsSort: "-max_changed_at" | "min_changed_at" | "total_floor_price" | "-total_floor_price";
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getWalletChart: {
        parameters: {
            query?: {
                /** @description Denominated currency value of returned prices */
                currency?: components["parameters"]["Currency"];
                /** @description Account only for balance on these chains. Available chain ids can be found in chains endpoints. */
                "filter[chain_ids]"?: string[];
                /** @description Account only for balance of given fungible assets. */
                "filter[fungible_ids]"?: string[];
            };
            header?: never;
            path: {
                /** @description Chart period */
                chart_period: "hour" | "day" | "week" | "month" | "year" | "max";
                /**
                 * @description The web3 wallet address
                 * @example 0x42b9df65b219b3dd36ff330a4dd8f327a6ada990
                 */
                address: components["parameters"]["WalletAddress"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resource for the requested wallet chart */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        links: {
                            /**
                             * Format: url
                             * @example https://api.zerion.io/v1/wallets/0x42b9df65b219b3dd36ff330a4dd8f327a6ada990/charts/day
                             */
                            self?: string;
                        };
                        data: {
                            /**
                             * @description Wallet chart resource type
                             * @example wallet_charts
                             */
                            type: string;
                            /**
                             * @description Wallet chart unique identifier
                             * @example 0x42b9df65b219b3dd36ff330a4dd8f327a6ada990-day
                             */
                            id: string;
                            attributes?: {
                                /**
                                 * @description Begin timestamp of the chart
                                 * @example 2023-01-18T11:00:00Z
                                 */
                                begin_at: string;
                                /**
                                 * @description End timestamp of the chart
                                 * @example 2023-01-25T10:30:00Z
                                 */
                                end_at: string;
                                /** @description Sorted list of chart points */
                                points?: (number)[][];
                            };
                        };
                    };
                };
            };
            400: components["responses"]["MalformedParameters"];
            401: components["responses"]["UnauthenticatedError"];
            429: components["responses"]["TooManyRequests.yaml"];
        };
    };
    getWalletPNL: {
        parameters: {
            query?: {
                /** @description Denominated currency value of returned prices */
                currency?: components["parameters"]["Currency"];
                /** @description Calculate PnL only for specified chains. */
                "filter[chain_ids]"?: string[];
                /** @description Account only for PnL related to given fungible assets. */
                "filter[fungible_ids]"?: string[];
            };
            header?: never;
            path: {
                /**
                 * @description The web3 wallet address
                 * @example 0x42b9df65b219b3dd36ff330a4dd8f327a6ada990
                 */
                address: components["parameters"]["WalletAddress"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for requested wallet's pnl */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        links: {
                            /**
                             * Format: url
                             * @example https://api.zerion.io/v1/wallets/0x42b9df65b219b3dd36ff330a4dd8f327a6ada990/pnl/
                             */
                            self: string;
                        };
                        data: {
                            /** @example pnl */
                            type: string;
                            /**
                             * @description PNL unique ID
                             * @example 0x42b9df65b219b3dd36ff330a4dd8f327a6ada990
                             */
                            id: string;
                            attributes: {
                                /**
                                 * Format: float
                                 * @description Realized Gain.
                                 *
                                 *     The gain (or loss) realized from the sale of fungible assets, calculated using the FIFO (First In, First Out) method (the
                                 *     earliest purchases are matched with the earliest sales).
                                 *     The cost basis of the oldest assets is subtracted from the sale proceeds.
                                 *
                                 * @example -655.3618983
                                 */
                                realized_gain?: number;
                                /**
                                 * Format: float
                                 * @description Unrealized Gain.
                                 *
                                 *     The potential gain (or loss) on unsold fungible assets, calculated as the difference between their current market value and cost basis using the FIFO method (the
                                 *     earliest purchases are matched with the earliest sales).
                                 *
                                 * @example 17.5445466
                                 */
                                unrealized_gain?: number;
                                /**
                                 * Format: float
                                 * @description Total Fees Paid.
                                 *
                                 *     The sum of all transaction fees associated with asset trades.
                                 *
                                 * @example 281.9088917
                                 */
                                total_fee?: number;
                                /**
                                 * Format: float
                                 * @description Net Invested Amount.
                                 *
                                 *     The total amount invested in fungible assets that have not been sold, calculated using the FIFO method (the earliest purchases are
                                 *     matched with the earliest sales).
                                 *
                                 * @example 45.84218703
                                 */
                                net_invested?: number;
                                /**
                                 * Format: float
                                 * @description Received Amount from Other Wallets.
                                 *
                                 *     The cumulative value of all fungible assets received from other wallets.
                                 *
                                 *     Note: This value does not include amounts traded internally within the wallet but does include `received_for_nfts`.
                                 *
                                 * @example 133971.2931
                                 */
                                received_external?: number;
                                /**
                                 * Format: float
                                 * @description Sent Amount to Other Wallets.
                                 *
                                 *     The cumulative value of all fungible assets sent to other wallets.
                                 *
                                 *     Note: This value does not include amounts traded internally within the wallet but does include `sent_for_nfts`.
                                 *
                                 * @example 133270.089
                                 */
                                sent_external?: number;
                                /**
                                 * Format: float
                                 * @description Sent Amount for NFTs.
                                 *
                                 *     The cumulative value of all fungible assets sent in transactions where the wallet receives NFTs.
                                 *
                                 * @example 133971.2931
                                 */
                                sent_for_nfts?: number;
                                /**
                                 * Format: float
                                 * @description Received Amount for NFTs.
                                 *
                                 *     The cumulative value of all fungible assets received in transactions where the wallet sends NFTs.
                                 *
                                 * @example 133971.2931
                                 */
                                received_for_nfts?: number;
                            };
                        };
                    };
                };
            };
            400: components["responses"]["MalformedParameters"];
            401: components["responses"]["UnauthenticatedError"];
            429: components["responses"]["TooManyRequests.yaml"];
        };
    };
    getWalletPortfolio: {
        parameters: {
            query?: {
                /** @description This parameter allows to customize the aggregation of DeFi positions within a portfolio based on their types. The aggregation can include:
                 *
                 *       - `only_simple`: Only includes wallet-type positions, which are basic, non-protocol related assets. This is the default selection if the parameter is not specified.
                 *       - `only_complex`: Aggregates positions associated with DeFi protocols only (e.g., staked assets, liquidity pools), like Uniswap or Aave, excluding simple wallet positions.
                 *       - `no_filter`: Provides an aggregated view of both protocol-related and simple wallet positions without any filtering.
                 *
                 *     The selection of filters affects the composition of the aggregated portfolio results, allowing for tailored analysis and reporting based on the types of positions of interest.
                 *
                 *     > ⚠️ Note: Enterprise usage of this API may be subject to different pricing models depending on the selected filter type. For detailed pricing information, please contact `api@zerion.io`.
                 *      */
                "filter[positions]"?: "only_simple" | "only_complex" | "no_filter";
                /** @description Denominated currency value of returned prices */
                currency?: components["parameters"]["Currency"];
            };
            header?: never;
            path: {
                /**
                 * @description The web3 wallet address
                 * @example 0x42b9df65b219b3dd36ff330a4dd8f327a6ada990
                 */
                address: components["parameters"]["WalletAddress"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["PortfolioResponse"];
            400: components["responses"]["MalformedParameters"];
            401: components["responses"]["UnauthenticatedError"];
            429: components["responses"]["TooManyRequests.yaml"];
        };
    };
    listWalletPositions: {
        parameters: {
            query?: {
                /** @description This parameter allows users to filter DeFi positions based on their types. There are three options:
                 *
                 *     - `only_simple`: Retrieves exclusively wallet-type positions. These are basic, non-protocol related positions. This option is applied if parameter is not specified.
                 *     - `only_complex`: Fetches only positions associated with all DeFi protocols (including staked assets, liquidity pools, etc), like Uniswap or Aave. This option excludes simple wallet positions.
                 *     - `no_filter`: Applies no filtering, thus returning both protocol-related and simple wallet positions.
                 *
                 *     > ⚠️ Note: Different pricing models are applied for enterprise usage of this API, depending on the filter type selected. For detailed pricing information, please reach out to us at `api@zerion.io`.
                 *      */
                "filter[positions]"?: "only_simple" | "only_complex" | "no_filter";
                /** @description Denominated currency value of returned prices */
                currency?: components["parameters"]["Currency"];
                /** @description Keep only positions with these types. */
                "filter[position_types]"?: components["schemas"]["PositionType"][];
                /** @description Keep only positions from these chains. Available chain ids can be found in chains endpoints. */
                "filter[chain_ids]"?: string[];
                /** @description Keep only positions related to given fungible assets. */
                "filter[fungible_ids]"?: string[];
                /** @description Keep only positions related to these decentralized applications (dapps). */
                "filter[dapp_ids]"?: string[];
                /** @description Filter positions based on the `is_trash` flag. If no flag is specified, then `only_non_trash` is applied. */
                "filter[trash]"?: "only_trash" | "only_non_trash" | "no_filter";
                /** @description Choose how the result should be ordering */
                sort?: "-value" | "value";
            };
            header?: {
                /** @description Custom header that allows you to get data for testnets. */
                "X-Env"?: "testnet";
            };
            path: {
                /**
                 * @description The web3 wallet address
                 * @example 0x42b9df65b219b3dd36ff330a4dd8f327a6ada990
                 */
                address: components["parameters"]["WalletAddress"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for requested list of positions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WalletPositionsResponse"];
                };
            };
            400: components["responses"]["MalformedParameters"];
            401: components["responses"]["UnauthenticatedError"];
            429: components["responses"]["TooManyRequests.yaml"];
        };
    };
    listWalletTransactions: {
        parameters: {
            query?: {
                /** @description Denominated currency value of returned prices */
                currency?: components["parameters"]["Currency"];
                /** @description Pagination parameters */
                page?: components["parameters"]["Page"];
                /** @description Query for a full-text search. */
                "filter[search_query]"?: string;
                /** @description Return only transactions with specified types. */
                "filter[operation_types]"?: components["schemas"]["TransactionType"][];
                /** @description Return only transactions that contain specified asset types. */
                "filter[asset_types]"?: ("fungible" | "nft")[];
                /** @description Return only transactions from specified chains. You can find available chain ids in chain endpoints. */
                "filter[chain_ids]"?: string[];
                /** @description Return only transactions with fungibles with specified ids. */
                "filter[fungible_ids]"?: string[];
                /** @description Return only transactions since specific date. Timestamp in milliseconds. */
                "filter[min_mined_at]"?: string;
                /** @description Return only transactions until specific date. Timestamp in milliseconds. */
                "filter[max_mined_at]"?: string;
                /** @description Filter transactions based on the `is_trash` flag. If no flag is specified, then `no_filter` is applied. */
                "filter[trash]"?: "only_trash" | "only_non_trash" | "no_filter";
                /** @description Specify implementations of fungible tokens as a comma-separated list of `chain:address` pairs.
                 *
                 *     Example format: `ethereum:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48,polygon:0x123456789abcdef123456789abcdef123456789`
                 *
                 *     Each item consists of a blockchain `chain_id` and an `address`, separated by a colon (`:`). Multiple pairs can be provided using commas (`,`).
                 *      */
                "filter[fungible_implementations]"?: string[];
            };
            header?: {
                /** @description Custom header that allows you to get data for testnets. */
                "X-Env"?: "testnet";
            };
            path: {
                /** @description Address of the wallet. */
                address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["TransactionsListResponse"];
            400: components["responses"]["MalformedParameters"];
            401: components["responses"]["UnauthenticatedError"];
            429: components["responses"]["TooManyRequests.yaml"];
        };
    };
    listWalletNFTPositions: {
        parameters: {
            query?: {
                /** @description Keep only positions from the specified chains. Available chains IDs can be found in chains endpoint. */
                "filter[chain_ids]"?: string[];
                /** @description Keep only positions from collections with specified IDs. The IDs are returned inside the 'collection' field of each NFT. */
                "filter[collections_ids]"?: number[];
                /** @description The order of NFTs in the result. */
                sort?: "created_at" | "-created_at" | "floor_price" | "-floor_price";
                /** @description Array of related resources to be included to the response. This parameter corresponds to the JSON API schema. */
                include?: ("nfts" | "nft_collections" | "wallet_nft_collections")[];
                /** @description Denominated currency value of returned prices */
                currency?: components["parameters"]["Currency"];
                /** @description Pagination parameters */
                page?: components["parameters"]["Page"];
            };
            header?: {
                /** @description Custom header that allows you to get data for testnets. */
                "X-Env"?: "testnet";
            };
            path: {
                /**
                 * @description The web3 wallet address
                 * @example 0x42b9df65b219b3dd36ff330a4dd8f327a6ada990
                 */
                address: components["parameters"]["WalletAddress"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for requested list of NFT positions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WalletNFTPositionsResponse"];
                };
            };
            202: components["responses"]["WalletNFTPositionsProcessingResponse"];
            400: components["responses"]["MalformedParameters"];
            401: components["responses"]["UnauthenticatedError"];
            429: components["responses"]["TooManyRequests.yaml"];
        };
    };
    listWalletNFTCollections: {
        parameters: {
            query?: {
                /** @description Keep only collections from the specified chains. Available chain IDs can be found in the chains endpoint. */
                "filter[chain_ids]"?: string[];
                /** @description The order of NFTs in the result. */
                sort?: components["parameters"]["WalletNFTCollectionsSort"];
                /** @description Denominated currency value of returned prices */
                currency?: components["parameters"]["Currency"];
                /** @description Array of related resources to be included to the response. This parameter corresponds to the JSON API schema. */
                include?: "nft_collections"[];
            };
            header?: {
                /** @description Custom header that allows you to get data for testnets. */
                "X-Env"?: "testnet";
            };
            path: {
                /**
                 * @description The web3 wallet address
                 * @example 0x42b9df65b219b3dd36ff330a4dd8f327a6ada990
                 */
                address: components["parameters"]["WalletAddress"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for requested list of NFT collections. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WalletNFTCollectionsResponse"];
                };
            };
            /** @description Request accepted, but NFT collections held by the wallet are still being aggregated. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WalletNFTPositionsProcessingResponse"];
                };
            };
            400: components["responses"]["MalformedParameters"];
            401: components["responses"]["UnauthenticatedError"];
            429: components["responses"]["TooManyRequests.yaml"];
        };
    };
    getWalletNftPortfolio: {
        parameters: {
            query?: {
                /** @description Denominated currency value of returned prices */
                currency?: components["parameters"]["Currency"];
            };
            header?: {
                /** @description Custom header that allows you to get data for testnets. */
                "X-Env"?: "testnet";
            };
            path: {
                /**
                 * @description The web3 wallet address
                 * @example 0x42b9df65b219b3dd36ff330a4dd8f327a6ada990
                 */
                address: components["parameters"]["WalletAddress"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["NFTPortfolioResponse"];
            202: components["responses"]["NFTPortfolioProcessingResponse"];
            400: components["responses"]["MalformedParameters"];
            401: components["responses"]["UnauthenticatedError"];
            429: components["responses"]["TooManyRequests.yaml"];
        };
    };
    listFungibles: {
        parameters: {
            query?: {
                /** @description Denominated currency value of returned prices */
                currency?: components["parameters"]["Currency"];
                /** @description Pagination parameters */
                page?: components["parameters"]["Page"];
                /** @description Query for a full-text search. */
                "filter[search_query]"?: string;
                /** @description Keep only fungibles from this chain. Available chain ids can be found in chains endpoints. */
                "filter[implementation_chain_id]"?: string;
                /** @description Keep only fungibles deployed at given address. Is it possible that different fungibles are deployed at the same address on different chains. */
                "filter[implementation_address]"?: string;
                /** @description Keep only fungibles with the given ids */
                "filter[fungible_ids]"?: string[];
                /** @description Choose how the result should be ordering */
                sort?: "-market_data.market_cap" | "market_data.market_cap" | "-market_data.price.last" | "market_data.price.last" | "-market_data.price.percent_change_1d" | "market_data.price.percent_change_1d" | "-market_data.price.percent_change_30d" | "market_data.price.percent_change_30d" | "-market_data.price.percent_change_90d" | "market_data.price.percent_change_90d" | "-market_data.price.percent_change_365d" | "market_data.price.percent_change_365d";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for requested list of fungibles */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FungiblesResponse"];
                };
            };
            400: components["responses"]["MalformedParameters"];
            401: components["responses"]["UnauthenticatedError"];
            429: components["responses"]["TooManyRequests.yaml"];
        };
    };
    getFungibleById: {
        parameters: {
            query?: {
                /** @description Denominated currency value of returned prices */
                currency?: components["parameters"]["Currency"];
            };
            header?: never;
            path: {
                /** @description Unique fungible ID */
                fungible_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["SingleFungibleResponse"];
            400: components["responses"]["MalformedParameters"];
            401: components["responses"]["UnauthenticatedError"];
            404: components["responses"]["NotFoundResponse"];
            429: components["responses"]["TooManyRequests.yaml"];
        };
    };
    getFungibleChart: {
        parameters: {
            query?: {
                /** @description Denominated currency value of returned prices */
                currency?: components["parameters"]["Currency"];
            };
            header?: never;
            path: {
                /** @description Unique fungible ID */
                fungible_id: string;
                /** @description Chart period */
                chart_period: paths["/v1/wallets/{address}/charts/{chart_period}"]["get"]["parameters"]["0"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["SingleFungibleChartResponse"];
            400: components["responses"]["MalformedParameters"];
            401: components["responses"]["UnauthenticatedError"];
            404: components["responses"]["NotFoundResponse"];
            429: components["responses"]["TooManyRequests.yaml"];
        };
    };
    listChains: {
        parameters: {
            query?: never;
            header?: {
                /** @description Custom header that allows you to get data for testnets. */
                "X-Env"?: "testnet";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for requested list of chains */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChainsResponse"];
                };
            };
            400: components["responses"]["MalformedParameters"];
            401: components["responses"]["UnauthenticatedError"];
            429: components["responses"]["TooManyRequests.yaml"];
        };
    };
    getChainById: {
        parameters: {
            query?: never;
            header?: {
                /** @description Custom header that allows you to get data for testnets. */
                "X-Env"?: "testnet";
            };
            path: {
                /** @description Unique chain ID */
                chain_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for requested chain */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChainResponse"];
                };
            };
            400: components["responses"]["MalformedParameters"];
            401: components["responses"]["UnauthenticatedError"];
            404: components["responses"]["NotFoundResponse"];
            429: components["responses"]["TooManyRequests.yaml"];
        };
    };
    swapFungibles: {
        parameters: {
            query?: {
                input?: {
                    /**
                     * @description Initial chain id the user want exchange fungibles from. If nothing specified then `ethereum` is used.
                     * @example ethereum
                     */
                    chain_id?: string;
                };
                output?: {
                    /**
                     * @description Target chain id the user want receive fungibles on. If nothing specified then `ethereum` is used.
                     * @example polygon
                     */
                    chain_id?: string;
                };
                /**
                 * @description The direction parameter is a parameter that determines the flow of fungibles involved in the transaction. It can have three possible values: 'input', 'output', or 'both'. The value 'input' indicates that the API endpoint will only return fungibles that the user can send. The value 'output' indicates that the API endpoint will only return fungibles that the user can receive. The value 'both' means that the API endpoint will return fungibles which are 'input' and 'output' at the same time. In other words - intersection for 'input' and output'. If nothing specified then `both` is used.
                 * @example both
                 */
                direction?: "input" | "output" | "both";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["SwapFungiblesResponse"];
            400: components["responses"]["MalformedParameters"];
            401: components["responses"]["UnauthenticatedError"];
            429: components["responses"]["TooManyRequests.yaml"];
        };
    };
    swapOffers: {
        parameters: {
            query?: {
                /** @description Information about what the wallet wants to send. */
                input?: {
                    /**
                     * @description Address of the wallet which wants to trade or bridge. Could be omitted if only rate needed.
                     * @example 0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B
                     */
                    from?: string;
                    /**
                     * @description Initial chain ID the user want exchange assets from.
                     * @example ethereum
                     */
                    chain_id?: string;
                    /**
                     * @description Fungible ID which user wants to send. Interchangeable with asset_address.
                     * @example eth
                     */
                    fungible_id?: string;
                    /**
                     * @description Asset address which user wants to send. Interchangeable with fungible_id for fungibles. For the base asset there is no address. Use `0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee` instead.
                     * @example 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE
                     */
                    asset_address?: string;
                    /**
                     * Format: int64
                     * @description Input asset amount in lowest units
                     * @example 50000000000000000
                     */
                    amount?: number;
                };
                /** @description Information about what the wallet wants to receive. */
                output?: {
                    /**
                     * @description Specifies the recipient of the assets being exchanged. If this parameter is not provided, the assets will be sent to the sender's own wallet address. Used for bridge exchanges only.
                     * @example 0xab5801a7d398351b8be11c439e05c5b3259aec9b
                     */
                    to?: string;
                    /**
                     * @description Target chain ID the user want receive assets on.
                     * @example polygon
                     */
                    chain_id?: string;
                    /**
                     * @description Fungible ID which user wants to receive. Interchangeable with asset_address.
                     * @example 0x6b175474e89094c44da98b954eedeac495271d0f
                     */
                    fungible_id?: string;
                    /**
                     * @description Asset address which user wants to receive. Interchangeable with fungible_id for fungibles. For the base asset there is no address. Use `0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee` instead.
                     * @example 0x6B175474E89094C44Da98b954EedeAC495271d0F
                     */
                    asset_address?: string;
                    /**
                     * Format: int64
                     * @description Input asset amount in lowest units
                     * @example 50000000000000000
                     */
                    amount?: number;
                };
                /**
                 * @description Gas price in wei. If nothing specified then current market classic gas price is used.
                 * @example 26000000000
                 */
                gas_price?: number;
                /**
                 * @description The source to be used for exchanges search. If nothing specified then `all` is used.
                 * @example all
                 */
                liquidity_source_id?: components["schemas"]["SwapLiquiditySourcesEnum"];
                /**
                 * @description Order of output transactions result. If nothing specified then `amount` is used.
                 * @example amount
                 */
                sort?: "amount" | "time";
                /**
                 * @description Maximum slippage value for the transaction to be approved. Slippage is a term used in crypto exchanges to describe the difference between the expected price of a trade and the actual price at which the trade is executed. It occurs due to the volatility and liquidity of the market, and can result in a higher or lower price than expected. If nothing specified then `2` is used.
                 * @example 2
                 */
                slippage_percent?: number;
                /** @description Integrator service related parameters. */
                integrator?: {
                    /**
                     * Format: float
                     * @description Parameter for trades on Layer-2 and alternative Layer-1 networks that allows integrators to add an additional fee for transaction, measured in percents. Integrators must also specify the address of the wallet that will receive the additional fee using the integrator[beneficiary] parameter If nothing specified then `0` is used..
                     * @example 5
                     */
                    fee_percent?: number;
                    /**
                     * @description Parameter that integrator uses to specify the address of the wallet to receive additional fee associated with the transaction. This parameter is used in conjunction with the integrator[fee] parameter, which allows integrators to specify an additional fee for the exchange. Works only for trades on Layer-2 chains and alternative Layer-1 chains.
                     * @example 0xab5801a7d398351b8be11c439e05c5b3259aec9b
                     */
                    beneficiary?: string;
                };
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["SwapOffersResponse"];
            400: components["responses"]["MalformedParameters"];
            401: components["responses"]["UnauthenticatedError"];
            429: components["responses"]["TooManyRequests.yaml"];
        };
    };
    listGasPrices: {
        parameters: {
            query?: {
                /** @description Return only gas prices from specified chains. You can find available chain ids in chain endpoints. */
                "filter[chain_ids]"?: string[];
                /** @description Return only gas prices with specified gas-type. */
                "filter[gas_types]"?: components["schemas"]["GasPricesType"][];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["GasPricesResponse"];
            400: components["responses"]["MalformedParameters"];
            401: components["responses"]["UnauthenticatedError"];
            429: components["responses"]["TooManyRequests.yaml"];
        };
    };
    listNFTs: {
        parameters: {
            query?: {
                /** @description Keep only NFTs matching specified references.
                 *
                 *     Reference format is `chain_id:contract_address:token_id`.
                 *
                 *     References should be separated by comma `,`.
                 *
                 *     `chain_id`- ID of the chain where NFT exists, can be found in /chains endpoint.
                 *
                 *     `contract_address` address of the deployed contract which NFT belongs to.
                 *
                 *     `token_id` id of the NFT withing specified `contract_address`.
                 *
                 *     NOTE: parameter currently is mandatory and can not be omitted.
                 *      */
                "filter[references]"?: string;
                /** @description Denominated currency value of returned prices */
                currency?: components["parameters"]["Currency"];
                /** @description Array of related resources to be included to the response. This parameter corresponds to the JSON API schema. */
                include?: "nft_collections"[];
            };
            header?: {
                /** @description Custom header that allows you to get data for testnets. */
                "X-Env"?: "testnet";
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["NFTsResponse"];
            400: components["responses"]["MalformedParameters"];
            401: components["responses"]["UnauthenticatedError"];
            429: components["responses"]["TooManyRequests.yaml"];
        };
    };
    getNFTById: {
        parameters: {
            query?: {
                /** @description Denominated currency value of returned prices */
                currency?: components["parameters"]["Currency"];
                /** @description Array of related resources to be included to the response. This parameter corresponds to the JSON API schema. */
                include?: "nft_collections"[];
            };
            header?: {
                /** @description Custom header that allows you to get data for testnets. */
                "X-Env"?: "testnet";
            };
            path: {
                /** @description NFT unique identifier */
                nft_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["NFTResponse"];
            400: components["responses"]["MalformedParameters"];
            401: components["responses"]["UnauthenticatedError"];
            429: components["responses"]["TooManyRequests.yaml"];
        };
    };
}
