/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api_keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List API keys
         * @description Returns all the API keys.
         */
        get: operations["list-api-keys"];
        put?: never;
        /**
         * Create API key
         * @description Creates an API key and adds it to group IDs.
         */
        post: operations["create-api-key"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api_keys/{apiKeyID}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                apiKeyID: components["parameters"]["APIKeyID"];
            };
            cookie?: never;
        };
        /**
         * Get API Key
         * @description Returns an API key.
         */
        get: operations["get-api-key"];
        /**
         * Update API key
         * @description Updates an API key.
         */
        put: operations["update-api-key"];
        post?: never;
        /**
         * Delete API key
         * @description Deletes an API key.
         */
        delete: operations["delete-api-key"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Invite user
         * @description Invites a new user.
         */
        post: operations["invite-user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invites/{inviteID}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                inviteID: components["parameters"]["InviteID"];
            };
            cookie?: never;
        };
        /**
         * Check invite
         * @description Checks if a user invite is valid.
         */
        get: operations["check-invite"];
        put?: never;
        /**
         * Accept invite
         * @description Accepts a user invite.
         */
        post: operations["accept-invite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chains/{chain}/transfers": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Transfer ETH
         * @description Returns a transaction for sending the native token between addresses.
         */
        post: operations["transfer-eth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chains/{chain}/transactions/submit": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit signed transaction
         * @description Receives a pre-signed raw transaction and submits it to the blockchain.
         */
        post: operations["submit-signed-transaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chains/{chain}/transactions/{hash}": {
        parameters: {
            query?: {
                /** @description Include contract and method call details, if available. */
                include?: "contract";
            };
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description Transaction hash. */
                hash: components["parameters"]["TransactionHash"];
            };
            cookie?: never;
        };
        /**
         * Get transaction
         * @description Returns a transaction.
         */
        get: operations["get-transaction"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chains/{chain}/transactions/receipt/{hash}": {
        parameters: {
            query?: {
                /** @description Include contract and event details, if available. */
                include?: "contract";
            };
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description Transaction hash. */
                hash: components["parameters"]["TransactionHash"];
            };
            cookie?: never;
        };
        /**
         * Get transaction receipt
         * @description Returns the receipt of a transaction that's been successfully added to the blockchain.
         */
        get: operations["get-transaction-receipt"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chains/{chain}/status": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
            };
            cookie?: never;
        };
        /**
         * Get chain status
         * @description Returns the chain status.
         */
        get: operations["get-chain-status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chains/{chain}/blocks/{block}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description A block number, hash or 'latest' for the latest block. */
                block: components["parameters"]["BlockRef"];
            };
            cookie?: never;
        };
        /**
         * Get a block
         * @description Returns a block.
         */
        get: operations["get-block"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chains/{chain}/addresses": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
            };
            cookie?: never;
        };
        /**
         * List addresses
         * @description Returns all the labeled addresses.
         */
        get: operations["list-addresses"];
        put?: never;
        /**
         * Create or update address
         * @description Associates an address with a label.
         */
        post: operations["set-address"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chains/{chain}/addresses/{address-or-label}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description An address or the label of an address. */
                "address-or-label": components["parameters"]["AddressOrLabel"];
            };
            cookie?: never;
        };
        /**
         * Get address
         * @description Returns details about an address.
         */
        get: operations["get-address"];
        put?: never;
        post?: never;
        /**
         * Delete address
         * @description Deletes an address label.
         */
        delete: operations["delete-address"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chains/{chain}/addresses/{address-or-label}/contracts": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description An address or the label of an address. */
                "address-or-label": components["parameters"]["AddressOrLabel"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Link address and contract
         * @description Links an address to a contract.
         */
        post: operations["link-address-contract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chains/{chain}/addresses/{address-or-label}/contracts/{contract}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description An address or the label of an address. */
                "address-or-label": components["parameters"]["AddressOrLabel"];
                contract: components["parameters"]["ContractLabel"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Unlink address and contract
         * @description Unlinks an address from a contract.
         */
        delete: operations["unlink-address-contract"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chains/{chain}/addresses/{address-or-label}/contracts/{contract}/status": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description An address or the label of an address. */
                "address-or-label": components["parameters"]["AddressOrLabel"];
                contract: components["parameters"]["ContractLabel"];
            };
            cookie?: never;
        };
        /**
         * Get event monitor status
         * @description Returns the event monitor status for a given address and contract.
         */
        get: operations["get-event-monitor-status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chains/{chain}/addresses/{address-or-label}/contracts/{contract}/methods/{method}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description An address or the label of an address. */
                "address-or-label": components["parameters"]["AddressOrLabel"];
                contract: components["parameters"]["ContractLabel"];
                /** @description Contract function. */
                method: components["parameters"]["Method"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Call a contract function
         * @description Builds a transaction to call the given contract function. Returns a transaction to be signed and signs and submits to the blockchain it if the `signAndSubmit` flag is enabled.
         */
        post: operations["call-contract-function"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chains/{chain}/hsm/sign": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sign data
         * @description Signs the given data using the given HSM address.
         */
        post: operations["sign-data"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chains/{chain}/hsm/submit": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sign and submit transaction
         * @description Signs and submits the given transaction using an HSM address.
         */
        post: operations["sign-and-submit-transaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chains/{chain}/hsm/nonce/{wallet_address}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description An Ethereum address. */
                wallet_address: components["parameters"]["ETHAddress"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set local nonce
         * @description Sets the next transaction nonce for the given HSM address that will be used with the nonce management feature.
         */
        post: operations["set-local-nonce"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contracts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List contracts
         * @description Returns a list of contracts.
         */
        get: operations["list-contracts"];
        put?: never;
        /**
         * Create multiple contracts
         * @description Adds multiple contracts.
         */
        post: operations["create-contracts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contracts/{contract}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract: components["parameters"]["ContractLabel"];
            };
            cookie?: never;
        };
        /**
         * Get a contract
         * @description Returns the given contract.
         */
        get: operations["get-contract"];
        put?: never;
        /**
         * Create a contract
         * @description Adds a contract.
         */
        post: operations["create-contract"];
        /**
         * Delete a contract
         * @description Deletes a contract and all its versions.
         */
        delete: operations["delete-contract"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contracts/{contract}/deploy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract: components["parameters"]["ContractLabel"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deploy a contract
         * @description Returns a transaction to deploy the given contract to the blockchain.
         */
        post: operations["deploy-contract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contracts/{contract}/versions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract: components["parameters"]["ContractLabel"];
            };
            cookie?: never;
        };
        /**
         * List all contract versions
         * @description Returns a list of the versions of a contract.
         */
        get: operations["list-contract-versions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contracts/{contract}/all": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract: components["parameters"]["ContractLabel"];
            };
            cookie?: never;
        };
        /**
         * Get all contract versions
         * @description Returns all the versions of a contract.
         */
        get: operations["get-contract-versions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contracts/{contract}/{version}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract: components["parameters"]["ContractLabel"];
                /** @description Contract Version. */
                version: components["parameters"]["ContractVersion"];
            };
            cookie?: never;
        };
        /**
         * Get a contract version
         * @description Returns a specific contract version.
         */
        get: operations["get-contract-version"];
        put?: never;
        post?: never;
        /**
         * Delete a contract version
         * @description Deletes a specific contract version.
         */
        delete: operations["delete-contract-version"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contracts/{contract}/{version}/deploy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract: components["parameters"]["ContractLabel"];
                /** @description Contract Version. */
                version: components["parameters"]["ContractVersion"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deploy a contract version
         * @description Returns a transaction to deploy the given contract version to the blockchain.
         */
        post: operations["deploy-contract-version"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contracts/{contract}/{version}/methods/{method}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract: components["parameters"]["ContractLabel"];
                /** @description Contract Version. */
                version: components["parameters"]["ContractVersion"];
                /** @description Contract function. */
                method: components["parameters"]["Method"];
            };
            cookie?: never;
        };
        /**
         * Get function type conversions
         * @description Returns the type conversion options for a given contract and function signature.
         */
        get: operations["get-function-type-conversions"];
        put?: never;
        /**
         * Set function type conversions
         * @description Sets the type conversion options for a given contract and function signature.
         */
        post: operations["set-function-type-conversions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contracts/{contract}/{version}/events/{event}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract: components["parameters"]["ContractLabel"];
                /** @description Contract Version. */
                version: components["parameters"]["ContractVersion"];
                /** @description Contract Event. */
                event: components["parameters"]["Event"];
            };
            cookie?: never;
        };
        /**
         * Get event type conversions
         * @description Returns the type conversion options for a given contract and event signature.
         */
        get: operations["get-event-type-conversions"];
        put?: never;
        /**
         * Set event type conversions
         * @description Sets the type conversion options for a given contract and event signature.
         */
        post: operations["set-event-type-conversions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List CORS origins
         * @description Returns a list of CORS origins.
         */
        get: operations["list-cors-origins"];
        put?: never;
        /**
         * Add CORS origin
         * @description Adds a CORS origin.
         */
        post: operations["add-cors-origin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cors/{originID}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                originID: components["parameters"]["CORSOriginID"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove CORS Origin
         * @description Removes a CORS origin.
         */
        delete: operations["remove-cors-origin"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List events
         * @description Returns all events stored in the database.
         */
        get: operations["list-events"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get event count
         * @description Gets the number of events stored in the database.
         */
        get: operations["get-event-count"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hsm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List HSM configs and wallets
         * @description Returns a list of HSM configs and their associated wallets.
         */
        get: operations["list-hsm"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hsm/wallets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List HSM wallets
         * @description Returns a list of HSM wallets.
         */
        get: operations["list-hsm-wallets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hsm/key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add HSM key
         * @description Adds an existing key configuration.
         */
        post: operations["add-hsm-key"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hsm/key/{wallet_address}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An Ethereum address. */
                wallet_address: components["parameters"]["ETHAddress"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove HSM key
         * @description Removes the specified key configuration.
         */
        delete: operations["remove-hsm-key"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hsm/key/new": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create HSM key
         * @description Creates a new key in the Azure KeyVault.
         */
        post: operations["create-hsm-key"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hsm/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add HSM config
         * @description Adds a new Azure account configuration.
         */
        post: operations["add-hsm-config"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hsm/config/{client_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The HSM client ID. */
                client_id: components["parameters"]["ClientID"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove HSM config
         * @description Removes the specified Azure account configuration and its associated keys.
         */
        delete: operations["remove-hsm-config"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/queries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List event queries
         * @description Returns a list of saved event queries.
         */
        get: operations["list-event-queries"];
        put?: never;
        /**
         * Execute arbitrary event query
         * @description Executes an arbitrary event query.
         */
        post: operations["execute-arbitrary-event-query"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/queries/{event_query}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An event query label. */
                event_query: components["parameters"]["EventQueryLabel"];
            };
            cookie?: never;
        };
        /**
         * Get event query
         * @description Returns the given saved event query.
         */
        get: operations["get-event-query"];
        /**
         * Create or update event query
         * @description Creates or updates the given saved event query.
         */
        put: operations["set-event-query"];
        post?: never;
        /**
         * Delete event query
         * @description Deletes the given saved event query.
         */
        delete: operations["delete-event-query"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/queries/{event_query}/results": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An event query label. */
                event_query: components["parameters"]["EventQueryLabel"];
            };
            cookie?: never;
        };
        /**
         * Execute event query
         * @description Executes the given saved event query.
         */
        get: operations["execute-event-query"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/queries/{event_query}/count": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An event query label. */
                event_query: components["parameters"]["EventQueryLabel"];
            };
            cookie?: never;
        };
        /**
         * Count event query records
         * @description Returns the record count of the given saved event query.
         */
        get: operations["count-event-query-records"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chains/{chain}/txm/{wallet_address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List transactions for a wallet
         * @description List the transactions submitted by the given wallet address.
         */
        get: operations["list-wallet-transactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chains/{chain}/txm/{wallet_address}/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Count all transactions for a wallet
         * @description Count all transactions for the given wallet address.
         */
        get: operations["count-wallet-transactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chains/{chain}/txm/{wallet_address}/nonce/{nonce}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description An Ethereum address. */
                wallet_address: components["parameters"]["ETHAddress"];
                /** @description Transaction nonce. */
                nonce: components["parameters"]["Nonce"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel transaction
         * @description Cancels a transaction by resubmitting it as no-op transaction and with a higher gas price.
         */
        post: operations["cancel-transaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chains/{chain}/txm/{wallet_address}/nonce/{nonce}/speed_up": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description An Ethereum address. */
                wallet_address: components["parameters"]["ETHAddress"];
                /** @description Transaction nonce. */
                nonce: components["parameters"]["Nonce"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Speed up transaction
         * @description Speeds up a transaction by resubmitting it with a higher gas price.
         */
        post: operations["speed-up-transaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List webhooks
         * @description List all webhook endpoints.
         */
        get: operations["list-webhooks"];
        put?: never;
        /**
         * Create webhook
         * @description Create a webhook.
         */
        post: operations["create-webhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Count webhooks
         * @description Count all webhook endpoints.
         */
        get: operations["count-webhooks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/{webhookID}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                webhookID: components["parameters"]["WebhookID"];
            };
            cookie?: never;
        };
        /**
         * Get webhook
         * @description Get a webhook endpoint.
         */
        get: operations["get-webhook"];
        /**
         * Update webhook
         * @description Update a webhook endpoint.
         */
        put: operations["update-webhook"];
        post?: never;
        /**
         * Delete webhook
         * @description Delete a webhook endpoint.
         */
        delete: operations["delete-webhook"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/{webhookID}/events": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                webhookID: components["parameters"]["WebhookID"];
            };
            cookie?: never;
        };
        /**
         * List webhook events
         * @description List events for the given webhook endpoint.
         */
        get: operations["list-webhook-events"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/{webhookID}/events/count": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                webhookID: components["parameters"]["WebhookID"];
            };
            cookie?: never;
        };
        /**
         * Count webhook events
         * @description Count the events for the given webhook endpoint.
         */
        get: operations["count-webhook-events"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: {
                groupID?: components["parameters"]["GroupIDFilter"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List users
         * @description Returns all the users.
         */
        get: operations["list-users"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userID}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userID: components["parameters"]["UserID"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete user
         * @description Deletes a user.
         */
        delete: operations["delete-user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userID}/signers": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userID: components["parameters"]["UserID"];
            };
            cookie?: never;
        };
        /**
         * List user signers
         * @description Returns all the signers for a user.
         */
        get: operations["list-user-signers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userID}/web3wallets/{wallet_address}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userID: components["parameters"]["UserID"];
                /** @description An Ethereum address. */
                wallet_address: components["parameters"]["ETHAddress"];
            };
            cookie?: never;
        };
        get?: never;
        /**
         * Add or update user web3 wallet signer
         * @description Adds or updates a user's web3 wallet signer.
         */
        put: operations["set-user-signer-web3-wallet"];
        post?: never;
        /**
         * Remove user web3 wallet signer
         * @description Removes a web3 wallet signer from a user.
         */
        delete: operations["remove-user-signer-web3-wallet"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userID}/cloudwallets/{wallet_address}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userID: components["parameters"]["UserID"];
                /** @description An Ethereum address. */
                wallet_address: components["parameters"]["ETHAddress"];
            };
            cookie?: never;
        };
        get?: never;
        /**
         * Add or update user cloud wallet signer
         * @description Adds or updates a user's cloud wallet signer.
         */
        put: operations["set-user-signer-cloud-wallet"];
        post?: never;
        /**
         * Remove user cloud wallet signer
         * @description Removes a cloud wallet signer from a user.
         */
        delete: operations["remove-user-signer-cloud-wallet"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userID}/safeaccounts/{wallet_address}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userID: components["parameters"]["UserID"];
                /** @description An Ethereum address. */
                wallet_address: components["parameters"]["ETHAddress"];
            };
            cookie?: never;
        };
        get?: never;
        /**
         * Add or update user safe account signer
         * @description Adds or updates a user's safe account signer.
         */
        put: operations["set-user-signer-safe-account"];
        post?: never;
        /**
         * Remove user safe account signer
         * @description Removes a safe account signer from a user.
         */
        delete: operations["remove-user-signer-safe-account"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups": {
        parameters: {
            query?: {
                userID?: components["parameters"]["UserIDFilter"];
                apiKeyID?: components["parameters"]["ApiKeyIDFilter"];
                assignable?: components["parameters"]["AssignableRoleFlag"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List groups
         * @description Returns all the groups.
         */
        get: operations["list-groups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{groupID}/roles/{roleShortName}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupID: components["parameters"]["GroupID"];
                roleShortName: components["parameters"]["RoleShortName"];
            };
            cookie?: never;
        };
        get?: never;
        /**
         * Add role to group
         * @description Adds a role to a group.
         */
        put: operations["add-group-role"];
        post?: never;
        /**
         * Remove role from group
         * @description Removes a role from a group.
         */
        delete: operations["remove-group-role"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{groupID}/users/{userID}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupID: components["parameters"]["GroupID"];
                userID: components["parameters"]["UserID"];
            };
            cookie?: never;
        };
        get?: never;
        /**
         * Add user to group
         * @description Adds a user to a group.
         */
        put: operations["add-group-user"];
        post?: never;
        /**
         * Remove user from group
         * @description Removes a user from a group.
         */
        delete: operations["remove-group-user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{groupID}/api_keys/{apiKeyID}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupID: components["parameters"]["GroupID"];
                apiKeyID: components["parameters"]["APIKeyID"];
            };
            cookie?: never;
        };
        get?: never;
        /**
         * Add API key to group
         * @description Adds an API key to a group.
         */
        put: operations["add-group-api-key"];
        post?: never;
        /**
         * Remove API key from group
         * @description Removes an API key from a group.
         */
        delete: operations["remove-group-api-key"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/systemactivities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List audit logs
         * @description Returns the audit logs.
         */
        get: operations["list-audit-logs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * GasParams
         * @description Specify custom gas parameters
         */
        GasParams: {
            /** @description Gas price to use for the cancel/resubmit. */
            gasPrice?: string;
            /** @description Gas fee cap to use for the EIP-1559 cancel/resubmit. */
            gasFeeCap?: string;
            /** @description Gas priority fee cap to use for the EIP-1559 cancel/resubmit. */
            gasTipCap?: string;
            /**
             * Format: int64
             * @description Gas limit to set for the cancel/resubmit.
             */
            gas?: number;
        };
        /**
         * Address
         * @description An address details.
         */
        Address: components["schemas"]["AddressLabel"] & {
            balance?: string;
            chain: string;
            modules: string[];
            /**
             * Format: int64
             * @description The next transaction nonce for this address (obtained from the blockchain node).
             */
            nonce?: number;
            /**
             * Format: int64
             * @description The next transaction nonce for this address when using the nonce management feature.
             */
            localNonce?: number;
            /** Format: byte */
            codeAt?: string;
            contracts: components["schemas"]["ContractMetadata"][];
            contractLookup?: components["schemas"]["ContractLookup"][];
        };
        /**
         * AddressLabel
         * @description An address and it's label.
         */
        AddressLabel: {
            label: components["schemas"]["Label"];
            address: components["schemas"]["ETHAddress"];
        };
        /** @description An API key. */
        BaseAPIKey: {
            label: components["schemas"]["Label"];
        };
        /** @description An API key. */
        APIKey: components["schemas"]["BaseAPIKey"] & {
            /** Format: int64 */
            id: number;
            /**
             * Format: date-time
             * @description The time the API key was created.
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description The time the API key was last used.
             */
            lastUsedAt?: string;
            /**
             * Format: int64
             * @description The ID of the user that created the API key.
             */
            createdBy: number;
            /** @description The signature of the API key. */
            signature: string;
        };
        /** @description A freshly created API key with its secret. */
        APIKeyWithSecret: components["schemas"]["APIKey"] & {
            /** @description The secret key of the API key. */
            key: string;
        };
        /**
         * AzureKeyName
         * @description The name of the key.
         */
        AzureKeyName: string;
        /** @description The version of the key. */
        AzureKeyVersion: string;
        /**
         * BaseAzureAccount
         * @description An Azure account.
         */
        BaseAzureAccount: {
            label: components["schemas"]["Label"];
            /** @description The Application ID that will be accessing the Key Vault. */
            clientID: string;
            /** @description The application’s secret key that you generate when you first register the application in Azure. */
            clientSecret: string;
            /** @description Also known as Directory ID. */
            tenantID: string;
            /** @description The ID linked to your subscription to Azure services. */
            subscriptionID: string;
            /** @description The Resource Group Name for the resource being accessed. */
            baseGroupName: string;
        };
        /**
         * AzureAccount
         * @description An Azure account.
         */
        AzureAccount: components["schemas"]["BaseAzureAccount"] & {
            /** Format: int64 */
            id: number;
        };
        /**
         * AzureHardwareWallet
         * @description An HSM Wallet
         */
        AzureHardwareWallet: {
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            azureAccountID: number;
            /** @description The name given to the vault your key is stored in. */
            vaultName: string;
            keyName: components["schemas"]["AzureKeyName"];
            keyVersion: components["schemas"]["AzureKeyVersion"];
            publicAddress: components["schemas"]["ETHAddress"];
        };
        /**
         * AzureHardwareWalletSlice
         * @description An array of Azure Hardware Wallets.
         */
        AzureHardwareWalletSlice: components["schemas"]["AzureHardwareWallet"][];
        /**
         * AzureWallet
         * @description An HSM Wallet returned when a new key is created
         */
        AzureWallet: {
            keyName: components["schemas"]["AzureKeyName"];
            keyVersion: components["schemas"]["AzureKeyVersion"];
            publicAddress: components["schemas"]["ETHAddress"];
        };
        /**
         * StandaloneWallet
         * @description An object containing an HSM wallet's details.
         */
        StandaloneWallet: {
            /** @description The Application ID that accesses the Key Vault. */
            clientID?: string;
            /** @description The Resource Group Name for the resource being accessed. */
            baseGroupName: string;
            /** @description The name given to the vault your key is stored in. */
            vaultName?: string;
            keyName: components["schemas"]["AzureKeyName"];
            keyVersion?: components["schemas"]["AzureKeyVersion"];
            publicAddress: components["schemas"]["ETHAddress"];
        };
        /**
         * Block
         * @description A block in the Ethereum blockchain.
         */
        Block: {
            blockchain: string;
            hash: components["schemas"]["Keccak256Hash"];
            difficulty: string;
            /** Format: int64 */
            gasLimit: number;
            number: string;
            /** Format: int64 */
            timestamp: number;
            transactions: components["schemas"]["Transaction"][];
            receiptsRoot: components["schemas"]["Keccak256Hash"];
            parentHash: components["schemas"]["Keccak256Hash"];
            sha3Uncles: components["schemas"]["Keccak256Hash"];
            miner: components["schemas"]["ETHAddress"];
            stateRoot: components["schemas"]["Keccak256Hash"];
            transactionsRoot: components["schemas"]["Keccak256Hash"];
            logsBloom: components["schemas"]["Hex"];
            gasUsed: number;
            nonce: components["schemas"]["Hex"];
            mixHash: components["schemas"]["Keccak256Hash"];
            /** Format: byte */
            extraData: string;
            baseFeePerGas: string;
        };
        /**
         * ChainName
         * @description A blockchain chain name.
         * @enum {string}
         */
        ChainName: "ethereum";
        /**
         * ChainStatus
         * @description The status of the Chain
         */
        ChainStatus: {
            /** Format: int64 */
            blockNumber: number;
            /** @description The client version for this chain node. */
            version: string;
            /** Format: int64 */
            chainID: number;
            /** Format: int64 */
            networkID: number;
            /** @description The current base fee (only available for chains that support EIP-1559). */
            baseFee?: string;
        };
        /**
         * ContractInstance
         * @description A contract instance
         */
        ContractInstance: {
            label: string;
            address: components["schemas"]["ETHAddress"];
        };
        /** ContractMetadata */
        ContractMetadata: {
            label: components["schemas"]["Label"];
            name: components["schemas"]["ContractName"];
            version: components["schemas"]["ContractVersion"];
        };
        /**
         * ContractABIType
         * @description A contract function or event argument type.
         */
        ContractABIType: {
            type: string;
            /** Format: int64 */
            size?: number;
            tupleElems?: components["schemas"]["ContractABIType"][];
            tupleRawNames?: string[];
            elem?: components["schemas"]["ContractABIType"];
        };
        /**
         * ContractABIMethodArgument
         * @description A contract function argument.
         */
        ContractABIMethodArgument: {
            name?: string;
            type?: components["schemas"]["ContractABIType"];
            typeConversion: components["schemas"]["ContractABITypeConversion"];
            notes?: string;
        };
        /**
         * ContractABIMethod
         * @description A contract function.
         */
        ContractABIMethod: {
            id: components["schemas"]["Hex"];
            /** @description Name of the function. */
            name: string;
            /** @description The function signature. */
            signature: string;
            const: boolean;
            payable: boolean;
            /** @description List of function arguments. */
            inputs: components["schemas"]["ContractABIMethodArgument"][];
            /** @description List of function outputs. */
            outputs: components["schemas"]["ContractABIMethodArgument"][];
            author: string;
            notes: string;
            returns: string;
            /** @description The function description. */
            description: string;
        } | null;
        /**
         * ContractMethodInformation
         * @description The contract method's information returned within the event or transaction.
         */
        ContractMethodInformation: {
            /** @description The name of the method. */
            name: string;
            /** @description The method signature. */
            signature: string;
            inputs: components["schemas"]["MethodArg"][];
        };
        /**
         * ContractABIEventArgument
         * @description A contract event argument.
         */
        ContractABIEventArgument: {
            name: string;
            type: components["schemas"]["ContractABIType"];
            indexed: boolean;
            typeConversion: components["schemas"]["ContractABITypeConversion"];
            /** @description The developer documentation. */
            notes: string;
        };
        /**
         * ContractABIEvent
         * @description A contract event.
         */
        ContractABIEvent: {
            id: components["schemas"]["Keccak256Hash"];
            name: string;
            signature: string;
            anonymous: boolean;
            /** @description List of contract event's input arguments. */
            inputs: components["schemas"]["ContractABIEventArgument"][];
            /** @description The developer documentation. */
            notes: string;
            /** @description The user documentation. */
            description: string;
        };
        /**
         * ContractABIErrorArgument
         * @description A contract error argument.
         */
        ContractABIErrorArgument: {
            name: string;
            type: components["schemas"]["ContractABIType"];
            indexed: boolean;
            /** @description The developer documentation. */
            notes: string;
        };
        /**
         * ContractABIError
         * @description A contract error.
         */
        ContractABIError: {
            id: components["schemas"]["Keccak256Hash"];
            name: string;
            signature: string;
            /** @description List of contract event's input arguments. */
            inputs: components["schemas"]["ContractABIErrorArgument"][];
            /** @description The developer documentation. */
            notes?: string;
            /** @description The user documentation. */
            description?: string;
        };
        /**
         * ContractABI
         * @description The contract ABI.
         */
        ContractABI: {
            /**
             * ContractABIMethod
             * @description A contract function.
             */
            constructor: {
                id: components["schemas"]["Hex"];
                /** @description Name of the function. */
                name: string;
                /** @description The function signature. */
                signature: string;
                const: boolean;
                payable: boolean;
                /** @description List of function arguments. */
                inputs: components["schemas"]["ContractABIMethodArgument"][];
                /** @description List of function outputs. */
                outputs: components["schemas"]["ContractABIMethodArgument"][];
                author: string;
                notes: string;
                returns: string;
                /** @description The function description. */
                description: string;
            } | null;
            methods: {
                [key: string]: components["schemas"]["ContractABIMethod"];
            };
            events: {
                [key: string]: components["schemas"]["ContractABIEvent"];
            };
            errors?: {
                [key: string]: components["schemas"]["ContractABIError"];
            };
            fallback: components["schemas"]["ContractABIMethod"];
            receive: components["schemas"]["ContractABIMethod"];
        };
        /**
         * BaseContract
         * @description A contract.
         */
        BaseContract: {
            label: components["schemas"]["Label"];
            contractName: components["schemas"]["ContractName"];
            version: components["schemas"]["ContractVersion"];
            bin?: components["schemas"]["ByteCode"];
            /** @description The contract raw ABI JSON string. */
            rawAbi: string;
            /** @description The user documentation JSON string. */
            userDoc: string;
            /** @description The developer documentation JSON string. */
            developerDoc: string;
            /** @description The contract metadata JSON string. */
            metadata?: string;
            isFavorite?: boolean;
        };
        /**
         * Contract
         * @description A returned contract.
         */
        Contract: components["schemas"]["BaseContract"] & {
            abi: components["schemas"]["ContractABI"];
            /** @description List of the contract instances. */
            instances?: components["schemas"]["ContractInstance"][];
        };
        /**
         * ContractInformation
         * @description The contract information within the event or transaction.
         */
        ContractInformation: {
            address: components["schemas"]["ETHAddress"];
            addressLabel: components["schemas"]["Label"];
            /** @description The name of the contract. */
            name: string;
            label: components["schemas"]["Label"];
        };
        /**
         * ContractOverview
         * @description A contract overview.
         */
        ContractOverview: {
            label: components["schemas"]["Label"];
            contractName: components["schemas"]["ContractName"];
            version: components["schemas"]["ContractVersion"];
            isFavorite?: boolean;
            deployable: boolean;
            /** @description List of contract instances. */
            instances: components["schemas"]["ContractInstance"][];
        };
        /**
         * ContractLookup
         * @description The contract lookup item.
         */
        ContractLookup: {
            address: components["schemas"]["ETHAddress"];
            name?: components["schemas"]["ContractName"];
            /** @description The contract ABI JSON string. */
            abi: string;
            bytecode?: components["schemas"]["ByteCode"];
            /** @description The contract's source code. */
            source?: string;
            /** @description The user documentation JSON string. */
            userdoc?: string;
            /** @description The developer documentation JSON string. */
            devdoc?: string;
            /** @description Indicates whether the contract has been verified. */
            verified: boolean;
            /** @description The name of the service that provided the contract verification. */
            verifiedSource?: string;
            /**
             * Format: uri
             * @description The URL to the contract's verification details on the verification service.
             */
            verifiedLink?: string;
            /** @description Indicates whether the contract is a proxy contract. */
            proxy: boolean;
        };
        /**
         * DeployContractTransaction
         * @description The transaction returned when you deploy a contracts.
         */
        DeployContractTransaction: components["schemas"]["TransactionToSign"] & {
            deployAt?: string;
            label?: components["schemas"]["Label"];
        };
        /**
         * EventMonitorStatus
         * @description Status of an Event Monitor
         */
        EventMonitorStatus: {
            /** Format: int64 */
            contractId?: number;
            /** Format: int64 */
            addressId?: number;
            isProcessingPastLogs: boolean;
            /** Format: int64 */
            idealBlockRange?: number;
            /** Format: int64 */
            latestBlockNumber: number;
            latestBlockHash: components["schemas"]["Keccak256Hash"];
            /** Format: int64 */
            startBlockNumber: number;
            startBlockHash: components["schemas"]["Keccak256Hash"];
            updatedAt: string;
        };
        /**
         * HSMSignRequest
         * @description Request body representing a sign-data request.
         */
        HSMSignRequest: {
            address: components["schemas"]["ETHAddress"];
            /** @description Is the data field an encapsulated EIP-712 typed message? */
            isTyped?: boolean;
            /** @description Data to sign */
            data: string;
            chainId?: number | components["schemas"]["Hex"];
        };
        /**
         * HSMSignResponse
         * @description Response body representing a sign-data response.
         */
        HSMSignResponse: {
            publicKey: string;
            signature: string;
        };
        /**
         * Event
         * @description An event returned by the API call.
         */
        Event: {
            /**
             * Format: date-time
             * @description The time at which the event was triggered.
             */
            triggeredAt: string;
            event: components["schemas"]["EventInformation"];
            transaction: components["schemas"]["TransactionInformation"];
        };
        /**
         * EventInformation
         * @description The event information returned as part of an event.
         */
        EventInformation: {
            /** @description The name of the event. */
            name: string;
            /** @description The event signature. */
            signature: string;
            /** @description The list of input arguments for the event. */
            inputs: components["schemas"]["EventField"][];
            /** @description The raw output from an event. Omitted when returned as part of a transaction receipt. */
            rawFields?: string;
            contract: components["schemas"]["ContractInformation"];
            /**
             * Format: int64
             * @description The event's index in the log.
             */
            indexInLog: number;
        };
        /**
         * EventField
         * @description Holds a field in the event's data.
         */
        EventField: {
            /** @description The input name. */
            name: string;
            /** @description The input value. */
            value: unknown;
            /** @description Has the value been hashed into a keccak256 string? */
            hashed: boolean;
            /** @description The type of the argument. */
            type: string;
        };
        /**
         * MethodArg
         * @description An argument passed to a method call.
         */
        MethodArg: {
            /** @description The input name. */
            name: string;
            /** @description The input value. */
            value: unknown;
            /** @description The type of the argument. */
            type: string;
        };
        /**
         * HSMData
         * @description Response body for returning HSM Data.
         */
        HSMData: {
            configuration: components["schemas"]["AzureAccount"];
            wallets: components["schemas"]["AzureHardwareWalletSlice"];
        };
        /**
         * AddKey
         * @description Add key request data.
         */
        AddKey: {
            /** @description The Application ID that will be accessing the Key Vault. */
            clientID: string;
            keyName: components["schemas"]["AzureKeyName"];
            keyVersion: components["schemas"]["AzureKeyVersion"];
            /** @description The name given to the vault your key is stored in. */
            vaultName: string;
        };
        /**
         * CreateKey
         * @description Create Key request data.
         */
        CreateKey: {
            /** @description The Application ID that will be accessing the Key Vault. */
            clientID: string;
            keyName: components["schemas"]["AzureKeyName"];
            /** @description The name given to the vault your key is stored in. */
            vaultName: string;
            useHardwareModule: boolean;
        };
        /**
         * ContractABITypeConversion
         * @description Holds JSON-compatible type conversion information.
         */
        ContractABITypeConversion: {
            mode: string;
            /** Format: int64 */
            decimalsAbsolute: number | null;
            decimalsFunction: string | null;
        } | null;
        /**
         * ContractParameter
         * @description Type conversion options for an input or an output of a function or an event.
         */
        ContractParameter: {
            typeConversion: components["schemas"]["ContractABITypeConversion"];
        };
        /**
         * ContractEventOptions
         * @description Type conversion options for an event.
         */
        ContractEventOptions: {
            signature?: string;
            inputs: components["schemas"]["ContractParameter"][];
        };
        /**
         * ContractMethodOptions
         * @description Type conversion options for a function.
         */
        ContractMethodOptions: {
            /** @description The function signature. */
            signature?: string;
            /** @description List of function input parameters. */
            inputs: components["schemas"]["ContractParameter"][];
            /** @description List of function output parameters. */
            outputs?: components["schemas"]["ContractParameter"][];
        };
        /**
         * Log
         * @description A contract log event.
         */
        Log: {
            address: components["schemas"]["ETHAddress"];
            /** @description A list of topics provided by the contract. */
            topics: components["schemas"]["Keccak256Hash"][];
            data: components["schemas"]["Hex"];
            blockNumber: components["schemas"]["Hex"];
            transactionHash: components["schemas"]["Keccak256Hash"];
            transactionIndex: components["schemas"]["Hex"];
            blockHash: components["schemas"]["Keccak256Hash"];
            logIndex: components["schemas"]["Hex"];
            /** @description True if this log was reverted due to a chain reorganization. */
            removed: boolean;
        };
        /**
         * TypeConversionOptions
         * @description Represents the set of type conversions allowed for a particular input or output of a function (how it may be "cast").
         */
        TypeConversionOptions: {
            types?: string[] | null;
        };
        /**
         * EventTypeConversionOptions
         * @description Type conversion options for each of the inputs of an event.
         */
        EventTypeConversionOptions: {
            /** @description List of event's input parameters. */
            inputs: components["schemas"]["TypeConversionOptions"][];
        };
        /**
         * MethodTypeConversionOptions
         * @description Type conversion options for each of the inputs and outputs of a function.
         */
        MethodTypeConversionOptions: {
            inputs: components["schemas"]["TypeConversionOptions"][];
            outputs: components["schemas"]["TypeConversionOptions"][];
        };
        /**
         * PostMethodArgs
         * @description Arguments to be passed into a contract function.
         */
        PostMethodArgs: {
            signature?: string;
            /** @description List of the function arguments. */
            args?: unknown[];
            from?: components["schemas"]["ETHAddress"];
            /**
             * Format: int64
             * @description Nonce to use for the transaction execution.
             */
            nonce?: number;
            /**
             * Format: int64
             * @description Gas price to use for the transaction execution.
             */
            gasPrice?: number;
            /**
             * Format: int64
             * @description Gas fee cap to use for the 1559 transaction execution.
             */
            gasFeeCap?: number;
            /**
             * Format: int64
             * @description Gas priority fee cap to use for the 1559 transaction execution.
             */
            gasTipCap?: number;
            /**
             * Format: int64
             * @description Gas limit to set for the transaction execution.
             */
            gas?: number;
            to?: components["schemas"]["ETHAddress"];
            /** @description Amount (in wei) to send with the transaction. */
            value?: string;
            /**
             * @description If the `from` address is an HSM address and this flag is set to `true`, the transaction will be automatically signed and submitted to the blockchain.
             * @default false
             */
            signAndSubmit: boolean;
            /**
             * @description If the `from` address is an HSM address and this flag is set to `true`, MultiBaas will keep track of the nonce and set it accordingly. This is particularly useful when submitting multiple transactions concurrently or in a very short period of time. If this flag is set to `true` and a `nonce` is provided, it will reset the nonce tracker to the given nonce (useful if the nonce tracker is out of sync).
             * @default false
             */
            nonceManagement: boolean;
            /**
             * @description If set to `true`, forces a legacy type transaction. Otherwise an EIP-1559 transaction will created if the network supports it.
             * @default false
             */
            preEIP1559: boolean;
            signer?: components["schemas"]["ETHAddress"];
            /**
             * @description Mode to format integer outputs in the function call's responses. There are 3 possible modes:
             *       - `auto` (the default option), where number format is decided by its type:
             *         - If the type has size at most 32 bits, then the number is returned verbatim.
             *         - If the type has size larger than 32 bits, then the number is returned as a string.
             *       - `as-numbers`, where all numbers are returned as strings.
             *       - `as-strings`, where all numbers are returned verbatim.
             *
             * @default auto
             */
            formatInts: string;
            /** @description Call the function at a specific timestamp. Only available for read functions calls and if the `historical_blocks_feature` is enabled (see the plan endpoint). Mutually exclusive with the `blockNumber` parameter. */
            timestamp?: string;
            /** @description Call the function at a specific block. Only available for read functions calls and if the `historical_blocks_feature` is enabled (see the plan endpoint). Mutually exclusive with the `timestamp` parameter. */
            blockNumber?: string;
            /** @description If set to true the given address and contract don't need to be linked for the function to be called. */
            contractOverride?: boolean;
            preview?: components["schemas"]["PreviewArgs"];
        };
        /**
         * PreviewArgs
         * @description Ephemeral configuration for previewing the effect of a Type Conversion on a contract function call.
         */
        PreviewArgs: {
            /** @description Only preview the effect of a Type Conversion on the inputs. Only applicable for write function calls, where the output is an unsigned transaction. */
            inputsOnly: boolean;
            /** @description Type Conversion information for the function inputs. The number of inputs must match that of the actual function inputs. The parameter is a contract function argument where only the type conversion information is used. */
            inputs: components["schemas"]["ContractABIMethodArgument"][];
            /** @description Type Conversion information for the function outputs. The number of outputs must match that of the actual function outputs. The parameter is a contract function argument where only the type conversion information is used. */
            outputs: components["schemas"]["ContractABIMethodArgument"][];
        };
        /**
         * Transaction
         * @description A transaction from the Ethereum Blockchain.
         */
        Transaction: {
            type: components["schemas"]["Hex"];
            nonce: components["schemas"]["Hex"];
            gasPrice?: components["schemas"]["HexOrNull"];
            maxFeePerGas?: components["schemas"]["HexOrNull"];
            maxPriorityFeePerGas?: components["schemas"]["HexOrNull"];
            gas: components["schemas"]["Hex"];
            to: components["schemas"]["ETHAddressOrNull"];
            value: components["schemas"]["HexOrNull"];
            input: components["schemas"]["Hex"];
            v: components["schemas"]["Hex"];
            r: components["schemas"]["Hex"];
            s: components["schemas"]["Hex"];
            chainId?: components["schemas"]["Hex"];
            hash: components["schemas"]["Keccak256Hash"];
        };
        /**
         * SignedTransactionSubmission
         * @description The object used to receive a pre-signed raw transaction.
         */
        SignedTransactionSubmission: {
            /** @description The pre-signed raw transaction. */
            signedTx: string;
        };
        /**
         * SignedTransactionResponse
         * @description A transaction that was signed externally and submitted.
         */
        SignedTransactionResponse: {
            tx: components["schemas"]["Transaction"];
        };
        /**
         * SetNonceRequest
         * @description Request body representing a set local nonce request.
         */
        SetNonceRequest: {
            /**
             * Format: int64
             * @description If nonce is specified the provided value is set, otherwise the value is read from the blockchain.
             */
            nonce?: number;
        };
        /**
         * TransactionData
         * @description The transaction data returned from a call to get transaction by hash.
         */
        TransactionData: {
            data: components["schemas"]["Transaction"];
            /** @description Whether the transaction has been included yet. */
            isPending: boolean;
            from: components["schemas"]["ETHAddress"];
            blockHash?: components["schemas"]["Keccak256Hash"];
            /** @description The transaction block number. */
            blockNumber?: string;
            contract?: components["schemas"]["ContractInformation"];
            method?: components["schemas"]["ContractMethodInformation"];
        };
        /**
         * TransactionInformation
         * @description The transaction information returned as part of an event.
         */
        TransactionInformation: {
            from: components["schemas"]["ETHAddress"];
            txData: components["schemas"]["Hex"];
            txHash: components["schemas"]["Keccak256Hash"];
            /**
             * Format: int64
             * @description The location of the transaction in the block.
             */
            txIndexInBlock: number;
            blockHash: components["schemas"]["Keccak256Hash"];
            /**
             * Format: int64
             * @description The transaction block number.
             */
            blockNumber: number;
            contract: components["schemas"]["ContractInformation"];
            method: components["schemas"]["ContractMethodInformation"];
        };
        /**
         * TransactionReceipt
         * @description Record of the transaction's outcome.
         */
        TransactionReceipt: {
            data: {
                type?: components["schemas"]["Hex"];
                root: components["schemas"]["Hex"];
                status: components["schemas"]["Hex"];
                cumulativeGasUsed: components["schemas"]["Hex"];
                logsBloom: components["schemas"]["Hex"];
                logs: components["schemas"]["Log"][];
                transactionHash: components["schemas"]["Keccak256Hash"];
                contractAddress: components["schemas"]["ETHAddress"];
                gasUsed: components["schemas"]["Hex"];
                effectiveGasPrice: components["schemas"]["Hex"];
                blockNumber: components["schemas"]["Hex"];
                transactionIndex: components["schemas"]["Hex"];
                blockHash: components["schemas"]["Keccak256Hash"];
            };
            events?: components["schemas"]["EventInformation"][];
        };
        /**
         * CORSOrigin
         * @description CORS Origin
         */
        CORSOrigin: {
            /** Format: int64 */
            id?: number;
            /** @description The CORS Origin */
            origin?: string;
        };
        /**
         * BaseTransactionToSign
         * @description A transaction to be signed.
         */
        BaseTransactionToSign: {
            /** @description An Ethereum transaction. */
            tx: {
                /**
                 * Format: int64
                 * @description Sender account nonce of the transaction
                 */
                nonce?: number;
                /** @description Gas price of the transaction */
                gasPrice?: string;
                /** @description Fee cap per gas of the transaction */
                gasFeeCap?: string;
                /** @description GasTipCap per gas of the transaction */
                gasTipCap?: string;
                /**
                 * Format: int64
                 * @description Gas limit of the transaction
                 */
                gas: number;
                from: components["schemas"]["ETHAddress"];
                to?: components["schemas"]["ETHAddressOrNull"];
                /** @description Amount (in wei) to send with the transaction. */
                value: string;
                data: components["schemas"]["Hex"];
                hash?: components["schemas"]["Keccak256Hash"];
                /**
                 * Format: int64
                 * @description Transaction type
                 */
                type: number;
            };
        };
        /** PostMethodResponse */
        PostMethodResponse: {
            /** @description The response object type (discriminator). */
            kind: string;
        };
        /** TransactionToSignResponse */
        TransactionToSignResponse: Omit<components["schemas"]["PostMethodResponse"], "kind"> & components["schemas"]["TransactionToSign"] & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            kind: "TransactionToSignResponse";
        };
        /**
         * TransactionToSign
         * @description A transaction to be signed.
         */
        TransactionToSign: components["schemas"]["BaseTransactionToSign"] & {
            submitted: boolean;
        };
        /**
         * MethodCallResponse
         * @description The result of a function call.
         */
        MethodCallResponse: Omit<components["schemas"]["PostMethodResponse"], "kind"> & {
            /** @description The function call output. */
            output: unknown;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            kind: "MethodCallResponse";
        };
        /**
         * MethodCallPreviewResponse
         * @description The result of a preview function arguments call.
         */
        MethodCallPreviewResponse: Omit<components["schemas"]["PostMethodResponse"], "kind"> & {
            /** @description The function call inputs. */
            input: unknown[];
            /** @description The function call output. */
            output: unknown;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            kind: "MethodCallPreviewResponse";
        };
        /**
         * FieldType
         * @description The field type in a select or filter.
         * @enum {string}
         */
        FieldType: "input" | "contract_label" | "contract_name" | "contract_address" | "contract_address_label" | "block_number" | "triggered_at" | "event_signature" | "block_hash" | "tx_hash" | "tx_from";
        /**
         * EventQueryField
         * @description A single event field's query information.
         */
        EventQueryField: {
            type: components["schemas"]["FieldType"];
            /** @description The field name. Either `name` or `inputIndex` is required if `fieldType == "input"`. */
            name?: string;
            /**
             * Format: int64
             * @description The field's index, can be used in place of `name`.
             */
            inputIndex?: number | null;
            /** @description The name that will be used to return the field. */
            alias?: string;
            /**
             * @description The type of aggregation to perform on the field.
             * @enum {string|null}
             */
            aggregator?: "add" | "subtract" | "last" | "first" | "min" | "max" | null;
        };
        /**
         * EventQueryFilter
         * @description A event query filter.
         */
        EventQueryFilter: {
            /**
             * @description The rule type, can be omitted if this is the last filter to be applied.
             * @enum {string}
             */
            rule?: "and" | "or";
            fieldType?: components["schemas"]["FieldType"];
            /**
             * Format: int64
             * @description The field's index, can be used in place of `name`.
             */
            inputIndex?: number | null;
            /**
             * @description The operator on the filter.
             * @enum {string}
             */
            operator?: "equal" | "notequal" | "lessthan" | "greaterthan" | "lessthanorequal" | "greaterthanorequal";
            /** @description The value to be compared with. */
            value?: string;
            /** @description Other filters to be applied in succession with the rule specified. */
            children?: components["schemas"]["EventQueryFilter"][];
        };
        /**
         * EventQueryEvent
         * @description A query on a single event.
         */
        EventQueryEvent: {
            /** @description The name of an event. */
            eventName: string;
            /** @description The query information about all the fields to select from an event. */
            select: components["schemas"]["EventQueryField"][];
            filter?: components["schemas"]["EventQueryFilter"];
        };
        /**
         * EventQuery
         * @description An event query.
         */
        EventQuery: {
            events: components["schemas"]["EventQueryEvent"][];
            /** @description The results will be grouped according to this field. An aggregator for non Group By fields must be specified if groupBy is specified. */
            groupBy?: string;
            /** @description The results will be ordered according to this field. */
            orderBy?: string;
            /**
             * @description Specify ascending or descending order, the default is "ASC".
             * @enum {string}
             */
            order?: "ASC" | "DESC";
        };
        /**
         * SavedEventQuery
         * @description A saved event query.
         */
        SavedEventQuery: {
            /** Format: int64 */
            id: number;
            label: components["schemas"]["EventQueryLabel"];
            query: components["schemas"]["EventQuery"];
            /** @description Specifies if this a system-generated query which is not modifiable by the user. */
            isSystem: boolean;
        };
        /**
         * EventQueryResults
         * @description Results of an executed event query.
         */
        EventQueryResults: {
            rows: {
                [key: string]: unknown;
            }[];
        };
        /** WalletTransaction */
        WalletTransaction: {
            tx: components["schemas"]["Transaction"];
            status: components["schemas"]["TransactionStatus"];
            from: components["schemas"]["ETHAddress"];
            /**
             * Format: int64
             * @description The total number of resubmission attempts.
             */
            resubmissionAttempts: number;
            /**
             * Format: int64
             * @description The total number of successful resubmission (added into the transaction pool).
             */
            successfulResubmissions: number;
            /**
             * Format: date-time
             * @description The time the transaction was created.
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description The time the transaction was last updated.
             */
            updatedAt: string;
            /** @description Whether the transaction failed when it was included in a block. */
            failed?: boolean;
            /**
             * Format: int64
             * @description The block number that the transaction was included in.
             */
            blockNumber?: number;
            blockHash?: components["schemas"]["Keccak256Hash"];
        };
        /** BaseWebhookEndpoint */
        BaseWebhookEndpoint: {
            /** @description The URL to send the webhook to. */
            url: string;
            label: components["schemas"]["Label"];
            /** @description The events to subscribe to. */
            subscriptions: components["schemas"]["WebhookEventsType"][];
        };
        /** WebhookEndpoint */
        WebhookEndpoint: components["schemas"]["BaseWebhookEndpoint"] & {
            /** Format: int64 */
            id: number;
            /**
             * Format: date-time
             * @description The time the next attempt will be made.
             */
            nextAttempt?: string;
            /**
             * Format: date-time
             * @description The time the last attempt was made.
             */
            lastAttempt?: string;
            /**
             * Format: int64
             * @description The number of failed webhook endpoint calls since the last successful call.
             */
            failedCalls: number;
            /** @description The last error received from the webhook endpoint. */
            lastError?: string;
            /**
             * Format: date-time
             * @description The time the webhook was created.
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description The time the webhook was last updated.
             */
            updatedAt: string;
            /** @description The secret key used to sign the webhook. */
            secret: string;
        };
        /** WebhookEvent */
        WebhookEvent: {
            /**
             * Format: int64
             * @description The ID of the webhook event.
             */
            id: number;
            eventType: components["schemas"]["WebhookEventsType"];
            /** @description The data associated with the event. */
            data: Record<string, never>;
            /**
             * Format: date-time
             * @description The time the webhook event was created.
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description The time the webhook event was last updated.
             */
            deliveredAt?: string;
        };
        /**
         * WebhookEventsType
         * @description The type of the webhook event.
         * @enum {string}
         */
        WebhookEventsType: "transaction.included" | "event.emitted";
        /** @description Standard response. */
        BaseResponse: {
            /**
             * Format: int64
             * @description The status code.
             */
            status: number;
            /** @description The human-readable status message. */
            message: string;
        };
        /**
         * @description An error response.
         * @example {
         *       "status": 404,
         *       "message": "Blockchain Not Found"
         *     }
         */
        Error: {
            /**
             * Format: int64
             * @description The unique error code.
             */
            status: number;
            /** @description The human-readable error message. */
            message: string;
        };
        /**
         * ETHAddress
         * @description An ethereum address.
         */
        ETHAddress: string;
        /**
         * ETHAddressOrNull
         * @description An ethereum address.
         */
        ETHAddressOrNull: string | null;
        /**
         * Hex
         * @description The smart-contract bytecode.
         */
        ByteCode: string;
        /**
         * Hex
         * @description A hex string.
         */
        Hex: string;
        /**
         * HexOrNull
         * @description A hex string or null.
         */
        HexOrNull: string | null;
        /**
         * Keccak256Hash
         * @description The keccak256 hash as a hex string of 256 bits.
         */
        Keccak256Hash: string;
        /**
         * Label
         * @description An alias to easily identify and reference the entity in subsequent requests.
         */
        Label: string;
        /**
         * EventQueryLabel
         * @description An event query label.
         */
        EventQueryLabel: string;
        /**
         * ContractVersion
         * @description The contract version.
         */
        ContractVersion: string;
        /**
         * ContractName
         * @description The name of the contract.
         */
        ContractName: string;
        /**
         * PaginationLimit
         * Format: int64
         * @description Specify the number of records that should be returned.
         */
        PaginationLimit: number;
        /**
         * PaginationOffset
         * Format: int64
         * @description Specify the number of records that need to be skipped.
         */
        PaginationOffset: number;
        /**
         * TransactionStatus
         * @description The status of a TXM transaction.
         * @enum {string}
         */
        TransactionStatus: "pending" | "included" | "replaced" | "cancelled" | "rejected" | "exceeded retry limit";
        /**
         * BaseUser
         * @description A user.
         */
        BaseUser: {
            /**
             * Format: email
             * @description The user's email address.
             */
            email: string;
            /** @description The user's name. */
            name: string;
        };
        /**
         * User
         * @description A user.
         */
        User: components["schemas"]["BaseUser"] & {
            /**
             * Format: int64
             * @description The user ID.
             */
            id: number;
        };
        /**
         * Invite
         * @description An invite with groups.
         */
        Invite: {
            /**
             * Format: email
             * @description The invitee's email address.
             */
            email: string;
            groupIDs?: number[];
        };
        /**
         * Signer Wallet
         * @description A signer wallet.
         */
        SignerWallet: {
            /**
             * @description The type of the signer.
             * @enum {string}
             */
            type: "web3" | "cloud" | "multisig" | "safe";
            wallet: components["schemas"]["ETHAddress"];
            signer: components["schemas"]["ETHAddress"];
            /** @description The label of the signer. */
            label: string;
        };
        /**
         * Signer Label
         * @description A signer label.
         */
        SignerLabel: {
            /** @description The label of the signer. */
            label: string;
        };
        /**
         * Group
         * @description A group.
         */
        Group: {
            /**
             * Format: int64
             * @description The group ID.
             */
            id: number;
            /** @description The group name. */
            name: string;
            /** @description The group short name. */
            shortName: string;
            /** @description The group description. */
            description: string;
            /** @description The group roles. */
            roles: components["schemas"]["Role"][];
        };
        /**
         * Role
         * @description A role.
         */
        Role: {
            /**
             * Format: int64
             * @description The role ID.
             */
            id: number;
            /** @description The role name. */
            name: string;
            /** @description The role short name. */
            shortName: string;
            /** @description The role description. */
            description: string;
        };
        /**
         * AuditLog
         * @description An audit log entry.
         */
        AuditLog: {
            /**
             * Format: int64
             * @description The ID of the user who performed the action.
             */
            actionByID: number;
            /**
             * Format: int64
             * @description The ID of the user who was acted upon.
             */
            actionOnID?: number;
            /**
             * Format: email
             * @description The email of the user who performed the action.
             */
            actionByUserEmail: string;
            /**
             * Format: email
             * @description The email of the user who was acted upon.
             */
            actionOnUserEmail?: string;
            /** @description The type of action that was performed. */
            type: string;
            /**
             * Format: date-time
             * @description The time the action was performed.
             */
            createdAt: string;
            /** @description The data associated with the action. */
            activityData: Record<string, never>;
        };
    };
    responses: {
        /** @description Client error. */
        ClientError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Server error. */
        ServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        /** @description An address or the label of an address. */
        AddressOrLabel: string;
        /** @description A block number, hash or 'latest' for the latest block. */
        BlockRef: string;
        /** @description The blockchain chain label. */
        ChainParam: components["schemas"]["ChainName"];
        /** @description The HSM client ID. */
        ClientID: string;
        ContractLabel: components["schemas"]["Label"];
        /** @description Contract Version. */
        ContractVersion: string;
        /** @description An Ethereum address. */
        ETHAddress: components["schemas"]["ETHAddress"];
        /** @description Contract function. */
        Method: string;
        /** @description Contract Event. */
        Event: string;
        /** @description An event query label. */
        EventQueryLabel: components["schemas"]["EventQueryLabel"];
        /** @description Transaction hash. */
        TransactionHash: components["schemas"]["Hex"];
        PaginationOffset: components["schemas"]["PaginationOffset"];
        PaginationLimit: components["schemas"]["PaginationLimit"];
        /** @description Transaction nonce. */
        Nonce: number;
        UserID: number;
        GroupID: number;
        APIKeyID: number;
        CORSOriginID: number;
        RoleShortName: string;
        GroupIDFilter: number;
        UserIDFilter: number;
        ApiKeyIDFilter: number;
        AssignableRoleFlag: boolean;
        InviteID: string;
        WebhookID: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "list-api-keys": {
        parameters: {
            query?: {
                /** @description If true, returns all API keys on the system, otherwise, returns only the API keys owned by the calling user. */
                all?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["APIKey"][];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "create-api-key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BaseAPIKey"] & {
                    groupIDs?: number[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["APIKeyWithSecret"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "get-api-key": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                apiKeyID: components["parameters"]["APIKeyID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["APIKey"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "update-api-key": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                apiKeyID: components["parameters"]["APIKeyID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BaseAPIKey"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "delete-api-key": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                apiKeyID: components["parameters"]["APIKeyID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "invite-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Invite"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "check-invite": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                inviteID: components["parameters"]["InviteID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "accept-invite": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                inviteID: components["parameters"]["InviteID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: JWT
                     * @description The user ID Token
                     */
                    idToken?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["User"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "transfer-eth": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostMethodArgs"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["TransactionToSign"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "submit-signed-transaction": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignedTransactionSubmission"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["SignedTransactionResponse"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "get-transaction": {
        parameters: {
            query?: {
                /** @description Include contract and method call details, if available. */
                include?: "contract";
            };
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description Transaction hash. */
                hash: components["parameters"]["TransactionHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["TransactionData"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "get-transaction-receipt": {
        parameters: {
            query?: {
                /** @description Include contract and event details, if available. */
                include?: "contract";
            };
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description Transaction hash. */
                hash: components["parameters"]["TransactionHash"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["TransactionReceipt"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "get-chain-status": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["ChainStatus"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "get-block": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description A block number, hash or 'latest' for the latest block. */
                block: components["parameters"]["BlockRef"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["Block"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "list-addresses": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["AddressLabel"][];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "set-address": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddressLabel"];
            };
        };
        responses: {
            /** @description OK */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["Address"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "get-address": {
        parameters: {
            query?: {
                /** @description Optional data to fetch from the blockchain:
                 *     - `balance` to get the balance of this address.
                 *     - `code` to get the code at this address.
                 *     - `nonce` to get the next available transaction nonce for this address.
                 *     - `contractLookup` to get the contract(s) details for this address.
                 *      */
                include?: ("balance" | "code" | "nonce" | "contractLookup")[];
            };
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description An address or the label of an address. */
                "address-or-label": components["parameters"]["AddressOrLabel"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["Address"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "delete-address": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description An address or the label of an address. */
                "address-or-label": components["parameters"]["AddressOrLabel"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "link-address-contract": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description An address or the label of an address. */
                "address-or-label": components["parameters"]["AddressOrLabel"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    label: components["schemas"]["Label"];
                    version?: components["schemas"]["ContractVersion"];
                    /** @description The block number from which to start syncing events. The value can be `latest` for the latest block number, an absolute block number (e.g. `123` for the block number 123), or a relative block number (e.g. `-100` for 100 blocks before the latest block). If absent, the event monitor will be disabled for this contract and events won't be synced. */
                    startingBlock?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["Address"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "unlink-address-contract": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description An address or the label of an address. */
                "address-or-label": components["parameters"]["AddressOrLabel"];
                contract: components["parameters"]["ContractLabel"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["Address"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "get-event-monitor-status": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description An address or the label of an address. */
                "address-or-label": components["parameters"]["AddressOrLabel"];
                contract: components["parameters"]["ContractLabel"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["EventMonitorStatus"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "call-contract-function": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description An address or the label of an address. */
                "address-or-label": components["parameters"]["AddressOrLabel"];
                contract: components["parameters"]["ContractLabel"];
                /** @description Contract function. */
                method: components["parameters"]["Method"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostMethodArgs"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["TransactionToSignResponse"] | components["schemas"]["MethodCallResponse"] | components["schemas"]["MethodCallPreviewResponse"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "sign-data": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HSMSignRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["HSMSignResponse"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "sign-and-submit-transaction": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BaseTransactionToSign"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["TransactionToSign"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "set-local-nonce": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description An Ethereum address. */
                wallet_address: components["parameters"]["ETHAddress"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetNonceRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "list-contracts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["ContractOverview"][];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "create-contracts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BaseContract"][];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "get-contract": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract: components["parameters"]["ContractLabel"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["Contract"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "create-contract": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract: components["parameters"]["ContractLabel"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BaseContract"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["Contract"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "delete-contract": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract: components["parameters"]["ContractLabel"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "deploy-contract": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract: components["parameters"]["ContractLabel"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostMethodArgs"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["DeployContractTransaction"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "list-contract-versions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract: components["parameters"]["ContractLabel"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: {
                            label: components["schemas"]["Label"];
                            versions: components["schemas"]["ContractVersion"][];
                        };
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "get-contract-versions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract: components["parameters"]["ContractLabel"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["Contract"][];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "get-contract-version": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract: components["parameters"]["ContractLabel"];
                /** @description Contract Version. */
                version: components["parameters"]["ContractVersion"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["Contract"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "delete-contract-version": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract: components["parameters"]["ContractLabel"];
                /** @description Contract Version. */
                version: components["parameters"]["ContractVersion"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "deploy-contract-version": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract: components["parameters"]["ContractLabel"];
                /** @description Contract Version. */
                version: components["parameters"]["ContractVersion"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostMethodArgs"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["DeployContractTransaction"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "get-function-type-conversions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract: components["parameters"]["ContractLabel"];
                /** @description Contract Version. */
                version: components["parameters"]["ContractVersion"];
                /** @description Contract function. */
                method: components["parameters"]["Method"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["MethodTypeConversionOptions"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "set-function-type-conversions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract: components["parameters"]["ContractLabel"];
                /** @description Contract Version. */
                version: components["parameters"]["ContractVersion"];
                /** @description Contract function. */
                method: components["parameters"]["Method"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContractMethodOptions"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "get-event-type-conversions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract: components["parameters"]["ContractLabel"];
                /** @description Contract Version. */
                version: components["parameters"]["ContractVersion"];
                /** @description Contract Event. */
                event: components["parameters"]["Event"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["EventTypeConversionOptions"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "set-event-type-conversions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract: components["parameters"]["ContractLabel"];
                /** @description Contract Version. */
                version: components["parameters"]["ContractVersion"];
                /** @description Contract Event. */
                event: components["parameters"]["Event"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContractEventOptions"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "list-cors-origins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["CORSOrigin"][];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "add-cors-origin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CORSOrigin"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "remove-cors-origin": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                originID: components["parameters"]["CORSOriginID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "list-events": {
        parameters: {
            query?: {
                /** @description Filter events by a block hash. */
                block_hash?: components["schemas"]["Keccak256Hash"];
                /** @description Filter events by a block number. */
                block_number?: number;
                /** @description Filter events by a transaction's index in the block. */
                tx_index_in_block?: number;
                /** @description Filter events by index in the log. */
                event_index_in_log?: number;
                /** @description Filter events by a transaction hash. */
                tx_hash?: components["schemas"]["Keccak256Hash"];
                /** @description Filter events by whether they were emitted from the constructor function. */
                from_constructor?: boolean;
                /** @description Filter events by a chain name. */
                chain?: components["schemas"]["ChainName"];
                /** @description Filter events by a contract address. */
                contract_address?: components["schemas"]["ETHAddress"];
                /** @description Filter events by a contract label. */
                contract_label?: components["schemas"]["Label"];
                /** @description Filter events by the signature. */
                event_signature?: string;
                limit?: components["parameters"]["PaginationLimit"];
                offset?: components["parameters"]["PaginationOffset"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["Event"][];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "get-event-count": {
        parameters: {
            query?: {
                /** @description Filter events by a block hash. */
                block_hash?: components["schemas"]["Keccak256Hash"];
                /** @description Filter events by a block number. */
                block_number?: number;
                /** @description Filter events by a transaction's index in the block. */
                tx_index_in_block?: number;
                /** @description Filter events by index in the log. */
                event_index_in_log?: number;
                /** @description Filter events by a transaction hash. */
                tx_hash?: components["schemas"]["Keccak256Hash"];
                /** @description Filter events by whether they were emitted from the constructor function. */
                from_constructor?: boolean;
                /** @description Filter events by a chain name. */
                chain?: components["schemas"]["ChainName"];
                /** @description Filter events by a contract address. */
                contract_address?: components["schemas"]["ETHAddress"];
                /** @description Filter events by a contract label. */
                contract_label?: components["schemas"]["Label"];
                /** @description Filter events by the signature. */
                event_signature?: string;
                limit?: components["parameters"]["PaginationLimit"];
                offset?: components["parameters"]["PaginationOffset"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        /**
                         * Format: int64
                         * @description The number of events.
                         */
                        result: number;
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "list-hsm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["HSMData"][];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "list-hsm-wallets": {
        parameters: {
            query?: {
                /** @description Filter wallets by a key name. */
                key_name?: components["schemas"]["AzureKeyName"];
                /** @description Filter wallets by a key version. */
                key_version?: components["schemas"]["AzureKeyVersion"];
                /** @description Filter wallets by a vault name. */
                vault_name?: string;
                /** @description Filter wallets by a base group name. */
                base_group_name?: string;
                /** @description Filter wallets by a client ID. */
                client_id?: string;
                /** @description Filter wallets by a public address. */
                public_address?: components["schemas"]["ETHAddress"];
                limit?: components["parameters"]["PaginationLimit"];
                offset?: components["parameters"]["PaginationOffset"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["StandaloneWallet"][];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "add-hsm-key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddKey"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "remove-hsm-key": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An Ethereum address. */
                wallet_address: components["parameters"]["ETHAddress"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "create-hsm-key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateKey"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["AzureWallet"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "add-hsm-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BaseAzureAccount"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "remove-hsm-config": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The HSM client ID. */
                client_id: components["parameters"]["ClientID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "list-event-queries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["SavedEventQuery"][];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "execute-arbitrary-event-query": {
        parameters: {
            query?: {
                offset?: components["parameters"]["PaginationOffset"];
                limit?: components["parameters"]["PaginationLimit"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventQuery"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["EventQueryResults"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "get-event-query": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An event query label. */
                event_query: components["parameters"]["EventQueryLabel"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["EventQuery"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "set-event-query": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An event query label. */
                event_query: components["parameters"]["EventQueryLabel"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventQuery"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "delete-event-query": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An event query label. */
                event_query: components["parameters"]["EventQueryLabel"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "execute-event-query": {
        parameters: {
            query?: {
                offset?: components["parameters"]["PaginationOffset"];
                limit?: components["parameters"]["PaginationLimit"];
            };
            header?: never;
            path: {
                /** @description An event query label. */
                event_query: components["parameters"]["EventQueryLabel"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["EventQueryResults"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "count-event-query-records": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An event query label. */
                event_query: components["parameters"]["EventQueryLabel"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        /**
                         * Format: int64
                         * @description The record count.
                         */
                        result: number;
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "list-wallet-transactions": {
        parameters: {
            query?: {
                /** @description Filter transactions by transaction hash. To filter for multiple hashes, use ampersands: `?hash=HASH1&hash=HASH2&hash=HASH3` */
                hash?: components["schemas"]["Keccak256Hash"];
                /** @description Filter transactions by nonce */
                nonce?: number;
                /** @description Filter transactions by status */
                status?: components["schemas"]["TransactionStatus"];
                limit?: components["parameters"]["PaginationLimit"];
                offset?: components["parameters"]["PaginationOffset"];
            };
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description An Ethereum address. */
                wallet_address: components["parameters"]["ETHAddress"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["WalletTransaction"][];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "count-wallet-transactions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description An Ethereum address. */
                wallet_address: components["parameters"]["ETHAddress"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        /**
                         * Format: int64
                         * @description The transaction count.
                         */
                        result: number;
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "cancel-transaction": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description An Ethereum address. */
                wallet_address: components["parameters"]["ETHAddress"];
                /** @description Transaction nonce. */
                nonce: components["parameters"]["Nonce"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GasParams"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["TransactionToSign"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "speed-up-transaction": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The blockchain chain label. */
                chain: components["parameters"]["ChainParam"];
                /** @description An Ethereum address. */
                wallet_address: components["parameters"]["ETHAddress"];
                /** @description Transaction nonce. */
                nonce: components["parameters"]["Nonce"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GasParams"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["TransactionToSign"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "list-webhooks": {
        parameters: {
            query?: {
                limit?: components["parameters"]["PaginationLimit"];
                offset?: components["parameters"]["PaginationOffset"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["WebhookEndpoint"][];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "create-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BaseWebhookEndpoint"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["WebhookEndpoint"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "count-webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        /**
                         * Format: int64
                         * @description The webhook count.
                         */
                        result: number;
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "get-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                webhookID: components["parameters"]["WebhookID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["WebhookEndpoint"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "update-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                webhookID: components["parameters"]["WebhookID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BaseWebhookEndpoint"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["WebhookEndpoint"];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "delete-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                webhookID: components["parameters"]["WebhookID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "list-webhook-events": {
        parameters: {
            query?: {
                limit?: components["parameters"]["PaginationLimit"];
                offset?: components["parameters"]["PaginationOffset"];
            };
            header?: never;
            path: {
                webhookID: components["parameters"]["WebhookID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["WebhookEvent"][];
                    };
                };
            };
        };
    };
    "count-webhook-events": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                webhookID: components["parameters"]["WebhookID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        /**
                         * Format: int64
                         * @description The number of webhook events.
                         */
                        result: number;
                    };
                };
            };
        };
    };
    "list-users": {
        parameters: {
            query?: {
                groupID?: components["parameters"]["GroupIDFilter"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["User"][];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "delete-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userID: components["parameters"]["UserID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "list-user-signers": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userID: components["parameters"]["UserID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["SignerWallet"][];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "set-user-signer-web3-wallet": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userID: components["parameters"]["UserID"];
                /** @description An Ethereum address. */
                wallet_address: components["parameters"]["ETHAddress"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignerLabel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "remove-user-signer-web3-wallet": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userID: components["parameters"]["UserID"];
                /** @description An Ethereum address. */
                wallet_address: components["parameters"]["ETHAddress"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "set-user-signer-cloud-wallet": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userID: components["parameters"]["UserID"];
                /** @description An Ethereum address. */
                wallet_address: components["parameters"]["ETHAddress"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "remove-user-signer-cloud-wallet": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userID: components["parameters"]["UserID"];
                /** @description An Ethereum address. */
                wallet_address: components["parameters"]["ETHAddress"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "set-user-signer-safe-account": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userID: components["parameters"]["UserID"];
                /** @description An Ethereum address. */
                wallet_address: components["parameters"]["ETHAddress"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignerLabel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "remove-user-signer-safe-account": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userID: components["parameters"]["UserID"];
                /** @description An Ethereum address. */
                wallet_address: components["parameters"]["ETHAddress"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "list-groups": {
        parameters: {
            query?: {
                userID?: components["parameters"]["UserIDFilter"];
                apiKeyID?: components["parameters"]["ApiKeyIDFilter"];
                assignable?: components["parameters"]["AssignableRoleFlag"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["Group"][];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "add-group-role": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupID: components["parameters"]["GroupID"];
                roleShortName: components["parameters"]["RoleShortName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "remove-group-role": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupID: components["parameters"]["GroupID"];
                roleShortName: components["parameters"]["RoleShortName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "add-group-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupID: components["parameters"]["GroupID"];
                userID: components["parameters"]["UserID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "remove-group-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupID: components["parameters"]["GroupID"];
                userID: components["parameters"]["UserID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "add-group-api-key": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupID: components["parameters"]["GroupID"];
                apiKeyID: components["parameters"]["APIKeyID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "remove-group-api-key": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupID: components["parameters"]["GroupID"];
                apiKeyID: components["parameters"]["APIKeyID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"];
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
    "list-audit-logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseResponse"] & {
                        result: components["schemas"]["AuditLog"][];
                    };
                };
            };
            "4XX": components["responses"]["ClientError"];
            "5XX": components["responses"]["ServerError"];
        };
    };
}
