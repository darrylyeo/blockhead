/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1.0/details/{chain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns details for native token */
        get: operations["DetailsController_getChainInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.0/details/{chain}/{contractAddress}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns details for token */
        get: operations["DetailsController_getInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.0/charts/range/{chain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns historical native chain token prices at USD by time range */
        get: operations["ChartsController_getNativeTokenChartByRange"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.0/charts/range/{chain}/{tokenAddress}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns historical token prices at USD by time range */
        get: operations["ChartsController_getTokenChartByRange"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.0/charts/interval/{chain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns historical native chain token prices at USD by time interval */
        get: operations["ChartsController_getNativeTokenChartByInterval"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.0/charts/interval/{chain}/{tokenAddress}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns historical token prices at USD by time interval */
        get: operations["ChartsController_getTokenChartByInterval"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.0/prices/change/{chain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns native token price change by interval */
        get: operations["PricesController_getNativeTokenPriceByInterval"];
        put?: never;
        /** Returns token price change by interval for a list of tokens */
        post: operations["PricesController_getTokenListPriceByInterval"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.0/prices/change/{chain}/{tokenAddress}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns token price change by interval */
        get: operations["PricesController_getTokenPriceByInterval"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        SocialLink: {
            name: string;
            url: string;
            handle: string;
        };
        AssetsResponse: {
            name: string;
            website: string;
            sourceCode: string;
            whitePaper: string;
            description: string;
            shortDescription: string;
            research: string;
            explorer: string;
            social_links: components["schemas"]["SocialLink"];
        };
        DetailsResponse: {
            provider: string;
            providerURL: string;
            vol24: number;
            marketCap: number;
            circulatingSupply: number;
            totalSupply: number;
        };
        InfoDataResponse: {
            assets: components["schemas"]["AssetsResponse"];
            details: components["schemas"]["DetailsResponse"];
        };
        ChartPointResponse: {
            /** @description unix time at sec */
            t: number;
            /** @description price at usd */
            v: number;
        };
        ChartDataResponse: {
            /** @description Chart data */
            d: components["schemas"]["ChartPointResponse"][];
            /** @description Chart provider (optional) */
            p: string;
        };
        TokenPriceChangeResponseDto: {
            inUSD: number;
            inPercent: number;
        };
        GetTokenListPriceRequestDto: {
            /**
             * @description Addresses of token contracts
             * @example [
             *       "0x111111111117dC0aa78b770fA6A738034120C302",
             *       "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
             *     ]
             */
            tokenAddresses: string[];
            /**
             * @description Time interval for price change
             * @example 24h
             * @enum {string}
             */
            interval: "5m" | "10m" | "15m" | "30m" | "50m" | "1h" | "2h" | "3h" | "4h" | "6h" | "12h" | "24h" | "2d" | "3d" | "7d" | "14d" | "15d" | "30d" | "60d" | "90d" | "365d" | "max";
        };
        TokenListPriceChangeResponseDto: {
            tokenAddress: string;
            inUSD: number;
            inPercent: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    DetailsController_getChainInfo: {
        parameters: {
            query?: {
                /** @description name of chart provider (optional) */
                provider?: "coinmarketcap" | "coingecko";
            };
            header?: never;
            path: {
                /**
                 * @description Chain id of network
                 * @example 1
                 */
                chain: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return token info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InfoDataResponse"];
                };
            };
            /** @description Fatal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DetailsController_getInfo: {
        parameters: {
            query?: {
                /** @description name of chart provider (optional) */
                provider?: "coinmarketcap" | "coingecko";
            };
            header?: never;
            path: {
                /**
                 * @description Chain id of network
                 * @example 1
                 */
                chain: number;
                /**
                 * @description Address of contract
                 * @example 0x111111111117dC0aa78b770fA6A738034120C302
                 */
                contractAddress: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return token info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InfoDataResponse"];
                };
            };
            /** @description Fatal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChartsController_getNativeTokenChartByRange: {
        parameters: {
            query: {
                /**
                 * @description unix time at sec
                 * @example 1622200267
                 */
                from: number;
                /**
                 * @description unix time at sec
                 * @example 1622203867
                 */
                to: number;
                /** @description name of chart provider (optional) */
                provider?: "coinmarketcap" | "coingecko" | "quantor";
                /**
                 * @description from time (optional)
                 * @example 1658841720
                 */
                from_time?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Chain id of network
                 * @example 1
                 */
                chain: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return chart data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChartDataResponse"];
                };
            };
            /** @description Fatal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChartsController_getTokenChartByRange: {
        parameters: {
            query: {
                /**
                 * @description unix time at sec
                 * @example 1622200267
                 */
                from: number;
                /**
                 * @description unix time at sec
                 * @example 1622203867
                 */
                to: number;
                /** @description name of chart provider (optional) */
                provider?: "coinmarketcap" | "coingecko" | "quantor";
                /**
                 * @description from time (optional)
                 * @example 1658841720
                 */
                from_time?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Chain id of network
                 * @example 1
                 */
                chain: number;
                /**
                 * @description Address of token contract
                 * @example 0x111111111117dC0aa78b770fA6A738034120C302
                 */
                tokenAddress: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return chart data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChartDataResponse"];
                };
            };
            /** @description Fatal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChartsController_getNativeTokenChartByInterval: {
        parameters: {
            query: {
                /**
                 * @description eg. 24h,3d,14d,max
                 * @example 24h
                 */
                interval: "5m" | "10m" | "15m" | "30m" | "50m" | "1h" | "2h" | "3h" | "4h" | "6h" | "12h" | "24h" | "2d" | "3d" | "7d" | "14d" | "15d" | "30d" | "60d" | "90d" | "365d" | "max";
                /** @description name of chart provider (optional) */
                provider?: "coinmarketcap" | "coingecko" | "quantor";
                /**
                 * @description from time (optional)
                 * @example 1658841720
                 */
                from_time?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Chain id of network
                 * @example 1
                 */
                chain: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return chart data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChartDataResponse"];
                };
            };
            /** @description Fatal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChartsController_getTokenChartByInterval: {
        parameters: {
            query: {
                /**
                 * @description eg. 24h,3d,14d,max
                 * @example 24h
                 */
                interval: "5m" | "10m" | "15m" | "30m" | "50m" | "1h" | "2h" | "3h" | "4h" | "6h" | "12h" | "24h" | "2d" | "3d" | "7d" | "14d" | "15d" | "30d" | "60d" | "90d" | "365d" | "max";
                /** @description name of chart provider (optional) */
                provider?: "coinmarketcap" | "coingecko" | "quantor";
                /**
                 * @description from time (optional)
                 * @example 1658841720
                 */
                from_time?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Chain id of network
                 * @example 1
                 */
                chain: number;
                /**
                 * @description Address of token contract
                 * @example 0x111111111117dC0aa78b770fA6A738034120C302
                 */
                tokenAddress: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return chart data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChartDataResponse"];
                };
            };
            /** @description Fatal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PricesController_getNativeTokenPriceByInterval: {
        parameters: {
            query: {
                /**
                 * @description eg. 24h,3d,14d,max
                 * @example 24h
                 */
                interval: "5m" | "10m" | "15m" | "30m" | "50m" | "1h" | "2h" | "3h" | "4h" | "6h" | "12h" | "24h" | "2d" | "3d" | "7d" | "14d" | "15d" | "30d" | "60d" | "90d" | "365d" | "max";
            };
            header?: never;
            path: {
                /**
                 * @description Chain id of network
                 * @example 1
                 */
                chain: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return chart data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenPriceChangeResponseDto"];
                };
            };
            /** @description Fatal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PricesController_getTokenListPriceByInterval: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Chain id of network
                 * @example 1
                 */
                chain: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetTokenListPriceRequestDto"];
            };
        };
        responses: {
            /** @description Token price changes over the given interval */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenListPriceChangeResponseDto"][];
                };
            };
            /** @description If data format is invalid or there are validation errors */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description If one or more tokens were not found in the price listings */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Fatal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PricesController_getTokenPriceByInterval: {
        parameters: {
            query: {
                /**
                 * @description eg. 24h,3d,14d,max
                 * @example 24h
                 */
                interval: "5m" | "10m" | "15m" | "30m" | "50m" | "1h" | "2h" | "3h" | "4h" | "6h" | "12h" | "24h" | "2d" | "3d" | "7d" | "14d" | "15d" | "30d" | "60d" | "90d" | "365d" | "max";
            };
            header?: never;
            path: {
                /**
                 * @description Chain id of network
                 * @example 1
                 */
                chain: number;
                /**
                 * @description Address of token contract
                 * @example 0x111111111117dC0aa78b770fA6A738034120C302
                 */
                tokenAddress: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return chart data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenPriceChangeResponseDto"];
                };
            };
            /** @description Fatal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
