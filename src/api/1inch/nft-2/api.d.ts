/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/supportedchains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns supported chains */
        get: operations["DevPortalController_supportedChain"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/byaddress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns nfts from api poap, rarible, opensea */
        get: operations["getNftsByAddress"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AssetContract: {
            /** @description on chain address of the contract */
            address: string;
            /** @description describes whether a contract is fungible or non-fungible */
            asset_contract_type: string;
            /** Format: date-time */
            created_date: string;
            /** @description name of the contract */
            name: string;
            nft_version: string;
            opensea_version: Record<string, never>;
            owner: string;
            /** @description types of tokens supported by the contract (ex. ERC721) */
            schema_name: string;
            symbol: string;
            total_supply: string;
            /** @description 	description of the contract */
            description: string;
            /** @description external link to the contracts website */
            external_link: string;
            /** @description An image for the item. Note that this is the cached URL we store on our end. The original image url is image_original_url */
            image_url: string;
        };
        Collection: {
            /** @description Image used in the horizontal top banner for the collection */
            banner_image_url: string;
            /** @description Description for the model */
            description: string;
            discord_url: string;
            /** @description External link to the original website for the collection */
            external_url: string;
            /** @description An image for the collection. Note that this is the cached URL we store on our end. The original image url is image_original_url */
            image_url: string;
            /** @description The collection name. Typically derived from the first contract imported to the collection but can be changed by the user */
            name: string;
            telegram_url: string;
            twitter_username: string;
            instagram_username: string;
            wiki_url: Record<string, never>;
            fees: string[];
            slug: Record<string, never>;
        };
        RarityData: {
            /** @description The rarity strategy string identifier. Current value will be "openrarity”. */
            strategy_id: string;
            /** @description The version of the strategy. For “openrarity”, this will be the python package version of the OpenRarity library used to calculate the returned score and rank. */
            strategy_version: string;
            /** @description 	The rank of the asset within the collection, calculated using the rarity strategy defined by strategy_id and strategy_version. */
            rank: number;
            /** @description The rarity score of the asset, calculated using the rarity strategy defined by strategy_id and strategy_version. */
            score: number;
            /**
             * Format: date-time
             * @description The time we calculated rarity data at, as a timestamp in UTC. Note: This may not equal the time a creator has uploaded or changed metadata.
             */
            calculated_at: string;
            /** @description The maximum rank in the collection. Ranking for an asset should be considered the out of <max_rank>. Typically max_rank will be equal to collection supply if all assets have been fully revealed with metadata loaded into opensea system, and every asset has unique ranks.  Before reveal is complete, rarity_data.max_rank < collection.stats.total_supply. */
            max_rank: number;
            /** @description The total tokens in the collection that have non-null traits and was used to calculate rarity data.  This will equal collection.stats.total_supply once Opensea has the revealed trait data for all assets in the collection. */
            tokens_scored: number;
            /** @description A dictionary of other asset features that impact rarity ranking, as returned by OpenRarity.  Currently only has "unique_attribute_count" field, which contains the number of unique attributes the asset has. */
            ranking_features: Record<string, never>;
        };
        Asset: {
            /** @description The token ID of the NFT */
            id: number;
            /**
             * @description provider of NFT
             * @enum {string}
             */
            provider: "OPENSEA" | "RARIBLE" | "POAP";
            animation_original_url: string;
            /** @description Name of the item */
            name: string;
            description: string;
            external_link: string;
            asset_contract: components["schemas"]["AssetContract"];
            /** @description A list of traits associated with the item (see traits section) */
            traits: string[];
            /** @description priority of NFT if "zero" it should display first */
            priority: number;
            /** @description The token ID of the NFT */
            token_id?: string;
            num_sales?: number;
            /** @description The background color to be displayed with the item */
            background_color?: Record<string, never>;
            image_url?: string;
            image_preview_url?: string;
            image_thumbnail_url?: string;
            image_original_url?: string;
            animation_url?: string;
            permalink?: string;
            collection?: components["schemas"]["Collection"];
            decimals?: Record<string, never>;
            token_metadata?: string;
            is_nsfw?: boolean;
            owner?: string;
            seaport_sell_orders?: Record<string, never>;
            creator?: Record<string, never>;
            /** @description When this item was last sold (null if there was no last sale) */
            last_sale?: Record<string, never>;
            top_bid?: Record<string, never>;
            listing_date?: Record<string, never>;
            supports_wyvern?: boolean;
            rarity_data?: components["schemas"]["RarityData"];
            transfer_fee?: Record<string, never>;
            transfer_fee_payment_token?: Record<string, never>;
            /** @description chain id of NFT */
            chainId?: number;
        };
        AssetsResponse: {
            assets: components["schemas"]["Asset"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    DevPortalController_supportedChain: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": "ETHEREUM" | "OPTIMISM" | "KOVAN" | "BINANCE" | "GNOSIS" | "POLYGON" | "FANTOM" | "ZKSYNC" | "KLAYTN" | "BASE" | "ARBITRUM" | "AVALANCHE" | "AURORA" | 1 | 45 | 137 | 10 | 56 | 42161 | 43114 | 100 | 250 | 1313161554 | 8217 | 324 | 8453;
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getNftsByAddress: {
        parameters: {
            query: {
                /** @description List of chainIds, right now supported only ethereum & gnosis */
                chainIds: (1 | 45 | 137 | 10 | 56 | 42161 | 43114 | 100 | 250 | 1313161554 | 8217 | 324 | 8453)[];
                /** @description web3 address of owner NFTS */
                address: string;
                /** @description The maximum number of api to return */
                limit?: number;
                /** @description The offset number of api to return */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssetsResponse"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
