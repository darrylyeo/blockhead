/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v2.0/1/order/submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit a limit order that resolvers will be able to fill */
        post: operations["RelayerController_submit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2.0/1/order/submit/many": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit a list of limit orders which resolvers will be able to fill */
        post: operations["RelayerController_submitMany"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        OrderInput: {
            salt: string;
            /** @description Address of the maker asset */
            makerAsset: string;
            /** @description Address of the taker asset */
            takerAsset: string;
            /** @description An address of the maker (wallet or contract address) */
            maker: string;
            /**
             * @description An address of the wallet or contract who will receive filled amount
             * @default 0x0000000000000000000000000000000000000000
             */
            receiver: string;
            /** @description Order maker's token amount */
            makingAmount: string;
            /** @description Order taker's token amount */
            takingAmount: string;
            /**
             * @description Includes some flags like, allow multiple fills, is partial fill allowed or not, price improvement, nonce, deadline etc
             * @default 0
             */
            makerTraits: string;
        };
        SignedOrderInput: {
            order: components["schemas"]["OrderInput"];
            /** @description Signature of the gasless order typed data (using signTypedData_v4) */
            signature: string;
            /**
             * @description An interaction call data. ABI encoded set of makerAssetSuffix, takerAssetSuffix, makingAmountGetter, takingAmountGetter, predicate, permit, preInteraction, postInteraction.Lowest 160 bits of the order salt must be equal to the lowest 160 bits of the extension hash
             * @default 0x
             */
            extension: string;
            /** @description Quote id of the quote with presets */
            quoteId: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    RelayerController_submit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignedOrderInput"];
            };
        };
        responses: {
            /** @description The gasless order has been successfully saved */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Input data is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        statusCode?: 400;
                        /** @example 0xbad_address */
                        message?: string;
                        /** @enum {string} */
                        error?: "Bad Request";
                    };
                };
            };
        };
    };
    RelayerController_submitMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignedOrderInput"][];
            };
        };
        responses: {
            /** @description The gasless orders has been successfully saved */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Input data is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        statusCode?: 400;
                        /** @example 0xbad_address */
                        message?: string;
                        /** @enum {string} */
                        error?: "Bad Request";
                    };
                };
            };
        };
    };
}
