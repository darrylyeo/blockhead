/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v2.0/1/order/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get gasless swap active orders */
        get: operations["OrderApiController_getActiveOrders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2.0/1/order/settlement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get actual settlement contract address */
        get: operations["OrderApiController_getSettlementContract"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Meta: {
            totalItems: number;
            itemsPerPage: number;
            totalPages: number;
            currentPage: number;
        };
        FusionOrderV4: {
            /** @description Some unique value. It is necessary to be able to create limit orders with the same parameters (so that they have a different hash), Lowest 160 bits of the order salt must be equal to the lowest 160 bits of the extension hash */
            salt: string;
            /** @description Address of the account creating the order (maker). */
            maker: string;
            /** @description Address of the account receiving the assets (receiver), if different from maker. */
            receiver: string;
            /** @description Identifier of the asset being offered by the maker. */
            makerAsset: string;
            /** @description Identifier of the asset being requested by the maker in exchange. */
            takerAsset: string;
            /** @description Amount of the makerAsset being offered by the maker. */
            makingAmount: string;
            /** @description Amount of the takerAsset being requested by the maker. */
            takingAmount: string;
            /** @description Includes some flags like, allow multiple fills, is partial fill allowed or not, price improvement, nonce, deadline etc. */
            makerTraits: string;
        };
        ActiveOrdersOutput: {
            /** @description i.e 0x806039f5149065924ad52de616b50abff488c986716d052e9c160887bc09e559 */
            orderHash: string;
            /** @description i.e 0x38de7c8c406c8668eec947d59679028c068735e56c8a41bcc5b3dc2d2229dec258424e0f06b189d2b87f9f3d9cdd9edcb7b3be4108bd8605d052c20c84e65ad61c */
            signature: string;
            /**
             * Format: date-time
             * @description Deadline by which the order must be filled.
             */
            deadline: string;
            /**
             * Format: date-time
             * @description Start date of the auction for this order.
             */
            auctionStartDate: string;
            /**
             * Format: date-time
             * @description End date of the auction for this order.
             */
            auctionEndDate: string;
            /** @description Identifier of the quote associated with this order. */
            quoteId: string;
            /** @description Remaining amount of the maker asset that can still be filled. */
            remainingMakerAmount: string;
            /** @description An interaction call data. ABI encoded set of makerAssetSuffix, takerAssetSuffix, makingAmountGetter, takingAmountGetter, predicate, permit, preInteraction, postInteraction.If extension exists then lowest 160 bits of the order salt must be equal to the lowest 160 bits of the extension hash */
            extension: string;
            order: components["schemas"]["FusionOrderV4"];
        };
        GetActiveOrdersOutput: {
            meta: components["schemas"]["Meta"];
            items: components["schemas"]["ActiveOrdersOutput"][];
        };
        SettlementAddressOutput: {
            /** @description actual settlement contract address */
            address: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    OrderApiController_getActiveOrders: {
        parameters: {
            query?: {
                /**
                 * @description Pagination step, default: 1 (page = offset / limit)
                 * @example 1
                 */
                page?: number;
                /**
                 * @description Number of active orders to receive (default: 100, max: 500)
                 * @example 100
                 */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Array of queried active orders */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Input data is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetActiveOrdersOutput"];
                };
            };
        };
    };
    OrderApiController_getSettlementContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettlementAddressOutput"];
                };
            };
        };
    };
}
