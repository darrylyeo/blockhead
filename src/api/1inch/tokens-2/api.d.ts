/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1.2/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search tokens by name or symbol
         * @description Search tokens by name or symbol
         */
        get: operations["SearchController_searchAllChains"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.2/{chain_id}/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search token
         * @description Search token by query in name, symbol and description
         */
        get: operations["SearchController_searchSingleChain"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.2/{chain_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 1inch whitelisted tokens
         * @description Get 1inch whitelisted tokens info
         */
        get: operations["TokenListController_tokens"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.2/{chain_id}/token-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 1inch whitelisted tokens in list format
         * @description Get 1inch whitelisted tokens in list
         */
        get: operations["TokenListController_tokensList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.2/{chain_id}/custom": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get many tokens
         * @description Get tokens info
         */
        get: operations["CustomTokensController_getTokensInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.2/{chain_id}/custom/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single token
         * @description Get token info
         */
        get: operations["CustomTokensController_getTokenInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        TagDto: {
            provider: string;
            value: string;
        };
        TokenDto: {
            chainId: number;
            symbol: string;
            name: string;
            address: string;
            decimals: number;
            logoURI?: string;
            rating: number;
            eip2612?: boolean;
            isFoT?: boolean;
            tags: components["schemas"]["TagDto"][];
            providers: string[];
        };
        ProviderTokenDto: {
            chainId: number;
            symbol: string;
            name: string;
            address: string;
            decimals: number;
            logoURI?: string;
            providers: string[];
            eip2612?: boolean;
            isFoT?: boolean;
            displayedSymbol?: string;
            tags: string[];
        };
        BadRequestErrorDto: {
            /** @example 400 */
            statusCode: number;
            message: string;
            error: string;
        };
        TokenInfoDto: {
            address: string;
            chainId: number;
            decimals: number;
            extensions?: Record<string, never>;
            logoURI: string;
            name: string;
            symbol: string;
            tags: string[];
        };
        VersionDto: {
            major: number;
            minor: number;
            patch: number;
        };
        TokenListResponseDto: {
            keywords: string[];
            logoURI: string;
            name: string;
            tags: {
                [key: string]: components["schemas"]["TagDto"];
            };
            tags_order: string[];
            timestamp: string;
            tokens: components["schemas"]["TokenInfoDto"][];
            version: components["schemas"]["VersionDto"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    SearchController_searchAllChains: {
        parameters: {
            query: {
                /**
                 * @description Text to search for in token address, token symbol, or description
                 * @example 1inch
                 */
                query?: string;
                /**
                 * @description Whether to ignore listed tokens
                 * @example false
                 */
                ignore_listed?: boolean;
                only_positive_rating: boolean;
                /**
                 * @description Maximum number of tokens to return
                 * @example 10
                 */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Search results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenDto"][];
                };
            };
            /** @description Invalid chain ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SearchController_searchSingleChain: {
        parameters: {
            query: {
                /**
                 * @description Text to search for in token address, token symbol, or description
                 * @example 1inch
                 */
                query?: string;
                /**
                 * @description Whether to ignore listed tokens
                 * @example false
                 */
                ignore_listed?: boolean;
                only_positive_rating: boolean;
                /**
                 * @description Maximum number of tokens to return
                 * @example 10
                 */
                limit?: number;
            };
            header?: never;
            path: {
                chain_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Search results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenDto"][];
                };
            };
            /** @description Invalid chain ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TokenListController_tokens: {
        parameters: {
            query?: {
                /**
                 * @description Provider code. Default value is 1inch
                 * @example 1inch
                 */
                provider?: string;
                /**
                 * @description Country code
                 * @example US
                 */
                country?: string;
            };
            header?: never;
            path: {
                chain_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Token info map */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        "0x111111111117dc0aa78b770fa6a738034120c302"?: components["schemas"]["ProviderTokenDto"];
                    };
                };
            };
            /** @description Invalid chain ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorDto"];
                };
            };
        };
    };
    TokenListController_tokensList: {
        parameters: {
            query?: {
                /**
                 * @description Provider code. Default value is "1inch"
                 * @example 1inch
                 */
                provider?: string;
                /**
                 * @description Country code
                 * @example US
                 */
                country?: string;
            };
            header?: never;
            path: {
                chain_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Token list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenListResponseDto"];
                };
            };
            /** @description Invalid chain ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorDto"];
                };
            };
        };
    };
    CustomTokensController_getTokensInfo: {
        parameters: {
            query: {
                addresses: string[];
            };
            header?: never;
            path: {
                chain_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tokens info map */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        "0x111111111117dc0aa78b770fa6a738034120c302"?: components["schemas"]["TokenInfoDto"];
                    };
                };
            };
            /** @description Invalid chain ID or address */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorDto"];
                };
            };
        };
    };
    CustomTokensController_getTokenInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chain_id: number;
                /** @example 0x111111111117dc0aa78b770fa6a738034120c302 */
                address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Token info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenDto"];
                };
            };
            /** @description Invalid chain ID or address */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestErrorDto"];
                };
            };
        };
    };
}
