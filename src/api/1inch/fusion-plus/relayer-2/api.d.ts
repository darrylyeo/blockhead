/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1.0/submit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit a cross chain order that resolvers will be able to fill */
        post: operations["RelayerController_submit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.0/submit/many": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit many cross chain orders that resolvers will be able to fill */
        post: operations["RelayerController_submitMany"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.0/submit/secret": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit a secret for order fill after SrcEscrow and DstEscrow deployed and DstChain finality lock passed */
        post: operations["RelayerController_submitSecrets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        OrderInput: {
            /** @example 42 */
            salt: string;
            /**
             * @description Source chain address of the maker asset
             * @example 0x0000000000000000000000000000000000000001
             */
            makerAsset: string;
            /**
             * @description Destination chain address of the taker asset
             * @example 0x0000000000000000000000000000000000000001
             */
            takerAsset: string;
            /**
             * @description Source chain address of the maker (wallet or contract address)
             * @example 0x0000000000000000000000000000000000000001
             */
            maker: string;
            /**
             * @description Destination chain address of the wallet or contract who will receive filled amount
             * @default 0x0000000000000000000000000000000000000001
             */
            receiver: string;
            /**
             * @description Order maker's token amount
             * @example 100000000000000000000
             */
            makingAmount: string;
            /**
             * @description Order taker's token amount
             * @example 100000000000000000000
             */
            takingAmount: string;
            /**
             * @description Includes some flags like: allow multiple fills, is partial fill allowed or not, price improvement, nonce, deadline etc. See <a href="https://github.com/1inch/limit-order-sdk/blob/master/src/limit-order/maker-traits.ts" target="_blank">maker-traits.ts</a>
             * @default 0
             */
            makerTraits: string;
        };
        SignedOrderInput: {
            order: components["schemas"]["OrderInput"];
            /**
             * @description Source chain id
             * @example 1
             */
            srcChainId: number;
            /** @description Signature of the cross chain order typed data (using signTypedData v4) */
            signature: string;
            /**
             * @description An interaction call data. ABI encoded a set of makerAssetSuffix, takerAssetSuffix, makingAmountGetter, takingAmountGetter, predicate, permit, preInteraction, postInteraction.Lowest 160 bits of the order salt must be equal to the lowest 160 bits of the extension hash. See <a href="https://github.com/1inch/cross-chain-sdk/blob/master/src/cross-chain-order/escrow-extension.ts" target="_blank">escrow-extension.ts</a>>
             * @example 0x
             */
            extension: string;
            /** @description Quote id of the quote with presets */
            quoteId: string;
            /** @description Secret Hashes, required for order with multiple fills allowed. keccak256(secret(idx)) */
            secretHashes?: string[];
        };
        SecretInput: {
            /** @description A secret for the fill hashlock */
            secret: string;
            orderHash: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    RelayerController_submit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignedOrderInput"];
            };
        };
        responses: {
            /** @description The order has been successfully saved */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RelayerController_submitMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string[];
            };
        };
        responses: {
            /** @description The orders has been successfully saved */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RelayerController_submitSecrets: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SecretInput"];
            };
        };
        responses: {
            /** @description The secret has been successfully saved */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
