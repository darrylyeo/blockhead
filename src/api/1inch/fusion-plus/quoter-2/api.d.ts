/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1.0/quote/receive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get quote details based on input data */
        get: operations["QuoterController_getQuote"];
        put?: never;
        /** Get quote with custom preset details */
        post: operations["QuoterController_getQuoteWithCustomPresets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.0/quote/build": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Build order by given quote */
        post: operations["QuoterController_buildQuoteTypedData"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AuctionPoint: {
            delay: number;
            coefficient: number;
        };
        GasCostConfig: {
            gasBumpEstimate: number;
            gasPriceEstimate: string;
        };
        Preset: {
            auctionDuration: number;
            startAuctionIn: number;
            initialRateBump: number;
            auctionStartAmount: string;
            /** @description auction start amount taking into account gas bump */
            startAmount: string;
            auctionEndAmount: string;
            exclusiveResolver: Record<string, never>;
            costInDstToken: string;
            points: components["schemas"]["AuctionPoint"][];
            allowPartialFills: boolean;
            allowMultipleFills: boolean;
            gasCost: components["schemas"]["GasCostConfig"];
            secretsCount: number;
        };
        QuotePresets: {
            fast: components["schemas"]["Preset"];
            medium: components["schemas"]["Preset"];
            slow: components["schemas"]["Preset"];
            custom?: components["schemas"]["Preset"];
        };
        TimeLocks: {
            srcWithdrawal: number;
            srcPublicWithdrawal: number;
            srcCancellation: number;
            srcPublicCancellation: number;
            dstWithdrawal: number;
            dstPublicWithdrawal: number;
            dstCancellation: number;
        };
        TokenPair: {
            srcToken: string;
            dstToken: string;
        };
        PairCurrency: {
            usd: components["schemas"]["TokenPair"];
        };
        GetQuoteOutput: {
            /** @description Current generated quote id, should be passed with order */
            quoteId: Record<string, never>;
            srcTokenAmount: string;
            dstTokenAmount: string;
            presets: components["schemas"]["QuotePresets"];
            /** @description Escrow factory contract address at source chain */
            srcEscrowFactory: string;
            /** @description Escrow factory contract address at destination chain */
            dstEscrowFactory: string;
            /** @description current executors whitelist addresses */
            whitelist: string[];
            timeLocks: components["schemas"]["TimeLocks"];
            srcSafetyDeposit: string;
            dstSafetyDeposit: string;
            /**
             * @description suggested preset
             * @enum {string}
             */
            recommendedPreset: "fast" | "slow" | "medium" | "custom";
            prices: components["schemas"]["PairCurrency"];
            volume: components["schemas"]["PairCurrency"];
        };
        CustomPresetParams: Record<string, never>;
        BuildOrderBody: {
            quote: components["schemas"]["GetQuoteOutput"];
            /**
             * @description keccak256(secret)[]
             * @example [
             *       "0x315b47a8c3780434b153667588db4ca628526e20000000000000000000000000"
             *     ]
             */
            secretsHashList: string;
        };
        BuildOrderOutput: {
            /** @description EIP712 Typed Data */
            typedData: Record<string, never>;
            /** @description Hash of CrossChain order */
            orderHash: string;
            /** @description CrossChain order extension */
            extension: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    QuoterController_getQuote: {
        parameters: {
            query: {
                /**
                 * @description Id of source chain
                 * @example 1
                 */
                srcChain: number;
                /**
                 * @description Id of destination chain
                 * @example 137
                 */
                dstChain: number;
                /**
                 * @description Address of "SOURCE" token in source chain
                 * @example 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
                 */
                srcTokenAddress: string;
                /**
                 * @description Address of "DESTINATION" token in destination chain
                 * @example 0x2791bca1f2de4661ed88a30c99a7a9449aa84174
                 */
                dstTokenAddress: string;
                /**
                 * @description Amount to take from "SOURCE" token to get "DESTINATION" token
                 * @example 100000000000000000
                 */
                amount: number;
                /**
                 * @description An address of the wallet or contract in source chain who will create Fusion order
                 * @example 0x0000000000000000000000000000000000000000
                 */
                walletAddress: string;
                /**
                 * @description if enabled then get estimation from 1inch swap builder and generates quoteId, by default is false
                 * @example false
                 */
                enableEstimate: boolean;
                /**
                 * @description fee in bps format, 1% is equal to 100bps
                 * @example 0
                 */
                fee?: number;
                /** @description permit2 allowance transfer encoded call */
                isPermit2?: string;
                /** @description permit, user approval sign */
                permit?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns quote */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Input data is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQuoteOutput"];
                };
            };
        };
    };
    QuoterController_getQuoteWithCustomPresets: {
        parameters: {
            query: {
                /**
                 * @description Id of source chain
                 * @example 1
                 */
                srcChain: number;
                /**
                 * @description Id of destination chain
                 * @example 137
                 */
                dstChain: number;
                /**
                 * @description Address of "SOURCE" token
                 * @example 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
                 */
                srcTokenAddress: string;
                /**
                 * @description Address of "DESTINATION" token
                 * @example 0x2791bca1f2de4661ed88a30c99a7a9449aa84174
                 */
                dstTokenAddress: string;
                /**
                 * @description Amount to take from "SOURCE" token to get "DESTINATION" token
                 * @example 100000000000000000
                 */
                amount: number;
                /**
                 * @description An address of the wallet or contract who will create Fusion order
                 * @example 0x0000000000000000000000000000000000000000
                 */
                walletAddress: string;
                /**
                 * @description if enabled then get estimation from 1inch swap builder and generates quoteId, by default is false
                 * @example false
                 */
                enableEstimate: boolean;
                /**
                 * @description fee in bps format, 1% is equal to 100bps
                 * @example 0
                 */
                fee?: number;
                /** @description permit2 allowance transfer encoded call */
                isPermit2?: string;
                /** @description permit, user approval sign */
                permit?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomPresetParams"];
            };
        };
        responses: {
            /** @description Returns slippage, quoteId and presets with custom preset details as well */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Input data is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQuoteOutput"];
                };
            };
        };
    };
    QuoterController_buildQuoteTypedData: {
        parameters: {
            query: {
                /**
                 * @description Id of source chain
                 * @example 1
                 */
                srcChain: number;
                /**
                 * @description Id of destination chain
                 * @example 137
                 */
                dstChain: number;
                /**
                 * @description Address of "SOURCE" token
                 * @example 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
                 */
                srcTokenAddress: string;
                /**
                 * @description Address of "DESTINATION" token
                 * @example 0x2791bca1f2de4661ed88a30c99a7a9449aa84174
                 */
                dstTokenAddress: string;
                /**
                 * @description Amount to take from "SOURCE" token to get "DESTINATION" token
                 * @example 100000000000000000
                 */
                amount: number;
                /**
                 * @description An address of the wallet or contract who will create Fusion order
                 * @example 0x0000000000000000000000000000000000000000
                 */
                walletAddress: string;
                /**
                 * @description fee in bps format, 1% is equal to 100bps
                 * @example 0
                 */
                fee?: number;
                /**
                 * @description Frontend or some other source selector
                 * @example Frontend
                 */
                source?: string;
                /** @description permit2 allowance transfer encoded call */
                isPermit2?: string;
                /** @description Enabled flag allows to save quote for Mobile History */
                isMobile?: string;
                /** @description In case fee non zero -> the fee will be transferred to this address */
                feeReceiver?: string;
                /** @description permit, user approval sign */
                permit?: string;
                /** @description fast/medium/slow/custom */
                preset?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BuildOrderBody"];
            };
        };
        responses: {
            /** @description Returns cross chain order details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Input data is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BuildOrderOutput"];
                };
            };
        };
    };
}
