/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1.0/order/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get cross chain swap active orders */
        get: operations["OrderApiController_getActiveOrders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.0/order/escrow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get actual escrow factory contract address */
        get: operations["OrderApiController_getSettlementContract"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.0/order/maker/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["OrderApiController_getOrdersByMaker"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.0/order/secrets/{orderHash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all data to perform withdrawal and cancellation */
        get: operations["OrderApiController_getPublishedSecrets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.0/order/ready-to-accept-secret-fills/{orderHash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get idx of each secret that is ready for submission for specific order */
        get: operations["OrderApiController_getReadyToAcceptSecretFills"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.0/order/ready-to-accept-secret-fills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get idx of each secret that is ready for submission for all orders */
        get: operations["OrderApiController_getReadyToAcceptSecretFillsForAllOrders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.0/order/ready-to-execute-public-actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all data to perform a cancellation or withdrawal on public periods */
        get: operations["OrderApiController_getEventsReadyForPublicAction"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.0/order/status/{orderHash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["OrderApiController_getOrderByOrderHash"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.0/order/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["OrderApiController_getOrdersByOrderHashes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Meta: {
            totalItems: number;
            itemsPerPage: number;
            totalPages: number;
            currentPage: number;
        };
        CrossChainOrderDto: {
            /** @description Some unique value. It is necessary to be able to create cross chain orders with the same parameters (so that they have a different hash), Lowest 160 bits of the order salt must be equal to the lowest 160 bits of the extension hash */
            salt: string;
            /**
             * @description Address of the account creating the order (maker) in src chain.
             * @example 0x995BE1CA945174D5bA75410C1E658a41eB13a2FA
             */
            maker: string;
            /**
             * @description Address of the account receiving the assets (receiver), if different from maker in dst chain.
             * @example 0x995BE1CA945174D5bA75410C1E658a41eB13a2FB
             */
            receiver: string;
            /**
             * @description Identifier of the asset being offered by the maker in src chain.
             * @example 0x995BE1CA945174D5bA75410C1E658a41eB13a2FC
             */
            makerAsset: string;
            /**
             * @description Identifier of the asset being requested by the maker in exchange in dst chain.
             * @example 0x995BE1CA945174D5bA75410C1E658a41eB13a2FD
             */
            takerAsset: string;
            /**
             * @description Amount of the makerAsset being offered by the maker in src chain.
             * @example 100000000000000000
             */
            makingAmount: string;
            /**
             * @description Amount of the takerAsset being requested by the maker in dst chain.
             * @example 100000000000000000
             */
            takingAmount: string;
            /**
             * @description Includes some flags like, allow multiple fills, is partial fill allowed or not, price improvement, nonce, deadline etc.
             * @example 0x
             */
            makerTraits: string;
        };
        ActiveOrdersOutput: {
            /**
             * @description Unique identifier of the order.
             * @example 0x496755a88564d8ded6759dff0252d3e6c3ef1fe42b4fa1bbc3f03bd2674f1078
             */
            orderHash: string;
            /**
             * @description Signature of the order.
             * @example 0xf7739f12038fa25a57b51b3fb26fd68bd4b80b534c9ff2a1fd396234b7a8f59308b573db71f7c9598746ecfe6f7f2a962a9d31a1229fc570044ebf0b4bc5db0c
             */
            signature: string;
            /**
             * @description Deadline by which the order must be filled.
             * @example 1634025600000
             */
            deadline: number;
            /**
             * @description Start date of the auction for this order.
             * @example 1634025600000
             */
            auctionStartDate: number;
            /**
             * @description End date of the auction for this order.
             * @example 1634025600000
             */
            auctionEndDate: number;
            /** @description Identifier of the quote associated with this order. */
            quoteId: string;
            /**
             * @description Remaining amount of the maker asset that can still be filled.
             * @example 100000000000000000
             */
            remainingMakerAmount: string;
            /**
             * @description Amount of the maker asset balance.
             * @example 100000000000000000
             */
            makerBalance: string;
            /**
             * @description Amount of the maker asset allowance.
             * @example 100000000000000000
             */
            makerAllowance: string;
            /**
             * @description True if order signed by contract (GnosisSafe, etc.)
             * @example true
             */
            isMakerContract: boolean;
            /**
             * @description An interaction call data. ABI encoded set of makerAssetSuffix, takerAssetSuffix, makingAmountGetter, takingAmountGetter, predicate, permit, preInteraction, postInteraction.If extension exists then lowest 160 bits of the order salt must be equal to the lowest 160 bits of the extension hash
             * @example 0x
             */
            extension: string;
            /**
             * @description Identifier of the chain where the maker asset is located.
             * @example 1
             */
            srcChainId: number;
            /**
             * @description Identifier of the chain where the taker asset is located.
             * @example 2
             */
            dstChainId: number;
            order: components["schemas"]["CrossChainOrderDto"];
            /**
             * @description Array of secret hashes.
             * @example [
             *       "0x2048b38093dc53876b2bbd230ee8999791153db01de425112f449d018094e116",
             *       "0x7972c1498893bb9b88baddc9decb78d8defdcc7a182a72edd8724498c75f088d",
             *       "0x6d5b8f0b1f8a28564ff65e5f9c4d8a8a6babfb318bca6ecc9d872a3abe8a4ea0"
             *     ]
             */
            secretHashes?: unknown[][];
            /** @description Array of fills. */
            fills: string[];
        };
        GetActiveOrdersOutput: {
            meta: components["schemas"]["Meta"];
            items: components["schemas"]["ActiveOrdersOutput"][];
        };
        EscrowFactory: {
            /** @description actual escrow factory contract address */
            address: string;
        };
        GetOrderByMakerOutput: {
            meta: components["schemas"]["Meta"];
            items: components["schemas"]["ActiveOrdersOutput"][];
        };
        Immutables: {
            /**
             * @description Order's hash 32 bytes hex sting
             * @example 0x496755a88564d8ded6759dff0252d3e6c3ef1fe42b4fa1bbc3f03bd2674f1078
             */
            orderHash: string;
            /**
             * @description keccak256(secret(idx))
             * @example 0x03f9ebf9075dfaae76c43b7443d07399609ffe24a5d435045fe4d3bf82d9fce4
             */
            hashlock: string;
            /**
             * @description Maker's address which will receive tokens
             * @example 0xe75eD6F453c602Bd696cE27AF11565eDc9b46B0D
             */
            maker: string;
            /**
             * @description Escrow creation initiator address
             * @example 0x00000000009E50a7dDb7a7B0e2ee6604fd120E49
             */
            taker: string;
            /**
             * @description Token to receive on specific chain
             * @example 0xdAC17F958D2ee523a2206206994597C13D831ec7
             */
            token: string;
            /**
             * @description Amount of token to receive
             * @example 1000000000000000000
             */
            amount: string;
            /**
             * @description Security deposit in chain's native currency
             * @example 50000000000000000000
             */
            safetyDeposit: string;
            /**
             * @description Encoded timelocks. To decode use: https://github.com/1inch/cross-chain-sdk/blob/master/src/cross-chain-order/time-locks/time-locks.ts
             * @example 0x3000000020000000100000004000000030000000200000001
             */
            timelocks: string;
        };
        PublicSecret: {
            /**
             * @description Sequence number of secrets
             * @example 1
             */
            idx: number;
            /**
             * @description Public secret to perform a withdrawal
             * @example 0xdb475911f2d1c5df6b1fb959777ddd01c89d881175a3b9693ec884f18dcb5734
             */
            secret: string;
            srcImmutables: components["schemas"]["Immutables"];
            dstImmutables: components["schemas"]["Immutables"];
        };
        ResolverDataOutput: {
            /**
             * @description Type of the order: enabled or disabled partial fills
             * @example SingleFill
             * @enum {string}
             */
            orderType: "SingleFill" | "MultipleFills";
            /** @description The data required for order withdraw and cancel */
            secrets: components["schemas"]["PublicSecret"][];
            /**
             * @description keccak256(secret(idx))[]
             * @example [
             *       "0x2048b38093dc53876b2bbd230ee8999791153db01de425112f449d018094e116",
             *       "0x7972c1498893bb9b88baddc9decb78d8defdcc7a182a72edd8724498c75f088d",
             *       "0x6d5b8f0b1f8a28564ff65e5f9c4d8a8a6babfb318bca6ecc9d872a3abe8a4ea0"
             *     ]
             */
            secretHashes?: unknown[][];
        };
        ReadyToAcceptSecretFill: {
            /** @description Sequence number of secrets for submission */
            idx: number;
            /** @description Transaction hash where the source chain escrow was deployed */
            srcEscrowDeployTxHash: string;
            /** @description Transaction hash where the destination chain escrow was deployed */
            dstEscrowDeployTxHash: string;
        };
        ReadyToAcceptSecretFills: {
            /** @description Fills that are ready to accept secrets from the client */
            fills: components["schemas"]["ReadyToAcceptSecretFill"][];
        };
        ReadyToAcceptSecretFillsForOrder: {
            /**
             * @description Order hash
             * @example 0x496755a88564d8ded6759dff0252d3e6c3ef1fe42b4fa1bbc3f03bd2674f1078
             */
            orderHash: string;
            /**
             * @description Maker address
             * @example 0x496755a88564d8ded6759dff0252d3e6c3ef1fe42b4fa1bbc3f03bd2674f1079
             */
            makerAddress: string;
            /** @description Fills that are ready to accept secrets from the client */
            fills: components["schemas"]["ReadyToAcceptSecretFill"][];
        };
        ReadyToAcceptSecretFillsForAllOrders: {
            /** @description Fills that are ready to accept secrets from the client for all orders */
            orders: components["schemas"]["ReadyToAcceptSecretFillsForOrder"][];
        };
        ReadyToExecutePublicAction: {
            /**
             * @example withdraw
             * @enum {string}
             */
            action: "withdraw" | "cancel";
            immutables: components["schemas"]["Immutables"];
            /**
             * @description Execute action on this chain
             * @example 1
             */
            chainId: number;
            /**
             * @description Escrow's address to perform public action
             * @example 0xf1325353e081023520d44b7a24f72905ada3a080
             */
            escrow: string;
            /**
             * @description Presented only for withdraw action
             * @example 0x496755a88564d8ded6759dff0252d3e6c3ef1fe42b4fa1bbc3f03bd2674f1078
             */
            secret?: string;
        };
        ReadyToExecutePublicActionsOutput: {
            /** @description Actions allowed to be performed on public timelock periods */
            actions: components["schemas"]["ReadyToExecutePublicAction"][];
        };
        LimitOrderV4StructOutput: {
            salt: string;
            /**
             * @description Maker address
             * @example 0x995BE1CA945174D5bA75410C1E658a41eB13a2FA
             */
            maker: string;
            /**
             * @description Receiver address
             * @example 0x995BE1CA945174D5bA75410C1E658a41eB13a2FA
             */
            receiver: string;
            /**
             * @description Maker asset address
             * @example 0x995BE1CA945174D5bA75410C1E658a41eB13a2FA
             */
            makerAsset: string;
            /**
             * @description Taker asset address
             * @example 0x995BE1CA945174D5bA75410C1E658a41eB13a2FA
             */
            takerAsset: string;
            /**
             * @description Amount of the maker asset
             * @example 100000000000000000
             */
            makingAmount: string;
            /**
             * @description Amount of the taker asset
             * @example 100000000000000000
             */
            takingAmount: string;
            makerTraits: string;
        };
        AuctionPointOutput: {
            /**
             * @description The delay in seconds from the previous point or auction start time
             * @example 234
             */
            delay: number;
            /**
             * @description The rate bump from the order min taker amount
             * @example 200
             */
            coefficient: number;
        };
        EscrowEventDataOutput: {
            /**
             * @description Transaction hash
             * @example 0x806039f5149065924ad52de616b50abff488c986716d052e9c160887bc09e559
             */
            transactionHash: string;
            /**
             * @description Side of the escrow event SRC or DST
             * @example src
             * @enum {string}
             */
            side: "src" | "dst";
            /**
             * @description Action of the escrow event
             * @example src_escrow_created
             * @enum {string}
             */
            action: "src_escrow_created" | "dst_escrow_created" | "withdrawn" | "funds_rescued" | "escrow_cancelled";
            /**
             * @description Unix timestamp in milliseconds
             * @example 123123123123
             */
            blockTimestamp: number;
        };
        FillOutputDto: {
            /**
             * @description Fill status
             * @example pending
             * @enum {string}
             */
            status: "pending" | "executed" | "refunding" | "refunded";
            /**
             * @description Transaction hash
             * @example 0x806039f5149065924ad52de616b50abff488c986716d052e9c160887bc09e559
             */
            txHash: string;
            /**
             * @description Amount of the makerAsset filled in src chain.
             * @example 100000000000000000
             */
            filledMakerAmount: string;
            /**
             * @description Amount of the takerAsset filled in dst chain.
             * @example 100000000000000000
             */
            filledAuctionTakerAmount: string;
            escrowEvents: components["schemas"]["EscrowEventDataOutput"][];
        };
        GetOrderFillsByHashOutput: {
            /**
             * @description Order hash
             * @example 0x496755a88564d8ded6759dff0252d3e6c3ef1fe42b4fa1bbc3f03bd2674f1078
             */
            orderHash: string;
            /**
             * @description Order status
             * @example pending
             * @enum {string}
             */
            status: "pending" | "executed" | "expired" | "cancelled" | "refunding" | "refunded";
            /**
             * @description Order validation status
             * @example valid
             * @enum {string}
             */
            validation: "valid" | "order-predicate-returned-false" | "not-enough-balance" | "not-enough-allowance" | "invalid-permit-signature" | "invalid-permit-spender" | "invalid-permit-signer" | "invalid-signature" | "failed-to-parse-permit-details" | "unknown-permit-version" | "wrong-epoch-manager-and-bit-invalidator" | "failed-to-decode-remaining" | "unknown-failure";
            order: components["schemas"]["LimitOrderV4StructOutput"];
            /** @description An interaction call data. ABI encoded set of makerAssetSuffix, takerAssetSuffix, makingAmountGetter, takingAmountGetter, predicate, permit, preInteraction, postInteraction.If extension exists then lowest 160 bits of the order salt must be equal to the lowest 160 bits of the extension hash */
            extension: string;
            points: components["schemas"]["AuctionPointOutput"];
            /**
             * @description Approximate amount of the takerAsset being requested by the maker in dst chain.
             * @example 100000000000000000
             */
            approximateTakingAmount: string;
            /** @description Fills */
            fills: components["schemas"]["FillOutputDto"][];
            /**
             * @description Unix timestamp in milliseconds
             * @example 123123123123
             */
            auctionStartDate: number;
            /**
             * @description Unix timestamp in milliseconds
             * @example 123123123123
             */
            auctionDuration: number;
            /**
             * @description Initial rate bump
             * @example 1000
             */
            initialRateBump: number;
            /**
             * @description Unix timestamp in milliseconds
             * @example 123123123123
             */
            createdAt: number;
            /** @example 100 */
            srcTokenPriceUsd: Record<string, never>;
            /** @example 200 */
            dstTokenPriceUsd: Record<string, never>;
            /** @example 0xa2768a9826b2c45a6937010ce21a91b1da9f8c7aa5194f68aa99306b22518b41 */
            cancelTx: Record<string, never>;
            /**
             * @description Identifier of the chain where the maker asset is located.
             * @example 1
             */
            srcChainId: number;
            /**
             * @description Identifier of the chain where the taker asset is located.
             * @example 2
             */
            dstChainId: number;
            /**
             * @description Is order cancelable
             * @example true
             */
            cancelable: boolean;
            /**
             * @description Identifier of the asset being requested by the maker in exchange in dst chain.
             * @example 0x995BE1CA945174D5bA75410C1E658a41eB13a2FD
             */
            takerAsset: string;
            /**
             * @description TimeLocks without deployedAt
             * @example 0xfc000000840000000c000001bc00000144000000a800000024
             */
            timeLocks: string;
        };
        OrdersByHashesInput: {
            /** @example [
             *       "0x10ea5bd12b2d04566e175de24c2df41a058bf16df4af3eb2fb9bff38a9da98e9",
             *       "0x20ea5bd12b2d04566e175de24c2df41a058bf16df4af3eb2fb9bff38a9da98e8",
             *       "0x30ea5bd12b2d04566e175de24c2df41a058bf16df4af3eb2fb9bff38a9da98e7",
             *       "0x40ea5bd12b2d04566e175de24c2df41a058bf16df4af3eb2fb9bff38a9da98e6"
             *     ] */
            orderHashes: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    OrderApiController_getActiveOrders: {
        parameters: {
            query?: {
                /**
                 * @description Pagination step, default: 1 (page = offset / limit)
                 * @example 1
                 */
                page?: number;
                /**
                 * @description Number of active orders to receive (default: 100, max: 500)
                 * @example 100
                 */
                limit?: number;
                /**
                 * @description Source chain of cross chain
                 * @example 1
                 */
                srcChain?: number;
                /**
                 * @description Destination chain of cross chain
                 * @example 137
                 */
                dstChain?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Array of queried active orders */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Input data is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetActiveOrdersOutput"];
                };
            };
        };
    };
    OrderApiController_getSettlementContract: {
        parameters: {
            query?: {
                /**
                 * @description Chain ID
                 * @example 1
                 */
                chainId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EscrowFactory"];
                };
            };
        };
    };
    OrderApiController_getOrdersByMaker: {
        parameters: {
            query?: {
                /**
                 * @description Pagination step, default: 1 (page = offset / limit)
                 * @example 1
                 */
                page?: number;
                /**
                 * @description Number of active orders to receive (default: 100, max: 500)
                 * @example 100
                 */
                limit?: number;
                /**
                 * @description timestampFrom in milliseconds for interval [timestampFrom, timestampTo)
                 * @example 1727173462451
                 */
                timestampFrom?: number;
                /**
                 * @description timestampTo in milliseconds for interval [timestampFrom, timestampTo)
                 * @example 1727173462451
                 */
                timestampTo?: number;
                /**
                 * @description Find history by the given source token
                 * @example 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
                 */
                srcToken?: string;
                /**
                 * @description Find history by the given destination token
                 * @example 0xc2132d05d31c914a87c6611c10748aeb04b58e8f
                 */
                dstToken?: string;
                /**
                 * @description Find history items by source or destination token
                 * @example 0xc2132d05d31c914a87c6611c10748aeb04b58e8f
                 */
                withToken?: string;
                /**
                 * @description Destination chain of cross chain
                 * @example 137
                 */
                dstChainId?: number;
                /**
                 * @description Source chain of cross chain
                 * @example 1
                 */
                srcChainId?: number;
                /**
                 * @description chainId for looking by dstChainId == chainId OR srcChainId == chainId
                 * @example 56
                 */
                chainId?: number;
            };
            header?: never;
            path: {
                /**
                 * @description Maker's address
                 * @example 0x1000000000000000000000000000000000000001
                 */
                address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderByMakerOutput"];
                };
            };
        };
    };
    OrderApiController_getPublishedSecrets: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 0xa0ea5bd12b2d04566e175de24c2df41a058bf16df4af3eb2fb9bff38a9da98e9 */
                orderHash: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Public secrets and all data related to withdrawal and cancellation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResolverDataOutput"];
                };
            };
        };
    };
    OrderApiController_getReadyToAcceptSecretFills: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 0xa0ea5bd12b2d04566e175de24c2df41a058bf16df4af3eb2fb9bff38a9da98e9 */
                orderHash: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReadyToAcceptSecretFills"];
                };
            };
        };
    };
    OrderApiController_getReadyToAcceptSecretFillsForAllOrders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReadyToAcceptSecretFillsForAllOrders"];
                };
            };
        };
    };
    OrderApiController_getEventsReadyForPublicAction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReadyToExecutePublicActionsOutput"];
                };
            };
        };
    };
    OrderApiController_getOrderByOrderHash: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 0xa0ea5bd12b2d04566e175de24c2df41a058bf16df4af3eb2fb9bff38a9da98e9 */
                orderHash: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderFillsByHashOutput"];
                };
            };
        };
    };
    OrderApiController_getOrdersByOrderHashes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OrdersByHashesInput"];
            };
        };
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderFillsByHashOutput"];
                };
            };
        };
    };
}
