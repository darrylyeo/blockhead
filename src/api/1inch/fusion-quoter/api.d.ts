/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v2.0/1/quote/receive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get quote details based on input data */
        get: operations["QuoterController_getQuote"];
        put?: never;
        /** Get quote with custom preset details */
        post: operations["QuoterController_getQuoteWithCustomPresets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AuctionPointClass: {
            delay: number;
            coefficient: number;
        };
        GasCostConfigClass: {
            gasBumpEstimate: number;
            gasPriceEstimate: string;
        };
        PresetClass: {
            bankFee: string;
            auctionDuration: number;
            startAuctionIn: number;
            initialRateBump: number;
            auctionStartAmount: string;
            auctionEndAmount: string;
            exclusiveResolver: Record<string, never>;
            tokenFee: string;
            estP: number;
            points: components["schemas"]["AuctionPointClass"][];
            allowPartialFills: boolean;
            allowMultipleFills: boolean;
            gasCost: components["schemas"]["GasCostConfigClass"];
        };
        QuotePresetsClass: {
            fast: components["schemas"]["PresetClass"];
            medium: components["schemas"]["PresetClass"];
            slow: components["schemas"]["PresetClass"];
            custom?: components["schemas"]["PresetClass"];
        };
        PairCurrencyValue: {
            fromToken: string;
            toToken: string;
        };
        TokenPairValue: {
            usd: components["schemas"]["PairCurrencyValue"];
        };
        GetQuoteOutput: {
            /** @description Current generated quote id, should be passed with order */
            quoteId: Record<string, never>;
            fromTokenAmount: string;
            toTokenAmount: string;
            /** @description Destination token address */
            feeToken: string;
            presets: components["schemas"]["QuotePresetsClass"];
            /** @description settlement contract address */
            settlementAddress: string;
            /** @description current executors whitelist addresses */
            whitelist: string[];
            /**
             * @description suggested to use this preset
             * @enum {string}
             */
            recommended_preset: "fast" | "medium" | "slow" | "custom";
            /** @description is it suggested to use Fusion */
            suggested: boolean;
            prices: components["schemas"]["TokenPairValue"];
            volume: components["schemas"]["TokenPairValue"];
        };
        CustomPresetInput: {
            auctionDuration: number;
            /** Format: int64 */
            auctionStartAmount: number;
            /** Format: int64 */
            auctionEndAmount: number;
            points?: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    QuoterController_getQuote: {
        parameters: {
            query: {
                /**
                 * @description Address of "FROM" token
                 * @example 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
                 */
                fromTokenAddress: string;
                /**
                 * @description Address of "TO" token
                 * @example 0x6b175474e89094c44da98b954eedeac495271d0f
                 */
                toTokenAddress: string;
                /**
                 * @description Amount to take from "FROM" token to get "TO" token
                 * @example 100000
                 */
                amount: number;
                /**
                 * @description An address of the wallet or contract who will create Fusion order
                 * @example 0x0000000000000000000000000000000000000000
                 */
                walletAddress: string;
                /**
                 * @description if enabled then get estimation from 1inch swap builder and generates quoteId, by default is false
                 * @example false
                 */
                enableEstimate: boolean;
                /**
                 * @description fee in bps format, 1% is equal to 100bps
                 * @example 100
                 */
                fee?: number;
                /**
                 * @description permit2 allowance transfer encoded call
                 * @example 0x
                 */
                isPermit2?: string;
                isLedgerLive: boolean;
                /**
                 * @description permit, user approval sign
                 * @example 0x
                 */
                permit?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns presets with slippage and quoteId */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Input data is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQuoteOutput"];
                };
            };
        };
    };
    QuoterController_getQuoteWithCustomPresets: {
        parameters: {
            query: {
                /**
                 * @description Address of "FROM" token
                 * @example 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
                 */
                fromTokenAddress: string;
                /**
                 * @description Address of "TO" token
                 * @example 0x6b175474e89094c44da98b954eedeac495271d0f
                 */
                toTokenAddress: string;
                /**
                 * @description Amount to take from "FROM" token to get "TO" token
                 * @example 100000
                 */
                amount: number;
                /**
                 * @description An address of the wallet or contract who will create Fusion order
                 * @example 0x0000000000000000000000000000000000000000
                 */
                walletAddress: string;
                /**
                 * @description if enabled then get estimation from 1inch swap builder and generates quoteId, by default is false
                 * @example false
                 */
                enableEstimate: boolean;
                /**
                 * @description fee in bps format, 1% is equal to 100bps
                 * @example 100
                 */
                fee?: number;
                /**
                 * @description permit2 allowance transfer encoded call
                 * @example 0x
                 */
                isPermit2?: string;
                /**
                 * @description permit, user approval sign
                 * @example 0x
                 */
                permit?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomPresetInput"];
            };
        };
        responses: {
            /** @description Returns slippage, quoteId and presets with custom preset details as well */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Input data is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQuoteOutput"];
                };
            };
        };
    };
}
