/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v4.0/1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Include a limit order to the 1inch limit orders database
         * @description You can send your limit orders to the 1inch database and then your order will participate in the 1inch aggregation protocol.
         */
        post: operations["LimitOrderV4SubscribedApiController_createLimitOrder_v4.0"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v4.0/1/address/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get limit orders belonging to the specified address */
        get: operations["LimitOrderV4SubscribedApiController_getLimitOrder_v4.0"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v4.0/1/order/{orderHash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get order by the specified order hash */
        get: operations["LimitOrderV4SubscribedApiController_getOrderByOrderHash_v4.0"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v4.0/1/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all limit orders */
        get: operations["LimitOrderV4SubscribedApiController_getAllLimitOrders_v4.0"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v4.0/1/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get orders count by specified filters */
        get: operations["LimitOrderV4SubscribedApiController_getAllOrdersCount_v4.0"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v4.0/1/events/{orderHash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get fill/cancel events related to the specified order */
        get: operations["LimitOrderV4SubscribedApiController_getEventsOrderHash_v4.0"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v4.0/1/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all orders fill/cancel events */
        get: operations["LimitOrderV4SubscribedApiController_getEvents_v4.0"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v4.0/1/has-active-orders-with-permit/{walletAddress}/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all active orders which have permit for the specified wallet address and token */
        get: operations["LimitOrderV4SubscribedApiController_hasActiveOrders_v4.0"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v4.0/1/unique-active-pairs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get unique active token pairs */
        get: operations["LimitOrderV4SubscribedApiController_getUniqueActiveTokenPairs_v4.0"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v4.0/1/build": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Build Limit Order */
        get: operations["LimitOrderV4SubscribedApiController_buildLimitOrder_v4.0"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v4.0/1/fee-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get calculated making amount on trading pair by provided amount */
        get: operations["LimitOrderV4SubscribedApiController_getFeeInfo_v4.0"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        LimitOrderV4Data: {
            /** @description Address of the maker asset */
            makerAsset: string;
            /** @description Address of the taker asset */
            takerAsset: string;
            /** @description An address of the maker (wallet or contract address) */
            maker: string;
            /**
             * @description An address of the wallet or contract who will receive filled amount (equals to Zero address for receiver == makerAddress)
             * @default 0x0000000000000000000000000000000000000000
             */
            receiver: string;
            /** @description Order maker's token amount */
            makingAmount: string;
            /** @description Order taker's token amount */
            takingAmount: string;
            /** @description Some unique value. It is necessary to be able to create limit orders with the same parameters (so that they have a different hash), Lowest 160 bits of the order salt must be equal to the lowest 160 bits of the extension hash */
            salt: string;
            /**
             * @description An interaction call data. ABI encoded set of makerAssetSuffix, takerAssetSuffix, makingAmountGetter, takingAmountGetter, predicate, permit, preInteraction, postInteraction.If extension exists then lowest 160 bits of the order salt must be equal to the lowest 160 bits of the extension hash
             * @default 0x
             */
            extension: string;
            /**
             * @description Includes some flags like, allow multiple fills, is partial fill allowed or not, price improvement, nonce, deadline etc
             * @default 0
             */
            makerTraits: string;
        };
        LimitOrderV4Request: {
            /** @description Hash of the limit order typed data */
            orderHash: string;
            /** @description Signature of the limit order typed data (using signTypedData_v4) */
            signature: string;
            /** @description Limit order data */
            data: components["schemas"]["LimitOrderV4Data"];
        };
        LimitOrderV4Response: {
            success: boolean;
        };
        GetLimitOrdersV4Response: {
            /**
             * @description The cryptographic signature of the order
             * @example 0x1b1807385e0d9a4d622d0745a825c79bee3a1517b0fc8be9d6ffc5a382f453a25de75a6a4bd5bf586c8a58a6f7c0cd7fad1f9ecc4bfe26ecee9f20405ae7126d1b
             */
            signature: string;
            /**
             * @description A unique identifier for the order
             * @example 0x0d92079e3828f1dd6e481269e0d912e60d04a58a03a2c1f0529ed120ce6ba0bc
             */
            orderHash: string;
            /**
             * @description The date and time of order creation
             * @example 2023-10-19T14:03:27.500Z
             */
            createDateTime: string;
            /**
             * @description The remaining amount for the maker
             * @example 70000000000
             */
            remainingMakerAmount: string;
            /**
             * @description The balance of the maker
             * @example 0
             */
            makerBalance: string;
            /**
             * @description The allowance granted to the maker
             * @example 115792089237316195423570985008687907853269984665640564039457584007913129639935
             */
            makerAllowance: string;
            /** @description Data of the order */
            data: components["schemas"]["LimitOrderV4Data"];
            /**
             * @description The maker rate
             * @example 1428571428.571428571428571429
             */
            makerRate: string;
            /**
             * @description The taker rate
             * @example 0.000000000700000000
             */
            takerRate: string;
            /**
             * @description Indicates if it is a maker contract
             * @example false
             */
            isMakerContract: boolean;
            /**
             * @description Reason for order invalidity (null or string)
             * @example null
             */
            orderInvalidReason: string | null;
        };
        GetLimitOrdersCountV4Response: {
            /**
             * @description The count of limit order by specified filter params
             * @example 124
             */
            count: number;
        };
        GetEventsV4Response: {
            id: number;
            network: number;
            logId: string;
            version: number;
            action: string;
            orderHash: string;
            taker: string;
            remainingMakerAmount: string;
            transactionHash: string;
            blockNumber: number;
            createDateTime: string;
        };
        GetHasActiveOrdersWithPermitV4Response: {
            /**
             * @description true or false if it has active order with permit or no
             * @example false
             */
            result: boolean;
        };
        Meta: {
            totalItems: number;
            itemsPerPage: number;
            totalPages: number;
            currentPage: number;
        };
        UniquePairs: {
            /**
             * @description The address of the maker asset (token address)
             * @example 0x1234567890abcdef1234567890abcdef12345678
             */
            makerAsset: string;
            /**
             * @description The address of the taker asset (token address)
             * @example 0xabcdef1234567890abcdef1234567890abcdef12
             */
            takerAsset: string;
        };
        GetActiveUniquePairsResponse: {
            meta: components["schemas"]["Meta"];
            /**
             * @description array if unique active asset pairs
             * @example [
             *       {
             *         "makerAsset": "0x89deb6c8918a42457bd6ddbcaaf979216c4d774c",
             *         "takerAsset": "0xdac17f958d2ee523a2206206994597c13d831ec7"
             *       },
             *       {
             *         "makerAsset": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
             *         "takerAsset": "0x2f109021afe75b949429fe30523ee7c0d5b27207"
             *       }
             *     ]
             */
            items: components["schemas"]["UniquePairs"][];
        };
        BuildOrderOutput: {
            /** @description EIP712 Typed Data */
            typedData: Record<string, never>;
            /** @description Hash of limit order */
            orderHash: string;
            /** @description limit order extension */
            extension: string;
        };
        WhitelistedResolvers: Record<string, never>;
        AccountAddress: Record<string, never>;
        FeeInfoResponse: {
            /** @description List of whitelisted resolvers */
            whitelist: components["schemas"]["WhitelistedResolvers"];
            /** @description fee in bps */
            feeBps: number;
            /** @description Whitelisted discount percent */
            whitelistDiscountPercent: number;
            /** @description Protocol fee receiver address */
            protocolFeeReceiver: components["schemas"]["AccountAddress"];
            /** @description Fee extension address */
            extensionAddress: components["schemas"]["AccountAddress"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "LimitOrderV4SubscribedApiController_createLimitOrder_v4.0": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LimitOrderV4Request"];
            };
        };
        responses: {
            /** @description The limit order has been successfully saved */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LimitOrderV4Response"];
                };
            };
            /** @description Input data is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        statusCode?: 400;
                        /** @example 0xbad_address */
                        message?: string;
                        /** @enum {string} */
                        error?: "Bad Request";
                    };
                };
            };
            /** @description Max valid orders per user: 100. Cancel previous orders to create new ones */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "LimitOrderV4SubscribedApiController_getLimitOrder_v4.0": {
        parameters: {
            query?: {
                /** @description Pagination step, default: 1 (page = offset / limit) */
                page?: number;
                /** @description Number of limit orders to receive (default: 100, max: 500) */
                limit?: number;
                /** @description A comma-separated list of statuses by which limit orders will be filtered. Valid statuses include: 1 - Valid orders, 2 - Temporarily invalid orders, 3 - Invalid orders. */
                statuses?: string;
                sortBy?: "createDateTime" | "takerRate" | "makerRate" | "makerAmount" | "takerAmount";
                /** @description Address of the taker asset */
                takerAsset?: string;
                /** @description Address of the maker asset */
                makerAsset?: string;
            };
            header?: never;
            path: {
                /** @description address in hexadecimal format */
                address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Array of queried limit orders */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetLimitOrdersV4Response"];
                };
            };
            /** @description Input data is invalid or address is not provided */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        statusCode?: 400;
                        /** @example 0xbad_address */
                        message?: string;
                        /** @enum {string} */
                        error?: "Bad Request";
                    };
                };
            };
        };
    };
    "LimitOrderV4SubscribedApiController_getOrderByOrderHash_v4.0": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description OrderHash of the order */
                orderHash: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Input data is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        statusCode?: 400;
                        /** @example 0xbad_address */
                        message?: string;
                        /** @enum {string} */
                        error?: "Bad Request";
                    };
                };
            };
            /** @description Get order by order hash */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetLimitOrdersV4Response"];
                };
            };
        };
    };
    "LimitOrderV4SubscribedApiController_getAllLimitOrders_v4.0": {
        parameters: {
            query?: {
                /** @description Pagination step, default: 1 (page = offset / limit) */
                page?: number;
                /** @description Number of limit orders to receive (default: 100, max: 500) */
                limit?: number;
                /** @description A comma-separated list of statuses by which limit orders will be filtered. Valid statuses include: 1 - Valid orders, 2 - Temporarily invalid orders, 3 - Invalid orders. */
                statuses?: string;
                sortBy?: "createDateTime" | "takerRate" | "makerRate" | "makerAmount" | "takerAmount";
                /** @description Address of the taker asset */
                takerAsset?: string;
                /** @description Address of the maker asset */
                makerAsset?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Array of queried limit orders */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetLimitOrdersV4Response"][];
                };
            };
            /** @description Input data is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        statusCode?: 400;
                        /** @example 0xbad_address */
                        message?: string;
                        /** @enum {string} */
                        error?: "Bad Request";
                    };
                };
            };
        };
    };
    "LimitOrderV4SubscribedApiController_getAllOrdersCount_v4.0": {
        parameters: {
            query?: {
                /** @description A comma-separated list of statuses by which limit orders will be filtered. Valid statuses include: 1 - Valid orders, 2 - Temporarily invalid orders, 3 - Invalid orders. */
                statuses?: string;
                /** @description Address of the taker asset */
                takerAsset?: string;
                /** @description Address of the maker asset */
                makerAsset?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Input data is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        statusCode?: 400;
                        /** @example 0xbad_address */
                        message?: string;
                        /** @enum {string} */
                        error?: "Bad Request";
                    };
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetLimitOrdersCountV4Response"];
                };
            };
        };
    };
    "LimitOrderV4SubscribedApiController_getEventsOrderHash_v4.0": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description OrderHash of the order */
                orderHash: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Input data is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        statusCode?: 400;
                        /** @example 0xbad_address */
                        message?: string;
                        /** @enum {string} */
                        error?: "Bad Request";
                    };
                };
            };
            /** @description Get events by order hash */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: {
                            /** @example 73989 */
                            id?: number;
                            /** @example 1 */
                            network?: number;
                            /** @example log_e879a909 */
                            logId?: string;
                            /** @example 3 */
                            version?: number;
                            /** @example fill */
                            action?: string;
                            /** @example 0x186f896d3a59c13088517a8d9ffab566dd4354d90669ec683ef9307c2174f9b4 */
                            orderHash?: string;
                            /** @example 0x027d24217f18822e6ce11821524c212f507d0787 */
                            taker?: string;
                            /** @example 0 */
                            remainingMakerAmount?: string;
                            /** @example 0x014f972b2a8121b09507e7f60613d77f7e4bc1a4cb942ff9fae6f946cd8f4078 */
                            transactionHash?: string;
                            /** @example 16083198 */
                            blockNumber?: number;
                            /**
                             * Format: date-time
                             * @example 2023-07-09T10:45:39.332Z
                             */
                            createDateTime?: string;
                        }[];
                    };
                };
            };
        };
    };
    "LimitOrderV4SubscribedApiController_getEvents_v4.0": {
        parameters: {
            query?: {
                /** @description limit to get events, max 1000 */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get events by order hash */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetEventsV4Response"][];
                };
            };
        };
    };
    "LimitOrderV4SubscribedApiController_hasActiveOrders_v4.0": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                walletAddress: string;
                /** @description address in hexadecimal format */
                token: string;
                /** @description address in hexadecimal format */
                address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Input data is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        statusCode?: 400;
                        /** @example 0xbad_address */
                        message?: string;
                        /** @enum {string} */
                        error?: "Bad Request";
                    };
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetHasActiveOrdersWithPermitV4Response"];
                };
            };
        };
    };
    "LimitOrderV4SubscribedApiController_getUniqueActiveTokenPairs_v4.0": {
        parameters: {
            query?: {
                /** @description Pagination step, default: 1 (page = offset / limit) */
                page?: number;
                /** @description Number of limit orders to receive (default: 100, max: 500) */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Input data is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {integer} */
                        statusCode?: 400;
                        /** @example 0xbad_address */
                        message?: string;
                        /** @enum {string} */
                        error?: "Bad Request";
                    };
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetActiveUniquePairsResponse"];
                };
            };
        };
    };
    "LimitOrderV4SubscribedApiController_buildLimitOrder_v4.0": {
        parameters: {
            query: {
                /** @description Maker token Address */
                makerToken: string;
                /** @description Taker token address */
                takerToken: string;
                /** @description making amount */
                makingAmount: number;
                /** @description taking amount */
                takingAmount: number;
                /** @description expiration in seconds */
                expiration: number;
                /** @description Frontend or some other source selector */
                source?: string;
                /** @description An address of the maker or contract who will create limit order */
                makerAddress: string;
                /** @description permit2 allowance transfer encoded call */
                isPermit2?: boolean;
                /** @description series, subgroup for epoch */
                series?: string;
                /** @description permit, user approval sign */
                permit?: string;
                /** @description receive on another address */
                receiver?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns limit order details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Input data is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BuildOrderOutput"];
                };
            };
        };
    };
    "LimitOrderV4SubscribedApiController_getFeeInfo_v4.0": {
        parameters: {
            query: {
                /** @description Maker asset address */
                makerAsset: string;
                /** @description Taker asset address */
                takerAsset: string;
                /** @description Amount to calculate fee on trading pair */
                makerAmount?: string;
                /** @description Amount to calculate fee on trading pair */
                takerAmount?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description fee info including whitelisted resolvers, fee in bps and whitelisted discount percent */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeeInfoResponse"];
                };
            };
        };
    };
}
