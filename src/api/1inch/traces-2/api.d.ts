/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1.0/chain/{chain}/synced-interval": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get synced interval */
        get: operations["SyncedIntervalRestApiController_readSyncedInterval"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.0/chain/{chain}/block-trace/{blockNumber}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get block trace by number */
        get: operations["BlockTraceRestApiController_blockTraceByNumber"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.0/chain/{chain}/block-trace/{blockNumber}/tx-hash/{txHash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get transaction trace by block number and transaction hash */
        get: operations["BlockTraceRestApiController_transactionTraceByBlockNumberAndTxHash"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1.0/chain/{chain}/block-trace/{blockNumber}/offset/{offset}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get transaction trace by block number and offset of transaction in block */
        get: operations["BlockTraceRestApiController_transactionTraceByBlockNumberAndOffset"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ReadSyncedIntervalResponseDto: {
            /** @example 1 */
            from: number;
            /** @example 14913951 */
            to: number;
        };
        CoreBuiltinCallTraceDto: {
            /** @example true */
            isParentHasError: boolean;
            /**
             * @example CALL
             * @enum {string}
             */
            type: "SELFDESTRUCT" | "CREATE" | "CREATE2" | "CALL" | "CALLCODE" | "DELEGATECALL" | "STATICCALL" | "TRANSFER_ETHER" | "INVALID" | "STOP";
            /** @example 0x71dad91e069861350c2ba882fd86762a5efe8792 */
            from: string;
            /** @example 0x71dad91e069861350c2ba882fd86762a5efe8792 */
            to: string;
            /** @example 0x5f68e8131ecf80000 */
            value: string;
            /** @example 0x3e48f */
            gas: string;
            /** @example 0x5da9 */
            gasUsed: number;
            /** @example 0xd0e30db0 */
            input: string;
            /** @example 0x0000000000000000000000000000000000000000000000000000000000000001 */
            output: string;
            /** @example error */
            error: string;
            calls: components["schemas"]["CoreBuiltinCallTraceDto"][];
        };
        CoreBuiltinTraceLogDto: {
            /** @example 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff */
            data: string;
            /** @example [
             *       "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
             *       "0x00000000000000000000000059eb67ecbb7e68ee94114b2f77d91074404504be",
             *       "0x000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff"
             *     ] */
            topics: unknown[][];
            /** @example 0x0000000000000000000000000000000000001010 */
            contract: string;
        };
        CoreBuiltinTransactionRootSuccessTraceDto: {
            /**
             * @example CALL
             * @enum {string}
             */
            type: "SELFDESTRUCT" | "CREATE" | "CREATE2" | "CALL" | "CALLCODE" | "DELEGATECALL" | "STATICCALL" | "TRANSFER_ETHER" | "INVALID" | "STOP";
            /** @example 0x71dad91e069861350c2ba882fd86762a5efe8792 */
            from: string;
            /** @example 0x71dad91e069861350c2ba882fd86762a5efe8792 */
            to: string;
            /** @example 0x5f68e8131ecf80000 */
            value: string;
            /** @example 0x3e48f */
            gas: string;
            /** @example 0x5da9 */
            gasUsed: number;
            /** @example 0xd0e30db0 */
            input: string;
            /** @example 0x0000000000000000000000000000000000000000000000000000000000000001 */
            output: string;
            calls: components["schemas"]["CoreBuiltinCallTraceDto"][];
            /** @example 0xbf424a717932e4868644f69e8f297ce51d5f4596089635312b2ad9c610cc0018 */
            txHash: string;
            /** @example 0x1 */
            nonce: string;
            /** @example error */
            error: string;
            /** @example error */
            revertReason: string;
            /** @example 0x123 */
            gasPrice: string;
            /** @example 0x345 */
            maxFeePerGas: string;
            /** @example 0x123 */
            maxPriorityFeePerGas: string;
            /** @example 0x35b60 */
            gasHex: string;
            events: components["schemas"]["CoreBuiltinTraceLogDto"][];
        };
        CoreBuiltinBlockTracesDto: {
            /**
             * @example BUILTIN
             * @enum {string}
             */
            type: "CUSTOM" | "CUSTOM_WITHOUT_STORE" | "BUILTIN" | "CUSTOM_GO" | "OLD_ARBITRUM_RAW_TRACE";
            /** @example v1.2.3 */
            version: string;
            /** @example 16123123 */
            blockNumber?: number;
            /** @example 0xb80490b1bed7a31536b888de977f92b5c03707bf8c69ab3d066a2eef3dc2e26c */
            blockHash: string;
            /** @example 0x64bf5cde */
            blockTimestamp: string;
            traces: components["schemas"]["CoreBuiltinTransactionRootSuccessTraceDto"][];
        };
        CoreCustomBlockTraceDto: {
            /**
             * @example CUSTOM
             * @enum {string}
             */
            type: "CUSTOM" | "CUSTOM_WITHOUT_STORE" | "BUILTIN" | "CUSTOM_GO" | "OLD_ARBITRUM_RAW_TRACE";
            /** @example v1.2.3 */
            version: string;
            /** @example 17123123 */
            number: number;
            /** @example 0xb80490b1bed7a31536b888de977f92b5c03707bf8c69ab3d066a2eef3dc2e26c */
            blockHash: string;
            /** @example 0x64bf5cde */
            blockTimestamp: string;
            traces: (components["schemas"]["CoreCustomErrorTransactionTraceDto"] | components["schemas"]["CoreCustomRootTxEventCallstackTraceFullDto"])[];
        };
        CoreCustomErrorTransactionTraceDto: {
            /** @example error */
            error: string;
            /** @example 0xbf424a717932e4868644f69e8f297ce51d5f4596089635312b2ad9c610cc0018 */
            txHash: string;
            /** @example 0x1 */
            nonce: string;
            /** @example 0x3e48f */
            gasPrice: string;
            /** @example 0x3e48f */
            maxFeePerGas: string;
            /** @example 0x3e48f */
            maxPriorityFeePerGas: string;
            /** @example 0x3e48f */
            gasHex: string;
        };
        CoreCustomTraceLogDto: {
            /** @example 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff */
            data: string;
            topics: unknown[][];
            /** @example 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48 */
            contract: string;
        };
        CustomStorageDto: {
            /** @example load */
            type: string;
            /** @example 8 */
            key: string;
            /** @example 63780c770000000000008255bfdbaa0269330000000000000b9057fb86bca9b0 */
            value: string;
        };
        CoreCustomTxEventCallstackTraceDto: {
            /** @example TRANSFER_ETHER */
            type: string;
            /** @example 0x71dad91e069861350c2ba882fd86762a5efe8792 */
            from: string;
            /** @example 0x71dad91e069861350c2ba882fd86762a5efe8792 */
            to: string;
            /** @example 0x5f68e8131ecf80000 */
            value: string;
            /** @example 123 */
            gasLimit: number;
            /** @example 123 */
            gasUsed: number;
            /** @example 0xd0e30db0 */
            input: string;
            /** @example 0x0000000000000000000000000000000000000000000000000000000000000001 */
            output: string;
            /** @example 781ns */
            time: string;
            calls: components["schemas"]["CoreCustomTxEventCallstackTraceDto"][];
            logs: components["schemas"]["CoreCustomTraceLogDto"][];
            /**
             * @example RETURNED
             * @enum {string}
             */
            status: "REVERTED" | "INVALID_OPCODE" | "RETURNED" | "STOPPED" | "ERROR" | "NO_CONTRACT" | "OUT_OF_GAS" | "SELFDESTRUCTED" | "ERROR_UNWIND";
            /** @example 1 */
            success: number;
            /** @example 0x0000000000000000000000000000000000000000000000000000000000000001 */
            res: string;
            /** @example 1 */
            depth: number;
            /** @example 0x71dad91e069861350c2ba882fd86762a5efe8792 */
            destructAddress: string;
            /** @example error */
            errorDetails: string;
            storage: components["schemas"]["CustomStorageDto"][];
            /** @example 123 */
            prevGasLimit: number;
            /** @example 0x3e48f */
            gas: string;
            /** @example 0x3e48f */
            gasCost: number;
            /** @example 0x71dad91e069861350c2ba882fd86762a5efe8792 */
            address: string;
        };
        CoreCustomRootTxEventCallstackTraceFullDto: {
            /**
             * @example CALL
             * @enum {string}
             */
            type: "SELFDESTRUCT" | "CREATE" | "CREATE2" | "CALL" | "CALLCODE" | "DELEGATECALL" | "STATICCALL" | "TRANSFER_ETHER" | "INVALID" | "STOP";
            /** @example 0x71dad91e069861350c2ba882fd86762a5efe8792 */
            from: string;
            /** @example 0x71dad91e069861350c2ba882fd86762a5efe8792 */
            to: string;
            /** @example 0x5f68e8131ecf80000 */
            value: string;
            /** @example 123 */
            gasLimit: number;
            /** @example 123 */
            gasUsed: number;
            /** @example 0xd0e30db0 */
            input: string;
            /** @example 0x0000000000000000000000000000000000000000000000000000000000000001 */
            output: string;
            /** @example 781ns */
            time: string;
            calls: components["schemas"]["CoreCustomTxEventCallstackTraceDto"][];
            logs: components["schemas"]["CoreCustomTraceLogDto"][];
            /**
             * @example REVERTED
             * @enum {string}
             */
            status: "REVERTED" | "INVALID_OPCODE" | "RETURNED" | "STOPPED" | "ERROR" | "NO_CONTRACT" | "OUT_OF_GAS" | "SELFDESTRUCTED" | "ERROR_UNWIND";
            /** @example 1 */
            success: number;
            /** @example 0x71dad91e069861350c2ba882fd86762a5efe8792 */
            address: string;
            /** @example 0x0000000000000000000000000000000000000000000000000000000000000001 */
            res: string;
            /** @example 3 */
            depth: number;
            /** @example 0x71dad91e069861350c2ba882fd86762a5efe8792 */
            destructAddress: string;
            /** @example error */
            errorDetails: string;
            storage: components["schemas"]["CustomStorageDto"][];
            /** @example 0xbf424a717932e4868644f69e8f297ce51d5f4596089635312b2ad9c610cc0018 */
            txHash: string;
            /** @example 0x1 */
            nonce: string;
            /** @example 0x3f5476a00 */
            gasPrice: string;
            /** @example 0x3e48f */
            maxFeePerGas: string;
            /** @example 0x3e48f */
            maxPriorityFeePerGas: string;
            /** @example 0x3e48f */
            intrinsicGas: number;
            /** @example 123 */
            gasRefund: number;
            /** @example 123 */
            gasActual: number;
            /** @example 0x123123123 */
            gasHex: string;
        };
        PlainTransactionTraceWithTypeDto: {
            transactionTrace: (components["schemas"]["CoreBuiltinTransactionRootSuccessTraceDto"] | components["schemas"]["CoreCustomErrorTransactionTraceDto"] | components["schemas"]["CoreCustomRootTxEventCallstackTraceFullDto"])[];
            /** @enum {string} */
            type: "CUSTOM" | "CUSTOM_WITHOUT_STORE" | "BUILTIN" | "CUSTOM_GO" | "OLD_ARBITRUM_RAW_TRACE";
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    SyncedIntervalRestApiController_readSyncedInterval: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 1 */
                chain: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReadSyncedIntervalResponseDto"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BlockTraceRestApiController_blockTraceByNumber: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 1 */
                chain: string;
                /** @example 15000000 */
                blockNumber: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CoreBuiltinBlockTracesDto"] | components["schemas"]["CoreCustomBlockTraceDto"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BlockTraceRestApiController_transactionTraceByBlockNumberAndTxHash: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 1 */
                chain: string;
                /** @example 17378177 */
                blockNumber: string;
                /** @example 0x16897e492b2e023d8f07be9e925f2c15a91000ef11a01fc71e70f75050f1e03c */
                txHash: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlainTransactionTraceWithTypeDto"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BlockTraceRestApiController_transactionTraceByBlockNumberAndOffset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 1 */
                chain: string;
                /** @example 17378177 */
                blockNumber: string;
                /** @example 1 */
                offset: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlainTransactionTraceWithTypeDto"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
